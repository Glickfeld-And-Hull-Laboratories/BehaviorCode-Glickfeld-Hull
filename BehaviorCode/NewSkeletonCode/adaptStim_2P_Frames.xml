<?xml version="1.0"?>
<monkeyml version="1.0">
  <io_devices tag="IO Devices">
    <iodevice tag="LabJackU6" priority="" type="LabJackU6" 
              pulse_duration="juice" pulse_on="juice" 
              lever1="FIO1" 
              lever1_solenoid="MIO0"
              laser_trigger="laserTrigger"
              optic_device="optic_device"
              strobed_digital_word="strobedDigitalWord"
              do_wheelspeed="DoWheelSpeed"
              ws_durationUS="speedIntervalUS"
              wheel_speed="wheelSpeed"
              doCB="doCerebellarStim"
              quadrature="quadrature"
              counter="counter"/>
    <iodevice tag="FakeMonkey" priority="" type="fake_monkey" id="" alt="" spike_rate="10"/>
    <iodevice type="serverside_conduit" tag="Server-side Event Conduit" resource_name="server_conduit"/>
  </io_devices>
  <variables tag="Variables">
    <folder tag="Behavioral Control">
      <variable tag="experimentXmlTrialId" scope="global" logging="when_changed" default_value="8" type="integer" persistant="1"/> <!-- n.b. it is forcibly set each trial below -->
      <variable tag="optic_device" scope="global" logging="when_changed" default_value="led" type="string"/>

      <variable tag="subjectNum" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Task Type"/>
      <variable tag="doRandCon" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="Task Type"/>      
      <variable tag="doRandDir" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="Task Type"/>

      <variable tag="frameRateHz" scope="global" logging="when_changed" default_value="30" type="float" persistant="1" groups="Trial Structure"/>
      <variable tag="itiTimeMs" scope="global" logging="when_changed" default_value="100" type="float" persistant="1" groups="Trial Structure"/>
      <variable tag="initialAdaptTimeMs" scope="global" logging="when_changed" default_value="40000" type="float" persistant="1" groups="Trial Structure"/>
      <variable tag="topUpAdaptTimeMs" scope="global" logging="when_changed" default_value="5000" type="float" persistant="1" groups="Trial Structure"/> 
      <variable tag="trialsPerAdaptBlock" scope="global" logging="when_changed" default_value="30" type="integer" persistant="1" groups="Trial Structure"/>   

      <variable tag="doWheelSpeed" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="Wheel Speed"/>
      <variable tag="speedIntervalMS" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Wheel Speed"/>
      <variable tag="wheelSpeed" scope="global" logging="when_changed" default_value="0" type="float" persistant="0" groups="Wheel Speed"/>
      <variable tag="sendElectrophysSync" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="Ephys"/>
      <variable tag="sendPClampSync" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="Ephys"/>

    </folder>
    <folder tag="Stimuli">

      <variable tag="adaptStimOnTimeMs" scope="global" logging="when_changed" default_value="250" type="float" persistant="1" groups="Adapt Parameters"/>
      <variable tag="adaptGratingContrast" scope="global" logging="when_changed" default_value="0.5" type="float" persistant="1" groups="Adapt Parameters"/>
      <variable tag="adaptGratingDirectionDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Adapt Parameters"/>
      <variable tag="adaptMaskGratingContrast" scope="global" logging="when_changed" default_value="0.5" type="float" persistant="1" groups="Adapt Parameters"/>
      <variable tag="adaptMaskGratingDirectionDegDiff" scope="global" logging="when_changed" default_value="90" type="float" persistant="1" groups="Adapt Parameters"/>

      <variable tag="testStimOnTimeMs" scope="global" logging="when_changed" default_value="1000" type="float" persistant="1" groups="Test Parameters"/>
      <variable tag="testGratingContrast" scope="global" logging="when_changed" default_value="0.5" type="float" persistant="1" groups="Test Parameters"/>
      <variable tag="testGratingContrastStepN" scope="global" logging="when_changed" default_value="5" type="float" persistant="1" groups="Test Parameters"/>
      <variable tag="testGratingContrastStepLog" scope="global" logging="when_changed" default_value="2" type="float" persistant="1" groups="Test Parameters"/>
      <variable tag="testGratingDirectionDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Test Parameters"/>
      <variable tag="testGratingDirectionStepN" scope="global" logging="when_changed" default_value="12" type="float" persistant="1" groups="Test Parameters"/>
      <variable tag="testGratingDirectionStepDeg" scope="global" logging="when_changed" default_value="30" type="float" persistant="1" groups="Test Parameters"/>


      <variable tag="maskGratingContrast" scope="global" logging="when_changed" default_value="0.5" type="float" persistant="1" groups="Mask Parameters"/>
      <variable tag="maskGratingContrastStepN" scope="global" logging="when_changed" default_value="5" type="float" persistant="1" groups="Mask Parameters"/>
      <variable tag="maskGratingContrastStepLog" scope="global" logging="when_changed" default_value="2" type="float" persistant="1" groups="Mask Parameters"/>
      <variable tag="maskGratingDirectionDegDiff" scope="global" logging="when_changed" default_value="90" type="float" persistant="1" groups="Mask Parameters"/>

      <variable tag="gratingElevationDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Grating Parameters"/>
      <variable tag="gratingAzimuthDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Grating Parameters"/>
      <variable tag="gratingDiameterDeg" scope="global" logging="when_changed" default_value="30" type="integer" persistant="1" groups="Grating Parameters"/>
      <variable tag="gratingSpatialFreqCPD" scope="global" logging="when_changed" default_value="0.1" type="float" persistant="1" groups="Grating Parameters"/>
      <variable tag="gratingTemporalFreqCPS" scope="global" logging="when_changed" default_value="2" type="integer" persistant="1" groups="Grating Parameters"/>
      <variable tag="gratingPhaseDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Grating Parameters"/>

      <variable tag="doPhotodiode" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="Photodiode Variables"/>
      <variable tag="photoStimulusContrast" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Photodiode Variables"/>
      <variable tag="photoStimulusAzimuth" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Photodiode Variables"/>
      <variable tag="photoStimulusElevation" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Photodiode Variables"/>
      <variable tag="photoStimulusWidth" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Photodiode Variables"/>
      <variable tag="photoStimulusHeight" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Photodiode Variables"/>
      <variable tag="photoMaskSpatialFreq" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Photodiode Variables"/>

    </folder>  
    
    <folder tag="Task Status">
      <variable tag="trialStart" scope="global" logging="when_changed" default_value="0" type="boolean"/>
    </folder>
    <folder tag="Online Display">
      <variable tag="sync" scope="global" logging="when_changed" default_value="0" type="integer"/>
    </folder>
    <folder tag="Hardware variables">
      <variable tag="FIO1" full_name="FIO1" default_value="0" scope="GLOBAL" type="INTEGER" editable="never" logging="when_changed"/>
      <variable tag="MIO0" full_name="MIO0" default_value="0" scope="GLOBAL" type="boolean" editable="never" logging="when_changed"/>
      <variable tag="laserTrigger" full_name="laserTrigger" default_value="0" scope="GLOBAL" type="boolean" logging="when_changed" persistant="0"/>
      <variable tag="strobedDigitalWord" full_name="strobedDigitalWord" default_value="0" scope="GLOBAL" type="integer" logging="when_changed" persistant="0"/>
      <variable tag="juice" full_name="juice" scope="GLOBAL" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="sendLaserParams" full_name="sendLaserParams" scope="GLOBAL" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="sendSerialParams" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="quadrature" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0" />
      <variable tag="counter" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
    </folder>
    <folder tag="Internal Variables">
      <variable tag="ntrials" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="tTrialStartMWTimestampMs" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="tItiWaitTimeMs" scope="global" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="tThisTrialStartTimeMs" scope="global" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="tLastTrialStartTimeMs" scope="global" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="lastTrialTimeMs" scope="global" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="tTempStim" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="tTempMask" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="tStimulusNumber" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="tMaskNumber" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="inAdapt" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="0"/>

      <variable tag="tDoContingentAdapt" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="0"/>
      <variable tag="tDoAsynchronousAdapt" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="0"/>

      <variable tag="tDoRandCon" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="0"/>
      <variable tag="tDoRandDir" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="0"/>
      
      <variable tag="tItiTimeMs" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>

      <variable tag="tAdaptTimeMs" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
      <variable tag="tAdaptGratingDirectionDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
      <variable tag="tAdaptMaskGratingDirectionDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
      <variable tag="tTestStimGratingDirectionDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
      <variable tag="tTestMaskGratingDirectionDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>

      <variable tag="tAdaptGratingContrast" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
      <variable tag="tAdaptMaskGratingContrast" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
      <variable tag="tTestStimGratingContrast" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
      <variable tag="tTestMaskGratingContrast" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>

	    <variable tag="isFirstTrial" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="0"/>
      <variable tag="doCerebellarStim" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="0"/>
      <variable tag="DoWheelSpeed" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="0"/>
      <variable tag="speedIntervalUS" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="0"/>

      <variable tag="mwTestOnMs" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="mwTestOffMs" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>

      <!-- frame conversion -->
      <variable tag="tItiWaitFrames" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="nAdaptFrames" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="nAdaptStimOnFrames" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="nTestFrames" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>

  <!-- counter variables -->
      <variable tag="cItiStart" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="cAdaptStart" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="cAdaptTemp" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="cTestOn" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="cTestOff" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>

      <variable tag="tNStimAccepted" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="tNMaskAccepted" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      
      <variable type="selection" tag="svStimNumber" values="0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29" 
                selection="random_without_replacement" nsamples="30" sampling_method="samples"/>
      <variable type="selection" tag="svMaskNumber" values="0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29" 
                selection="random_without_replacement" nsamples="30" sampling_method="samples"/>     
    </folder>

  </variables>
  <stimuli tag="Stimuli">
    <stimulus type="blank_screen" tag="background" color="0.5,0.5,0.5"></stimulus>
    <stimulus type="drifting_grating" tag="adaptGrating"  direction="0" starting_phase="gratingPhaseDeg" 
              spatial_frequency="gratingSpatialFreqCPD" 
              speed="gratingTemporalFreqCPS/gratingSpatialFreqCPD" 
              grating_type="sinusoid" mask="gaussian" std_dev="0.3" mean="0.1" 
              x_size="gratingDiameterDeg" y_size="gratingDiameterDeg" 
              x_position="gratingAzimuthDeg" y_position="gratingElevationDeg" 
              rotation="tAdaptGratingDirectionDeg" 
              alpha_multiplier="tAdaptGratingContrast"></stimulus>
    <stimulus type="drifting_grating" tag="adaptMask"  direction="0" starting_phase="gratingPhaseDeg" 
              spatial_frequency="gratingSpatialFreqCPD" 
              speed="gratingTemporalFreqCPS/gratingSpatialFreqCPD" 
              grating_type="sinusoid" mask="gaussian" std_dev="0.3" mean="0.1" 
              x_size="gratingDiameterDeg" y_size="gratingDiameterDeg" 
              x_position="gratingAzimuthDeg" y_position="gratingElevationDeg" 
              rotation="tAdaptMaskGratingDirectionDeg" 
              alpha_multiplier="tAdaptMaskGratingContrast"></stimulus>
    <stimulus type="drifting_grating" tag="testGrating"  direction="0" starting_phase="gratingPhaseDeg" 
              spatial_frequency="gratingSpatialFreqCPD" 
              speed="gratingTemporalFreqCPS/gratingSpatialFreqCPD" 
              grating_type="sinusoid" mask="gaussian" std_dev="0.3" mean="0.1" 
              x_size="gratingDiameterDeg" y_size="gratingDiameterDeg" 
              x_position="gratingAzimuthDeg" y_position="gratingElevationDeg" 
              rotation="tTestStimGratingDirectionDeg" 
              alpha_multiplier="tTestStimGratingContrast"></stimulus>
    <stimulus type="drifting_grating" tag="testMask"  direction="0" starting_phase="gratingPhaseDeg" 
              spatial_frequency="gratingSpatialFreqCPD" 
              speed="gratingTemporalFreqCPS/gratingSpatialFreqCPD" 
              grating_type="sinusoid" mask="gaussian" std_dev="0.3" mean="0.1" 
              x_size="gratingDiameterDeg" y_size="gratingDiameterDeg" 
              x_position="gratingAzimuthDeg" y_position="gratingElevationDeg" 
              rotation="tTestMaskGratingDirectionDeg" 
              alpha_multiplier="tTestMaskGratingContrast"></stimulus>
    <stimulus type="drifting_grating" tag="photoDiodeGrating"  direction="0" starting_phase="0"
              spatial_frequency=".000000000001" 
              speed="0" 
              grating_type="sinusoid" mask="gaussian" std_dev="0.3" mean="0.1" 
              x_size="photoStimulusWidth" y_size="photoStimulusHeight" 
              x_position="photoStimulusAzimuth" y_position="photoStimulusElevation" 
              rotation="0" 
              alpha_multiplier="photoStimulusContrast"></stimulus>
    <stimulus type="drifting_grating" tag="photoDiodeMask"  direction="0" starting_phase="1"
              spatial_frequency="photoMaskSpatialFreq" 
              speed="0" 
              grating_type="sinusoid" mask="gaussian" std_dev="0.3" mean="0.1" 
              x_size="photoStimulusWidth" y_size="photoStimulusHeight" 
              x_position="photoStimulusAzimuth" y_position="photoStimulusElevation" 
              rotation="0" 
              alpha_multiplier="1"></stimulus>                      
  </stimuli>           
  <experiment tag="Experiment" full_name="">
    <protocol tag="JuiceOnHoldProtocol" full_name="" selection="sequential" nsamples="1" sampling_method="cycles" description="" interruptible="YES">
             <!-- init actions run only on first trial after loading experiment -->
        <action type="queue_stimulus" stimulus="background"></action>
        <action type="update_stimulus_display" tag="-"></action>
        <action tag="Start IO Device" type="start_device_IO" device="LabJackU6"></action>

        <action type="assignment" tag="reset counter" variable="counter" value="0"></action>
        <action type="if" condition="ntrials == 0">
          <action type="report" message="**** First trial since experiment load - initializing"></action>
          <action type="assignment" variable="tLastTrialStartTimeMs" value="-1"></action>
          <action type="assignment" variable="tThisTrialStartTimeMs" value="-1"></action>
          <action type="assignment" variable="lastTrialTimeMs" value="0"></action>
		      <action type="assignment" variable="isFirstTrial" value="1"></action>
          <!-- reset selection var -->
          <action type="reset_selection" selection="svStimNumber"></action>
          <action type="assignment" variable="tNStimAccepted" value="0"></action> 
          <action type="reset_selection" selection="svMaskNumber"></action>
          <action type="assignment" variable="tNMaskAccepted" value="0"></action> 
        </action>

      <trial tag="Trial 01" nsamples="2500" sampling_method="cycles" selection="sequential">
        <task_system tag="TS" full_name="TS" description="" interruptible="YES">
          <task_system_state tag="Initialization" interruptible="YES">
            <action type="if" condition="ntrials > 0">
              <action type="assignment" variable="isFirstTrial" value="0"></action>
            </action>
            <action type="assignment" tag="Sync Matlab" variable="sync" value="1"></action>
            
            <!-- In this state, do all stimulus selection/tValue setting -->
            <action type="report" message="Initializing Trial"/>

            <action type="assignment" 
            variable="tItiTimeMs" 
            value="itiTimeMs"></action>
            <action type="assignment" variable="tItiWaitFrames" value="ceil((tItiTimeMs/1000)*frameRateHz)"></action>

            <action type="assignment" tag="Encode ItiStart" variable="strobedDigitalWord" value="6"></action>
            <action type="assignment" tag="Log counter" variable="cItiStart" value="counter"></action>


            <action type="if" condition="doPhotodiode">
              <action tag="Queue Stimulus" type="live_queue_stimulus" stimulus="photoDiodeMask"></action>
              <action type="play_dynamic_stimulus" stimulus="photoDiodeMask" tag="StimOn"></action> 
              <action type="update_stimulus_display" tag="justincase"></action>
            </action>
            
            <!-- Reset t_____RemainingOn/Off to 0ms -->      
            <action type="assignment" variable="tTrialStartMWTimestampMs" value="now()/1000"></action>  <!-- integer valued ms timestamp -->

            <action type="assignment" tag="Encode START" variable="strobedDigitalWord" value="170"></action>
            <action type="assignment" tag="Encode START" variable="strobedDigitalWord" value="170"></action>
            <action type="assignment" tag="Encode START" variable="strobedDigitalWord" value="170"></action>

            <!--Transmit the trial timestamp so strobed code sequences are unique -->
            <action type="assert" condition="tTrialStartMWTimestampMs &lt;= 2147483648" 
                    message="tTrialStartMWTimestampMs is too large - should happen only after several days of running!?"
                    stop_on_failure="1"/>
            <!-- prevent overflow outside 2**31ms ~ 10 days - I don't know how to get unsigned casts in the XML -->
            <!-- encode trialStartTimestamp in bytes: 4 bytes: millions of seconds, 1000s, s, ms -->
            <action type="assignment" tag="Encode TimestampStart" variable="strobedDigitalWord" value="200"/>
        
            <action type="assignment" tag="Encode TimestampEnd" variable="strobedDigitalWord" value="201"/>

            <action type="assignment" tag="Set trialStart" variable="trialStart" value="1"></action>
            <action type="assignment" variable="experimentXmlTrialId" value="8"></action>

            <!-- choose correct stimulus number based on odds; block2 tr number does not get assigned if ! doBlock2 -->
            <action type="assignment" variable="tStimulusNumber" value="svStimNumber"/>  <!-- choose a value from selection var, 0-origin -->
            <action type="assignment" variable="tMaskNumber" value="svMaskNumber"/>  <!-- choose a value from selection var, 0-origin -->

            <action type="if" condition="sendPClampSync">
              <action type="assignment" variable="MIO0" value="1"/>
            </action>
                                  
            

            <!-- set default variables -->
            <action type="if" condition="(ntrials % trialsPerAdaptBlock) == 0">
              <action type="assignment" variable="tAdaptTimeMs" value="initialAdaptTimeMs"></action>
            </action>
            <action type="if" condition="(ntrials % trialsPerAdaptBlock) != 0">
              <action type="assignment" variable="tAdaptTimeMs" value="topUpAdaptTimeMs"></action>
            </action>

            <action type="assignment" variable="nAdaptFrames" value="ceil((tAdaptTimeMs/1000)*frameRateHz)"></action>
            <action type="assignment" variable="nAdaptStimOnFrames" value="ceil((adaptStimOnTimeMs/1000)*frameRateHz)"></action>
            <action type="assignment" variable="nTestFrames" value="ceil((testStimOnTimeMs/1000)*frameRateHz)"></action>

            <action type="if" condition="(floor(ntrials/trialsPerAdaptBlock) % 3) == 0">
              <action type="assignment" variable="tAdaptGratingContrast" value="0"></action>
              <action type="assignment" variable="tAdaptGratingDirectionDeg" value="adaptGratingDirectionDeg"></action>
              <action type="assignment" variable="tAdaptMaskGratingContrast" value="0"></action>
              <action type="assignment" variable="tAdaptMaskGratingDirectionDeg" value="adaptGratingDirectionDeg+adaptMaskGratingDirectionDegDiff"></action>
              <action type="assignment" variable="tDoContingentAdapt" value="0"></action>
              <action type="assignment" variable="tDoAsynchronousAdapt" value="0"></action>
            </action>

            <action type="if" condition="(floor(ntrials/trialsPerAdaptBlock) % 3) &gt; 0">
              <action type="assignment" variable="tAdaptGratingContrast" value="adaptGratingContrast"></action>
              <action type="assignment" variable="tAdaptGratingDirectionDeg" value="adaptGratingDirectionDeg"></action>
              <action type="assignment" variable="tAdaptMaskGratingContrast" value="adaptMaskGratingContrast"></action>
              <action type="assignment" variable="tAdaptMaskGratingDirectionDeg" value="adaptGratingDirectionDeg+adaptMaskGratingDirectionDegDiff"></action>
              <action type="if" condition="(floor(ntrials/trialsPerAdaptBlock) % 3) == 1">
                <action type="assignment" variable="tDoContingentAdapt" value="1"></action>
                <action type="assignment" variable="tDoAsynchronousAdapt" value="0"></action>
              </action>
              <action type="if" condition="(floor(ntrials/trialsPerAdaptBlock) % 3) == 2">
                <action type="assignment" variable="tDoContingentAdapt" value="0"></action>
                <action type="assignment" variable="tDoAsynchronousAdapt" value="1"></action>
              </action>
            </action>

            <action type="assignment" variable="tDoRandCon" value="doRandCon"></action>
            <action type="assignment" variable="tDoRandDir" value="doRandDir"></action> 

            <!-- single condition calculations -->
            
              <action type="if" condition="tDoRandCon">
                <action type="assignment" variable="tTempStim" value= "tStimulusNumber % testGratingContrastStepN"/>
                <action type="assignment" variable="tTestStimGratingContrast" value= "testGratingContrast / pow(testGratingContrastStepLog,tTempStim)"/>
                <action type="if" condition="tTempStim == testGratingContrastStepN-1">
                  <action type="assignment" variable="tTestStimGratingContrast" value= "0"/>
                </action>
                <action type="assignment" variable="tTempMask" value= "tMaskNumber % maskGratingContrastStepN"/>
                <action type="assignment" variable="tTestMaskGratingContrast" value= "maskGratingContrast / pow(maskGratingContrastStepLog,tTempMask)"/>
                <action type="if" condition="tTempMask == maskGratingContrastStepN-1">
                  <action type="assignment" variable="tTestMaskGratingContrast" value= "0"/>
                </action>
              </action> 
              <action type="if" condition="!tDoRandCon">
                <action type="assignment" variable="tTestStimGratingContrast" value= "testGratingContrast"/>
                <action type="assignment" variable="tTestMaskGratingContrast" value= "maskGratingContrast"/>
              </action>   
              <action type="if" condition="tDoRandDir">
                <action type="assignment" variable="tTempStim" value= "tStimulusNumber % testGratingDirectionStepN"/>
                <action type="assignment" variable="tTestStimGratingDirectionDeg" value= "testGratingDirectionDeg + (testGratingDirectionStepDeg * (tTempStim))"/>
                <action type="assignment" variable="tTestMaskGratingDirectionDeg" value= "tTestStimGratingDirectionDeg + maskGratingDirectionDegDiff"/>
              </action> 
              <action type="if" condition="!tDoRandDir">
                <action type="assignment" variable="tTestStimGratingDirectionDeg" value= "testGratingDirectionDeg"/>
                <action type="assignment" variable="tTestMaskGratingDirectionDeg" value= "tTestStimGratingDirectionDeg + maskGratingDirectionDegDiff"/>
              </action> 

            
            <!-- initialize trial start/end times -->
            <action type="if" condition="tThisTrialStartTimeMs == -1">  
              <!--first trial, leave lasttime as -1 -->
              <action type="assignment" variable="tLastTrialStartTimeMs" value="-1"></action>
            </action>
            <action type="if" condition="tThisTrialStartTimeMs != -1">  <!--else-->
              <!--later trials, copy this into last before setting this again below -->9
              <action type="assignment" variable="tLastTrialStartTimeMs" value="tThisTrialStartTimeMs"></action>
            </action>
            <action type="assignment" variable="tThisTrialStartTimeMs" value="now()/1000"></action>

            <action type="if" condition="doWheelSpeed == 1">
              <action type="assignment" variable="doCerebellarStim" value="0"/>
              <action type="assignment" variable="DoWheelSpeed" value="doWheelSpeed"/>
              <action type="assignment" variable="speedIntervalUS" value="speedIntervalMS*1000"/>
            </action>

            <action type="assignment" variable="MIO0" value="0"></action>

            <action type="report" message="In ITI, waiting $tItiWaitFrames frames"></action>
            <action type="report" message="Adapt direction $tAdaptGratingDirectionDeg; Adapt Mask direction $tAdaptMaskGratingDirectionDeg"></action>
            <action type="report" message="Test contrast $tTestStimGratingContrast; Mask contrast $tTestMaskGratingContrast"></action>
            <action type="report" message="Test direction $tTestStimGratingDirectionDeg; Mask direction $tTestMaskGratingDirectionDeg"></action>

            <action type="assignment" variable="inAdapt" value="0"/>
			
          <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="conditional" tag="" condition="counter &gt;= (cItiStart + tItiWaitFrames) &amp;&amp; tDoContingentAdapt" target="ContingentAdapt"></transition>
            <transition type="conditional" tag="Queue Adapt" condition="counter &gt;= (cItiStart + tItiWaitFrames) &amp;&amp; tDoAsynchronousAdapt" target="AsynchronousAdapt"></transition>
            <transition type="conditional" tag="If first trial, counter = 20 and ITI over, queue no Adapt" condition="counter &gt;= (cItiStart + tItiWaitFrames) &amp;&amp; isFirstTrial &amp;&amp; counter > 19 &amp;&amp; !tDoContingentAdapt &amp;&amp; !tDoAsynchronousAdapt" target="NoAdapt"></transition>
            <transition type="conditional" tag="Queue no Adapt" condition="counter &gt;= (cItiStart + tItiWaitFrames) &amp;&amp; !tDoContingentAdapt &amp;&amp; !tDoAsynchronousAdapt" target="NoAdapt"></transition>
          </task_system_state>
                
          <task_system_state tag="AsynchronousAdapt" interruptible="YES">
              <action type="if" condition="inAdapt == 0">
              <action type="report" message="in asynchronous adapt"/>
              <action type="assignment" variable="cAdaptStart" value="counter" />
              <action type="assignment" variable="inAdapt" value="1"/>
            </action>

            <action tag="Dequeue Stimulus" type="dequeue_stimulus" stimulus="adaptMask"></action> 
          	<action tag="Queue Stimulus" type="live_queue_stimulus" stimulus="adaptGrating"></action> 
            <action type="play_dynamic_stimulus" stimulus="adaptGrating" tag="AdaptOn"></action>  

            <action type="if" condition="doPhotodiode">
              <action tag="Queue Stimulus" type="live_queue_stimulus" stimulus="photoDiodeGrating"></action>
              <action tag="Dequeue Stimulus" type="dequeue_stimulus" stimulus="photoDiodeMask"></action> 
              <action type="play_dynamic_stimulus" stimulus="photoDiodeGrating" tag="StimOn"></action>
            </action>
            <action type="update_stimulus_display" tag="justincase"></action>
            <action type="assignment" variable="cAdaptTemp" value="counter" />

            <action type="if" condition="sendElectrophysSync">
              <action type="assignment" variable="MIO0" value="1"/>
            </action>

            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="conditional" tag="go to mask" condition="counter &gt;= (cAdaptTemp + nAdaptStimOnFrames)" target="AsynchronousAdapt2"></transition>
            <transition type="conditional" tag="go to test" condition="counter &gt;= (cAdaptStart + nAdaptFrames)" target="testStimOn"></transition>
          </task_system_state>

          <task_system_state tag="AsynchronousAdapt2" interruptible="YES">
            <action tag="Dequeue Stimulus" type="dequeue_stimulus" stimulus="adaptGrating"></action> 
            <action tag="Queue Stimulus" type="live_queue_stimulus" stimulus="adaptMask"></action> 
            <action type="play_dynamic_stimulus" stimulus="adaptMask" tag="AdaptOn"></action>  

            <action type="if" condition="doPhotodiode">
              <action tag="dequeue Stimulus" type="dequeue_stimulus" stimulus="photoDiodeGrating"></action>
              <action tag="Queue Stimulus" type="live_queue_stimulus" stimulus="photoDiodeMask"></action>
              <action type="play_dynamic_stimulus" stimulus="photoDiodeMask" tag="StimOn"></action>  
            </action>
            <action type="update_stimulus_display" tag="justincase"></action>
            <action type="assignment" variable="cAdaptTemp" value="counter" />

            <action type="if" condition="sendElectrophysSync">
              <action type="assignment" variable="MIO0" value="1"/>
            </action>

            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="conditional" tag="go to mask" condition="counter &gt;= (cAdaptTemp + nAdaptStimOnFrames)" target="AsynchronousAdapt"></transition>
            <transition type="conditional" tag="go to test" condition="counter &gt;= (cAdaptStart + nAdaptFrames)" target="testStimOn"></transition>
          </task_system_state>

          <task_system_state tag="ContingentAdapt" interruptible="YES">
            <action type="if" condition="inAdapt == 0">
              <action type="report" message="in contingent adapt"/>
              <action type="assignment" variable="cAdaptStart" value="counter"/>
              <action type="assignment" variable="inAdapt" value="1"/>
            </action>

            <action tag="Queue Stimulus" type="live_queue_stimulus" stimulus="adaptMask"></action> 
            <action type="play_dynamic_stimulus" stimulus="adaptMask" tag="AdaptOn"></action>
            <action tag="Queue Stimulus" type="live_queue_stimulus" stimulus="adaptGrating"></action> 
            <action type="play_dynamic_stimulus" stimulus="adaptGrating" tag="AdaptOn"></action>  

            <action type="if" condition="doPhotodiode">
              <action tag="Queue Stimulus" type="live_queue_stimulus" stimulus="photoDiodeGrating"></action>
              <action tag="Dequeue Stimulus" type="dequeue_stimulus" stimulus="photoDiodeMask"></action> 
              <action type="play_dynamic_stimulus" stimulus="photoDiodeGrating" tag="StimOn"></action>
            </action>
            <action type="update_stimulus_display" tag="justincase"></action>
            <action type="assignment" variable="cAdaptTemp" value="counter" />

            <action type="if" condition="sendElectrophysSync">
              <action type="assignment" variable="MIO0" value="1"/>
            </action>

            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="conditional" tag="go to mask" condition="counter &gt;= (cAdaptTemp + nAdaptStimOnFrames)" target="ContingentAdapt2"></transition>
            <transition type="conditional" tag="go to test" condition="counter &gt;= (cAdaptStart + nAdaptFrames)" target="testStimOn"></transition>
          </task_system_state>

          <task_system_state tag="ContingentAdapt2" interruptible="YES">
            <action tag="Dequeue Stimulus" type="dequeue_stimulus" stimulus="adaptGrating"></action> 
            <action tag="Dequeue Stimulus" type="dequeue_stimulus" stimulus="adaptMask"></action> 

            <action type="if" condition="doPhotodiode">
              <action tag="dequeue Stimulus" type="dequeue_stimulus" stimulus="photoDiodeGrating"></action>
              <action tag="Queue Stimulus" type="live_queue_stimulus" stimulus="photoDiodeMask"></action>
              <action type="play_dynamic_stimulus" stimulus="photoDiodeMask" tag="StimOn"></action>  
            </action>
            <action type="update_stimulus_display" tag="justincase"></action>
            <action type="assignment" variable="cAdaptTemp" value="counter" />

            <action type="if" condition="sendElectrophysSync">
              <action type="assignment" variable="MIO0" value="1"/>
            </action>

            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="conditional" tag="go to mask" condition="counter &gt;= (cAdaptTemp + nAdaptStimOnFrames)" target="ContingentAdapt"></transition>
            <transition type="conditional" tag="go to test" condition="counter &gt;= (cAdaptStart + nAdaptFrames)" target="testStimOn"></transition>
          </task_system_state>

          <task_system_state tag="NoAdapt" interruptible="YES">
              <action type="report" message="no stimulus adapt"/>
              <action type="assignment" variable="cAdaptStart" value="counter" />
              <action type="assignment" variable="inAdapt" value="1"/>

            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="conditional" tag="go to test" condition="counter &gt;= (cAdaptStart + nAdaptFrames)" target="testStimOn"></transition>
          </task_system_state>

          <task_system_state tag="testStimOn" interruptible="YES">
            <action_marker _unmoveable="1" tag="Actions"></action_marker>
            <action tag="Dequeue Stimulus" type="dequeue_stimulus" stimulus="adaptGrating"></action> 
            <action tag="Dequeue Stimulus" type="dequeue_stimulus" stimulus="adaptMask"></action> 
            <action type="update_stimulus_display" tag="justincase"></action>
            
            <action tag="Queue Stimulus" type="live_queue_stimulus" stimulus="testGrating"></action> 
            <action type="play_dynamic_stimulus" stimulus="testGrating" tag="StimOn"></action>
            <action tag="Queue Stimulus" type="live_queue_stimulus" stimulus="testMask"></action> 
            <action type="play_dynamic_stimulus" stimulus="testMask" tag="StimOn"></action>
            
            <action type="if" condition="doPhotodiode">
              <action tag="Queue Stimulus" type="live_queue_stimulus" stimulus="photoDiodeGrating"></action>
              <action tag="Dequeue Stimulus" type="dequeue_stimulus" stimulus="photoDiodeMask"></action> 
              <action type="play_dynamic_stimulus" stimulus="photoDiodeGrating" tag="StimOn"></action>
            </action>
            <action type="update_stimulus_display" tag="justincase"></action>
            <action type="assignment" variable="cTestOn" value="counter" />
            <action type="report" message="Test stim on"/>

            <action type="assignment" variable="mwTestOnMs" value="now()/1000" />

            <action type="if" condition="sendElectrophysSync">
              <action type="assignment" variable="MIO0" value="1"/>
            </action>

            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="conditional" tag="Dequeue Visual Stimulus" condition="counter &gt;= (cTestOn + nTestFrames)" target="testStimOff"></transition>
          </task_system_state>

          <task_system_state tag="testStimOff" interruptible="YES">
            <action_marker _unmoveable="1" tag="Actions"></action_marker>
            <action tag="Dequeue Stimulus" type="dequeue_stimulus" stimulus="testGrating"></action> 
            <action tag="Dequeue Stimulus" type="dequeue_stimulus" stimulus="testMask"></action> 

            <action type="if" condition="doPhotodiode">
              <action tag="dequeue Stimulus" type="dequeue_stimulus" stimulus="photoDiodeGrating"></action>
              <action tag="Queue Stimulus" type="live_queue_stimulus" stimulus="photoDiodeMask"></action>
              <action type="play_dynamic_stimulus" stimulus="photoDiodeMask" tag="StimOn"></action>  
            </action>
            <action type="update_stimulus_display" tag="justincase"></action>
            <action type="assignment" variable="cTestOff" value="counter" />
            <action type="assignment" variable="mwTestOffMs" value="(now()/1000)" />

            <action type="if" condition="sendElectrophysSync">
              <action type="assignment" variable="MIO0" value="0"/>
            </action>

            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="direct" target="EndTrial"></transition>
          </task_system_state>

          <task_system_state tag="EndTrial" interruptible="YES">
            <action type="report" message="Trial Ended"/>
            <!-- accept stim selection -->

            <action type="assignment" variable="ntrials" value="ntrials + 1"/>
            <action type="accept_selections" selection="svStimNumber"></action>
            <action type="assignment" variable="tNStimAccepted" value="tNStimAccepted + 1"></action>

            <!-- update selection variable -->
            <action type="if" condition="tNStimAccepted &gt;= 30">
              <action type="reset_selection" selection="svStimNumber"/>
              <action type="assignment" variable="tNStimAccepted" value="0"></action>
              <action type="report" message="Should be resetting selections,tNStimAccepted=$tNStimAccepted"/>
            </action>
            <action type="if" condition="tNStimAccepted &lt; 30">
              <action type="next_selection" selection="svStimNumber"/>
              <action type="report" message="Next selection,tNStimAccepted=$tNStimAccepted"/>
            </action>

            <action type="accept_selections" selection="svMaskNumber"></action>
            <action type="assignment" variable="tNMaskAccepted" value="tNMaskAccepted + 1"></action>

            <!-- update selection variable -->
            <action type="if" condition="tNMaskAccepted &gt;= 30">
              <action type="reset_selection" selection="svMaskNumber"/>
              <action type="assignment" variable="tNMaskAccepted" value="0"></action>
            </action>
            <action type="if" condition="tNMaskAccepted &lt; 30">
              <action type="next_selection" selection="svMaskNumber"/>
            </action>

            <action type="if" condition="doWheelSpeed == 1">
              <action type="assignment" variable="DoWheelSpeed" value="0"/>
            </action>
            <action type="assignment" tag="End Matlab Sync" variable="sync" value="0"></action>
            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="yield" tag="return to parent task system"></transition>
          </task_system_state>

        </task_system>
      </trial>
      <action tag="Stop IO Device" type="stop_device_IO" device="LabJackU6"></action>
      <action type="dequeue_stimulus" stimulus="adaptGrating"></action>
      <action type="dequeue_stimulus" stimulus="adaptMask"></action>
      <action type="dequeue_stimulus" stimulus="testGrating"></action>
      <action type="dequeue_stimulus" stimulus="testMask"></action>
      <action tag="Update Stimulus" type="update_stimulus_display"></action>
    </protocol>
  </experiment>
</monkeyml>