<?xml version="1.0"?>
<monkeyml version="1.0">
  <io_devices tag="IO Devices">
    <iodevice tag="LabJackU6" priority="" type="LabJackU6" 
	      pulse_duration="juice" pulse_on="juice" 
	      lever1="FIO1" 
	      lever2="FIO4" 
	      lever1_solenoid="FIO2" 
	      lever2_solenoid="FIO5"
	      laser_trigger="laserTriggerFIO"
	      strobed_digital_word="strobedDigitalWord">
    </iodevice>
    <iodevice tag="FakeMonkey" priority="" type="fake_monkey" id="" alt="" spike_rate="10">
    </iodevice>
  </io_devices>

  <!-- todo
       [x] Work on leverFIO vars
       [ ] add some reward per 100 correct trials?
       [X] Remove the extend ITI stuff
       [x] Deal with lever solenoid on errors at beginning of trial
  -->
  
  <variables tag="Variables">
    <folder tag="Behavioral Control">
      <variable tag="subjectNum" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"/>
      <variable tag="experimentXmlTrialId" scope="global" logging="when_changed" default_value="14" type="integer" persistant="1"/>
      <variable tag="preventDualReleaseTimeMs" scope="global" logging="when_changed" default_value="115" type="integer" persistant="1"/> 

      <!-- timing and miscellaneous behavior options -->
      <variable tag="leverSolenoidDoDuringIti" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1"/>
      <variable tag="leverSolenoidDoOnMiss" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1"/>
      <variable tag="leverSolenoidDoOnEarly" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1"/>
      <variable tag="leverSolenoidDoBothSideIncorr" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1"/>
      <variable tag="leverSolenoidDoStimSideIncorr" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1"/>
      <variable tag="leverSolenoidDoAllTrials" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1"/>
      <variable tag="leverSolenoidDoStageOne" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1"/>

      <variable tag="timeoutEarlyMs" scope="global" logging="when_changed" default_value="2000" type="integer" persistant="1"/>
      <variable tag="timeoutMissedMs" scope="global" logging="when_changed" default_value="2000" type="integer" persistant="1"/>
      <variable tag="timeoutIncorrectMs" scope="global" logging="when_changed" default_value="2000" type="integer" persistant="1"/>
      <variable tag="timeoutDualReleaseMs" scope="global" logging="when_changed" default_value="2000" type="integer" persistant="1"/> 
      
      <variable tag="rightReqHoldMs" scope="global" logging="when_changed" default_value="500" type="integer" persistant="1"/>
      <variable tag="leftReqHoldMs" scope="global" logging="when_changed" default_value="500" type="integer" persistant="1"/>
      <variable tag="reactTimeMs" scope="global" logging="when_changed" default_value="1000" type="integer" persistant="1"/>
      <variable tag="reactTooFastMs" scope="global" logging="when_changed" default_value="100" type="integer" persistant="1"/>

      <variable tag="itiFixedTimeMs" scope="global" logging="when_changed" default_value="750" type="integer" persistant="1"/>
      <variable tag="itiRandTimeMs" scope="global" logging="when_changed" default_value="750" type="integer" persistant="1"/>
      <variable tag="itiDoEnforceBothHeld" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"/>

      <variable tag="rightRewardUs" scope="global" logging="when_changed" default_value="80000" type="integer" persistant="1"/>
      <variable tag="leftRewardUs" scope="global" logging="when_changed" default_value="80000" type="integer" persistant="1"/>
      <variable tag="rewardConsecNCorrectMax" scope="global" logging="when_changed" default_value="1" type="integer" persistant="1"/>
      <variable tag="rewardConsecGapTimeMs" scope="global" logging="when_changed" default_value="200" type="integer" persistant="1"/>
      <variable tag="rewardDoStaircase" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"/>
      <variable tag="rewardStaircaseMaxUs" scope="global" logging="when_changed" default_value="120000" type="integer" persistant="1"/> 
      <variable tag="rewardStaircaseMinUs" scope="global" logging="when_changed" default_value="15000" type="integer" persistant="1"/>
      <variable tag="rewardStaircaseTargetUs" scope="global" logging="when_changed" default_value="80000" type="integer" persistant="1"/>
      <variable tag="rewardStaircaseNTrialsBeforeStart" scope="global" logging="when_changed" default_value="4" type="integer" persistant="1"/>
      <variable tag="rewardStaircaseThisTrialWeight" scope="global" logging="when_changed" default_value="0.2" type="float" persistant="1"/>
      <variable tag="rewardStaircaseDoAsymmetricTarget" scope="global" logging="when_changed" default_value="1" type="integer" persistant="1"/> 
      <variable tag="rewardStaircaseAccelExponent" scope="global" logging="when_changed" default_value="1" type="float" persistant="1"/> 
      <variable tag="rewardStaircaseStartingLeftBias" scope="global" logging="when_changed" default_value="0.5" type="float" persistant="1"/>
      <variable tag="rewardStaircaseDoSlidingWin" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"/>
      <variable tag="rewardStaircaseSlidingWinNTrials" scope="global" logging="when_changed" default_value="20" type="integer" persistant="1"/>
      <variable tag="rewardStaircaseDoEqualizeCorrects" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"/> 
      <variable tag="rewardStaircaseDoUseAllStimTrials" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"/> 

      <!-- sounds -->
      <variable tag="doTargetSound" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1"/> 
      <variable tag="targetSoundStimOffsetMs" scope="global" logging="when_changed" default_value="500" type="integer" persistant="1"/> 
      <variable tag="targetSoundVolume" scope="global" logging="when_changed" default_value="1" type="float" persistant="1"/> 
      
      <variable tag="consecErrorNTrialsCauseTimeout" scope="global" logging="when_changed" default_value="10" type="integer" persistant="1"/>
      <variable tag="consecErrorTimeoutS" scope="global" logging="when_changed" default_value="120" type="integer" persistant="1"/>
      
      
      <!-- stim odds and probabilities -->
      <variable tag="stimProbAvgLeft" scope="global" logging="when_changed" default_value="0.5" type="float" persistant="1"/>
      <variable tag="stimProbAvgSwitch" scope="global" logging="when_changed" default_value="0.5" type="float" persistant="1"/>
      
      <variable tag="trPer80Level1" scope="global" logging="when_changed" default_value="80" type="integer" persistant="1"/>
      <variable tag="trPer80Level2" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"/>
      <variable tag="trPer80Level3" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"/>
      <variable tag="trPer80Level4" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"/>
      <variable tag="trPer80Level5" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"/>
      <variable tag="trPer80Level6" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"/>
      <variable tag="trPer80Level7" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"/>
      <variable tag="trPer80Level8" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"/>

      <!-- right stimulus appearence params -->
      <variable tag="rightGratingHeightDeg" scope="global" logging="when_changed" default_value="50" type="integer" persistant="1"/>
      <variable tag="rightGratingWidthDeg" scope="global" logging="when_changed" default_value="50" type="integer" persistant="1"/>
      <variable tag="rightGratingDirectionDeg" scope="global" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="rightGratingElevationDeg" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"/>
      <variable tag="rightGratingAzimuthDeg" scope="global" logging="when_changed" default_value="35" type="integer" persistant="1"/>
      <variable tag="rightGratingSpatialFreqCPD" scope="global" logging="when_changed" default_value="0.05" type="float" persistant="1"/>
      <variable tag="rightGratingSpeedDPS" scope="global" logging="when_changed" default_value="0" type="float" persistant="1"/>
      <variable tag="rightGratingDurationMs" scope="global" logging="when_changed" default_value="800" type="integer" persistant="1"/>

      <!-- left stimulus appearance params -->
      <variable tag="leftGratingHeightDeg" scope="global" logging="when_changed" default_value="50" type="integer" persistant="1"/>
      <variable tag="leftGratingWidthDeg" scope="global" logging="when_changed" default_value="50" type="integer" persistant="1"/>
      <variable tag="leftGratingDirectionDeg" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"/>
      <variable tag="leftGratingElevationDeg" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"/>
      <variable tag="leftGratingAzimuthDeg" scope="global" logging="when_changed" default_value="-35" type="integer" persistant="1"/>
      <variable tag="leftGratingSpatialFreqCPD" scope="global" logging="when_changed" default_value="0.05" type="float" persistant="1"/>
      <variable tag="leftGratingSpeedDPS" scope="global" logging="when_changed" default_value="0" type="float" persistant="1"/>
      <variable tag="leftGratingDurationMs" scope="global" logging="when_changed" default_value="800" type="integer" persistant="1"/>
      
      <!-- overall contrast variables -->
      <variable tag="rightGratingContrast8StepsMax" scope="global" logging="when_changed" default_value="1" type="float" persistant="1"/>
      <variable tag="rightGratingContrastSPO" scope="global" logging="when_changed" default_value="2.11" type="float" persistant="1"/>
      <variable tag="leftGratingContrast8StepsMax" scope="global" logging="when_changed" default_value="1" type="float" persistant="1"/>
      <variable tag="leftGratingContrastSPO" scope="global" logging="when_changed" default_value="2.11" type="float" persistant="1"/>
      
      <!-- Match To target Variables  -->
      <variable tag="doMatchTotarget" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1"/>
      <variable tag="targetOnsetContrast" scope="global" logging="when_changed" default_value="1" type="float" persistant="1"/>
      <variable tag="targetOnsetTimeMs" scope="global" logging="when_changed" default_value="1000" type="integer" persistant="1"/>
      <variable tag="targetDurationTimeMs" scope="global" logging="when_changed" default_value="1000" type="integer" persistant="1"/>

      <!-- laser variables -->
      <variable tag="doBlock2" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1"/>
      <variable tag="doRightLaserStim" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1"/>
      <variable tag="rightLaserPowerMaxMw" scope="global" logging="when_changed" default_value="0" type="float" persistant="1"/>
      <variable tag="rightLaserTrialContrastMax" scope="global" logging="when_changed" default_value="0" type="float" persistant="1"/>
      <variable tag="rightLaserTrialContrastSPO" scope="global" logging="when_changed" default_value="2.11" type="float" persistant="1"/>
      <variable tag="doLeftLaserStim" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1"/>
      <variable tag="leftLaserPowerMaxMw" scope="global" logging="when_changed" default_value="0" type="float" persistant="1"/>
      <variable tag="leftLaserTrialContrastMax" scope="global" logging="when_changed" default_value="0" type="float" persistant="1"/>
      <variable tag="leftLaserTrialContrastSPO" scope="global" logging="when_changed" default_value="2.11" type="float" persistant="1"/>

      <!-- fake mouse params -->
      <variable tag="fakeMouseOn" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1"/>
      <variable tag="fakeMouseMaxPressMs" scope="global" logging="when_changed" default_value="300" type="integer" persistant="1"/>
      <variable tag="fakeMouseMinHoldMs" scope="global" logging="when_changed" default_value="750" type="integer" persistant="1"/>
      <variable tag="fakeMouseMaxHoldMs" scope="global" logging="when_changed" default_value="1500" type="integer" persistant="1"/>
      <variable tag="fakeMouseMaxLeverOffsetMs" scope="global" logging="when_changed" default_value="500" type="integer" persistant="1"/>
      <variable tag="fakeMouseLeftProb" scope="global" logging="when_changed" default_value="0.5" type="float" persistant="0"/> 


    </folder>
    <folder tag="Task Status">
      <variable tag="early" scope="global" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="stimulusOn" scope="global" logging="when_changed" default_value="0" type="boolean"/>
      <variable tag="leverResult" scope="global" logging="when_changed" default_value="0" type="boolean"/>
      <variable tag="success" scope="global" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="ignore" scope="global" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="incorrect" scope="global" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="dualrelease" scope="global" logging="when_changed" default_value="0" type="integer"/> -->
      <variable tag="trialStart" scope="global" logging="when_changed" default_value="0" type="boolean"/>
      <variable tag="pressTimestampMs" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
      <variable tag="actualHoldTimeMs" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>

      <variable tag="sync" scope="global" logging="when_changed" default_value="0" type="boolean"/>
    </folder>

    <folder tag="Hardware variables">
      <variable tag="FIO1" full_name="FIO1" default_value="0" scope="global" type="boolean" editable="never" logging="when_changed"/>
      <variable tag="FIO2" full_name="FIO2" default_value="0" scope="global" type="boolean" editable="never" logging="when_changed"/>
      <variable tag="FIO4" full_name="FIO4" default_value="0" scope="global" type="boolean" editable="never" logging="when_changed"/>
      <variable tag="FIO5" full_name="FIO5" default_value="0" scope="global" type="boolean" editable="never" logging="when_changed"/>
      <variable tag="laserTriggerFIO" default_value="0" scope="global" type="boolean" logging="when_changed" persistant="0"/>
      <variable tag="strobedDigitalWord" default_value="0" scope="global" type="integer" logging="when_changed" persistant="0"/>
      <variable tag="juice" full_name="juice" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="sendLaserParams" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="sendSerialParams" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
    </folder>

    <folder tag="Internal Variables">
      <variable tag="randDeciderVar" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
      <variable tag="a" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
      <variable tag="b" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
      
      <variable tag="tGratingContrast" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
      <variable tag="tMarkovOdds" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
      

      <variable tag="tTempStimOdds" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="tStimulusNumber" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="tSvStimNumber" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="tNStimAccepted" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>0
      <variable tag="tTotalReqHoldTimeMs" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="tNTrialsCompleted" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="tNTrialsAfterStartPressed" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>


      <variable tag="tGratingDirectionDeg" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="tGratingElevationDeg" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="tGratingAzimuthDeg" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="tGratingHeightDeg" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="tGratingWidthDeg" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="tGratingSpatialFreqCPD" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
      <variable tag="tGratingSpeedDPS" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
      <variable tag="tGratingDurationMs" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      
      
      <!-- Distractor Stimulus Varibales -->
      <variable tag="dGratingDirectionDeg" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="dGratingElevationDeg" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="dGratingAzimuthDeg" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="dGratingHeightDeg" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="dGratingWidthDeg" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="dGratingSpatialFreqCPD" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
      <variable tag="dGratingContrast8StepsMax" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
      <variable tag="dGratingContrastStepsPerOctave" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
      <variable tag="dGratingSpeedDPS" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
      <variable tag="dGratingDurationMs" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      
      <!-- Trial-specific temporary variables-->

      <variable tag="tConsecCorrects" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="tConsecErrors" scope="global" logging="when_changed" default_value="0" persistent="0" type="integer" persistant="0"/>

      <variable tag="tTotalRewardTimeUs" scope="global" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="tNRewards" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
      <variable tag="tRewardConsecGapTimeMs" scope="global" logging="when_changed" default_value="200" type="integer" persistant="0"/>
      <variable tag="tConsecTimeoutStartTime" scope="global" logging="when_changed" default_value="0" persistent="0" type="integer"/>
      <variable tag="tLeftRewardUs" scope="global" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="tRightRewardUs" scope="global" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="tRewardRunningLeftBias" scope="global" logging="when_changed" default_value="0.5" type="float"/>

      <variable tag="tGratingContrast8StepsMax" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
      <variable tag="tGratingContrastStepsPerOctave" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>

      <variable tag="tTrialLaserPowerMw" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
      <variable tag="tLeftTrial" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="0"/>
      <variable tag="tFirstReactReleaseIsLeft" scope="global" logging="when_changed" default_value="-1" type="integer" persistant="0"/> 
      <!-- -1 if no release during react; 0 is right first, 1 is left first: dual release may still have happened -->
      <variable tag="tLastStimWasLeft" scope="global" logging="when_changed" default_value="-1" type="integer" persistant="0"/> 
      <variable tag="tStimTurnedOn" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>

      <variable tag="tThisTrialStartTimeMs" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
      <variable tag="tStartTrialWaitForPressTimeMs" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
      <variable tag="tItiWaitTimeMs" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>

      <variable tag="tFakeMouseHoldMs" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="tFakeMousePressMs" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="tFakeMouseLeverOffsetMs" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
      <variable tag="tFakeMouseFirstReactReleaseIsLeft" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="tempFloat" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>

      <variable type="selection" tag="svStimNumber" values="0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79" 
                selection="random_without_replacement" ntargets="80" sampling_method="targets"/>

    </folder>
  </variables>
  
  <sounds tag="Sounds">
    <sound tag="louderPressSound" type="wav_file" path="wavs/louderFlatterPress.wav"></sound>
    <sound tag="correctSound" type="wav_file" path="wavs/shortCorrect.wav"></sound>
    <sound tag="incorrectSound" type="wav_file" path="wavs/incorrectMouse.wav"></sound>
    <sound tag="rewardSound" type="wav_file" path="wavs/shortCorrect.wav"></sound>
    <sound tag="targetSound" type="wav_file" path="../wavs/2000Hztone100ms.wav" amplitude="targetSoundVolume"></sound>
  </sounds>
  <stimuli tag="Stimuli">
    <stimulus type="blank_screen" tag="background" color="0.5,0.5,0.5"></stimulus>
    <stimulus type="drifting_grating" tag="targetStimulus" 
              direction="0" starting_phase="0" 
              spatial_frequency="tGratingSpatialFreqCPD" 
              speed="tGratingSpeedDPS" 
              grating_type="sinusoid" mask="gaussian" std_dev="0.3" mean="0.1" 
              x_size="tGratingWidthDeg" y_size="tGratingHeightDeg" 
              x_position="tGratingAzimuthDeg" y_position="tGratingElevationDeg" 
              rotation="tGratingDirectionDeg" 
              alpha_multiplier="tGratingContrast"></stimulus>
    <stimulus type="drifting_grating" tag="targetStimulus" 
              direction="0" starting_phase="0" 
              spatial_frequency="tGratingSpatialFreqCPD" 
              speed="tGratingSpeedDPS" 
              grating_type="sinusoid" mask="gaussian" std_dev="0.3" mean="0.1" 
              x_size="tGratingWidthDeg" y_size="tGratingHeightDeg" 
              x_position="0" y_position="tGratingElevationDeg" 
              rotation="tGratingDirectionDeg" 
              alpha_multiplier="tGratingContrast"></stimulus>
    <stimulus type="drifting_grating" tag="distractorStimulus"
              direction="0" starting_phase="0" 
              spatial_frequency="dGratingSpatialFreqCPD" 
              speed="dGratingSpeedDPS" 
              grating_type="sinusoid" mask="gaussian" std_dev="0.3" mean="0.1" 
              x_size="dGratingWidthDeg" y_size="dGratingHeightDeg"
              x_position="dGratingAzimuthDeg" y_position="dGratingElevationDeg" 
              rotation="dGratingDirectionDeg" 
              alpha_multiplier="dGratingContrast8StepsMax"></stimulus>

    <stimulus type="drifting_grating" tag="initialOnsettargetStimulus"
              direction="0" starting_phase="0" 
              spatial_frequency="tGratingSpatialFreqCPD" 
              speed="tGratingSpeedDPS" 
              grating_type="sinusoid" mask="gaussian" std_dev="0.3" mean="0.1" 
              x_size="tGratingWidthDeg" y_size="tGratingHeightDeg"
              x_position="0" y_position="tGratingElevationDeg" 
              rotation="tGratingDirectionDeg" 
              alpha_multiplier="targetOnsetContrast"></stimulus>  
    
  </stimuli>

  <!-- begin experiment code -->
  <experiment tag="Experiment" full_name="">
    <protocol tag="JuiceOnHoldProtocol" full_name="" selection="sequential" nsamples="1" sampling_method="cycles" description="" interruptible="YES">

      <!-- init actions before running trials after any press of start-->
      <action type="queue_stimulus" stimulus="background"/>
      <action type="update_stimulus_display" tag="-"/>
      <action type="assignment" variable="tConsecCorrects" value="0"/>
      <action type="assignment" variable="tConsecErrors" value="0"/>
      <action type="assignment" variable="juice" value="0"/>
      <action type="assignment" variable="tLastStimWasLeft" value="-1"/> <!-- meaning no last trial -->
      <action type="assignment" variable="tNTrialsAfterStartPressed" value="0"/> 
      <action type="assignment" variable="tRewardRunningLeftBias" value="rewardStaircaseStartingLeftBias"/> 

      <!-- init actions run only on first trial after loading experiment -->
      <action type="if" condition="success+ignore+early+incorrect+dualrelease == 0">
        <action type="report" message="**** First trial since experiment load - initializing"/>
        <action type="assignment" variable="tThisTrialStartTimeMs" value="-1"/>

        <!-- reset selection var -->
        <action type="reset_selection" selection="svStimNumber"/>
        <action type="assignment" variable="tNStimAccepted" value="0"/> 
      </action>

      <trial tag="Trial 01" nsamples="10000" sampling_method="cycles" selection="sequential">
        <task_system tag="TS" full_name="TS" interruptable="YES" description="" interruptible="YES" 
                     _error="Task Systems must contain >=1 transition that yields to parent">
          <task_system_state tag="TrialSetup" interruptible="NO">

            <action type="assignment" tag="Sync Matlab" variable="sync" value="1"/>

            <action tag="Start IO Device" type="start_device_IO" device="LabJackU6"/> <!-- this SHOULD block until LJU6 is ready -->

            <action type="assignment" tag="Encode START" variable="strobedDigitalWord" value="170"/>
            <action type="assignment" tag="Encode START" variable="strobedDigitalWord" value="170"/>
            <action type="assignment" tag="Encode START" variable="strobedDigitalWord" value="170"/>
            

            <action type="assignment" variable="trialStart" value="1"/>
            <action type="assignment" variable="juice" value="0"/>
            <action type="assignment" variable="laserTriggerFIO" value="0"/>
            <action type="assignment" variable="tStimTurnedOn" value="0"/>
            <action type="assignment" variable="stimulusOn" value="0"/>
            <action type="assignment" variable="tFirstReactReleaseIsLeft" value="-1"/>
            <action type="assignment" tag="leverResult = 0" variable="leverResult" value="0"></action>

            <action type="assignment" variable="tThisTrialStartTimeMs" value="now()/1000.0"/>
            

            <!-- pre-trial error checking -->
            <action type="assert" stop_on_failure="1" condition="preventDualReleaseTimeMs >= 5"
                    message="Because we poll every 10 ms, preventDualReleaseTime must be > 5 to prevent collisions"/>

	    <!-- compute the left and right reward sizes for corrects each side this trial -->
            <!-- reward size; staircasing, based on tRewardRunningLeftBias -->
	    <action type="if" condition="rewardDoStaircase">

	      <action type="if" condition="!rewardStaircaseDoAsymmetricTarget">  <!-- same reward both sides -->
		<action type="assignment" variable="tLeftRewardUs" 		   
 			value="rewardStaircaseMinUs + POW( 1-(2*ABS(tRewardRunningLeftBias-0.5)), rewardStaircaseAccelExponent)*(rewardStaircaseMaxUs - rewardStaircaseMinUs)"/> 
 		<action type="assignment" variable="tRightRewardUs" 		   
 			value="tLeftRewardUs"/>
              </action>

	      <action type="if" condition="rewardStaircaseDoAsymmetricTarget">  <!-- Else.     diff reward each side based on bias -->
                <action type="assert" stop_on_failure="1" condition="rewardStaircaseAccelExponent == 1"
                    message="AccelExponent not implemented yet for asymm staircase"/>

	        <action type="if" condition="tRewardRunningLeftBias >= 0.5">  <!-- if bias toward left -->
		  <action type="assignment" variable="tLeftRewardUs" 		   
 			  value="rewardStaircaseTargetUs - 2*ABS(tRewardRunningLeftBias-0.5)*(rewardStaircaseTargetUs - rewardStaircaseMinUs)"/> 
 		  <action type="assignment" variable="tRightRewardUs" 		   
 			  value="rewardStaircaseTargetUs + 2*ABS(tRewardRunningLeftBias-0.5)*(rewardStaircaseMaxUs - rewardStaircaseTargetUs)"/>
	        </action>
	        <action type="if" condition="tRewardRunningLeftBias &lt; 0.5">  <!-- if bias toward right -->
		  <action type="assignment" variable="tRightRewardUs" 		  
			  value="rewardStaircaseTargetUs - 2*ABS(0.5-tRewardRunningLeftBias)*(rewardStaircaseTargetUs - rewardStaircaseMinUs)"/>
		  <action type="assignment" variable="tLeftRewardUs" 		  
			  value="rewardStaircaseTargetUs + 2*ABS(0.5-tRewardRunningLeftBias)*(rewardStaircaseMaxUs - rewardStaircaseTargetUs)"/> 
	        </action>
              </action>

	    </action>
	    <!-- reward size; no staircasing -->	      
	    <action type="if" condition="!rewardDoStaircase">
	      <action type="assignment" variable="tLeftRewardUs" value="leftRewardUs"/>
	      <action type="assignment" variable="tRightRewardUs" value="rightRewardUs"/>
	    </action>


            <!-- fake mouse: release both -->
            <action type="if" condition="fakeMouseOn==1">
              <action type="assignment" variable="FIO1" value="0"/>
              <action type="assignment" variable="FIO4" value="0"/>
            </action>
            


            <!-- compute ITI time, start timer -->
            <action type="assert" stop_on_failure="1" condition="itiFixedTimeMs > 500"
                    message="itiFixedTime must be greater than 500 ms, as we do 500 ms of it at the end of trial"/>
            <action type="assignment" variable="tItiWaitTimeMs" value="itiFixedTimeMs-500"/>   <!-- initialize with a const value minus 500, now hardcoded at end of trial -->

            <action type="if" condition="itiRandTimeMs > 0">
              <action type="assignment" variable="tItiWaitTimeMs" value="tItiWaitTimeMs+rand(0,itiRandTimeMs)"/>
            </action> 

            <action type="start_timer" tag="Start interTrialTimer" timer="itiTimer" 
                    timebase="" duration="tItiWaitTimeMs" duration_units="ms"/>
	    <action type="assignment" tag="Clear stimulusOn" variable="stimulusOn" value="0"></action>

            <action type="assignment" tag="Encode ItiStart" variable="strobedDigitalWord" value="6"/>
            <action type="report" message="In StartTrial; stimulus turned on after itiTimer $tItiWaitTimeMs ms"/>                        

            <!-- setup lever solenoid state: if on during errors, and on for iti, it will stay up  -->
            <action type="if" condition="leverSolenoidDoDuringIti==1">
              <action type="assignment" variable="FIO2" value="1"/>
              <action type="assignment" variable="FIO5" value="1"/>
              <action type="assignment" tag="Encode LeverSolenoidOn" variable="strobedDigitalWord" value="12"/>
            </action>
            <action type="if" condition="!leverSolenoidDoDuringIti">
              <action type="assignment" variable="FIO2" value="0"/>
              <action type="assignment" variable="FIO5" value="0"/>
              <action type="assignment" tag="Encode LeverSolenoidOff" variable="strobedDigitalWord" value="13"/>
            </action>

            <transition type="direct" target="SetBlockVariables"/>
          </task_system_state>






          <task_system_state tag="SetBlockVariables" interruptible="NO">
            <!-- this is a separate state for code clarity -->

            <!-- choose left/right state based on left, switch, and last trial state.  See 'plan-120714.key' for math -->
            <action type="assignment" variable="tMarkovOdds" value="(1-stimProbAvgLeft)/stimProbAvgLeft" />
            <action type="assignment" variable="b" value="stimProbAvgSwitch * (1+tMarkovOdds) / (1+(tMarkovOdds*tMarkovOdds)) "/>
            <action type="assignment" variable="a" value="tMarkovOdds * b"/>

	    <action type="if" condition="tLastStimWasLeft == -1">  <!-- special case: no last trial / first trial -->
	      <action type="assignment" variable="tLeftTrial" value="rand(0,1) &lt; stimProbAvgLeft"/> 
	    </action>

	    <action type="if" condition="tLastStimWasLeft == 1">
	      <action type="assignment" variable="tLeftTrial" value="rand(0,1) &lt; (1-a)"/>
	    </action>
	    
	    <action type="if" condition="tLastStimWasLeft == 0">
	      <action type="assignment" variable="tLeftTrial" value="rand(0,1) &lt; b"/>
	    </action>

            <!-- assign tTotalReqHoldTimeMs: can be different for left, right -->
            <action type="if" condition="tLeftTrial==1">
              <action type="assignment" variable="tTotalReqHoldTimeMs" value="leftReqHoldMs"/>
            </action>
            <action type="if" condition="tLeftTrial==0">
              <action type="assignment" variable="tTotalReqHoldTimeMs" value="rightReqHoldMs"/>
            </action>

	    <!-- assign grating parameters based on L/R choice above -->
	    <action type="if" condition="tLeftTrial == 0">
	      <action type="assignment" variable="tGratingDirectionDeg" value="rightGratingDirectionDeg"/>                         
	      <action type="assignment" variable="tGratingElevationDeg" value="rightGratingElevationDeg"/>                         
	      <action type="assignment" variable="tGratingAzimuthDeg" value="rightGratingAzimuthDeg"/>                             
	      <action type="assignment" variable="tGratingHeightDeg" value="rightGratingHeightDeg"/>                       
	      <action type="assignment" variable="tGratingWidthDeg" value="rightGratingWidthDeg"/>                         
	      <action type="assignment" variable="tGratingSpatialFreqCPD" value="rightGratingSpatialFreqCPD"/>                             
	      <action type="assignment" variable="tGratingSpeedDPS" value="rightGratingSpeedDPS"/>                         
	      <action type="assignment" variable="tGratingDurationMs" value="rightGratingDurationMs"/> 
	      <action type="assignment" variable="tGratingContrast8StepsMax" value="rightGratingContrast8StepsMax"/>
	      <action type="assignment" variable="tGratingContrastStepsPerOctave" value="rightGratingContrastSPO"/>
          
            <action type="if" condition="doMatchTotarget == 1">
                <action type="assignment" variable="dGratingDirectionDeg" value="leftGratingDirectionDeg"/>                           
                <action type="assignment" variable="dGratingElevationDeg" value="leftGratingElevationDeg"/>                           
                <action type="assignment" variable="dGratingAzimuthDeg" value="leftGratingAzimuthDeg"/>                       
                <action type="assignment" variable="dGratingHeightDeg" value="leftGratingHeightDeg"/>                         
                <action type="assignment" variable="dGratingWidthDeg" value="leftGratingWidthDeg"/>                           
                <action type="assignment" variable="dGratingSpatialFreqCPD" value="leftGratingSpatialFreqCPD"/>                       
                <action type="assignment" variable="dGratingSpeedDPS" value="leftGratingSpeedDPS"/>                           
                <action type="assignment" variable="dGratingDurationMs" value="leftGratingDurationMs"/>
                <action type="assignment" variable="dGratingContrast8StepsMax" value="leftGratingContrast8StepsMax"/>
                <action type="assignment" variable="dGratingContrastStepsPerOctave" value="leftGratingContrastSPO"/>
            </action>  
	    </action>
	    
	    <action type="if" condition="tLeftTrial == 1">
	      <action type="assignment" variable="tGratingDirectionDeg" value="leftGratingDirectionDeg"/>                           
	      <action type="assignment" variable="tGratingElevationDeg" value="leftGratingElevationDeg"/>                           
	      <action type="assignment" variable="tGratingAzimuthDeg" value="leftGratingAzimuthDeg"/>                       
	      <action type="assignment" variable="tGratingHeightDeg" value="leftGratingHeightDeg"/>                         
	      <action type="assignment" variable="tGratingWidthDeg" value="leftGratingWidthDeg"/>                           
	      <action type="assignment" variable="tGratingSpatialFreqCPD" value="leftGratingSpatialFreqCPD"/>                       
	      <action type="assignment" variable="tGratingSpeedDPS" value="leftGratingSpeedDPS"/>                           
	      <action type="assignment" variable="tGratingDurationMs" value="leftGratingDurationMs"/>
	      <action type="assignment" variable="tGratingContrast8StepsMax" value="leftGratingContrast8StepsMax"/>
	      <action type="assignment" variable="tGratingContrastStepsPerOctave" value="leftGratingContrastSPO"/>
          
            <action type="if" condition="doMatchTotarget == 1">
                <action type="assignment" variable="dGratingDirectionDeg" value="rightGratingDirectionDeg"/>                           
                <action type="assignment" variable="dGratingElevationDeg" value="rightGratingElevationDeg"/>                           
                <action type="assignment" variable="dGratingAzimuthDeg" value="rightGratingAzimuthDeg"/>                       
                <action type="assignment" variable="dGratingHeightDeg" value="rightGratingHeightDeg"/>                         
                <action type="assignment" variable="dGratingWidthDeg" value="rightGratingWidthDeg"/>                           
                <action type="assignment" variable="dGratingSpatialFreqCPD" value="rightGratingSpatialFreqCPD"/>                       
                <action type="assignment" variable="dGratingSpeedDPS" value="rightGratingSpeedDPS"/>                           
                <action type="assignment" variable="dGratingDurationMs" value="rightGratingDurationMs"/>
                <action type="assignment" variable="dGratingContrast8StepsMax" value="rightGratingContrast8StepsMax"/>
                <action type="assignment" variable="dGratingContrastStepsPerOctave" value="rightGratingContrastSPO"/>
            </action>  
	    </action>


	    
            <!-- choose correct stimulus number based on odds *********************     -->
            <action type="assignment" variable="tSvStimNumber" value="svStimNumber"/>  <!-- choose a value from selection var, 0-origin -->


	    <!-- 121207 MH: note block2 is not assigned properly now, we will need to fix it -->
	    <action type="assert" condition="!doBlock2" stop_on_failure="1" message="block2 code does not work now; must set doBlock2 == 0"/>

            <action type="assignment" variable="tTempStimOdds" value="0"/>  <!-- this used only for code clarity below -->            
            <!-- level 1 -->                         
            <action type="if" condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+trPer80Level1))"> 
              <action type="assignment" variable="tStimulusNumber" value="0"/> 
            </action>
            <action type="assignment" variable="tTempStimOdds" value="tTempStimOdds + trPer80Level1"/> 

            <!-- level 2 -->                         
            <action type="if" condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+trPer80Level2))"> 
              <action type="assignment" variable="tStimulusNumber" value="1"/>
            </action>
            <action type="assignment" variable="tTempStimOdds" value="tTempStimOdds + trPer80Level2"/> 

            <!-- level 3 -->                         
            <action type="if" condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+trPer80Level3))"> 
              <action type="assignment" variable="tStimulusNumber" value="2"/>
            </action>
            <action type="assignment" variable="tTempStimOdds" value="tTempStimOdds + trPer80Level3"/> 

            <!-- level 4 -->                         
            <action type="if" condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+trPer80Level4))"> 
              <action type="assignment" variable="tStimulusNumber" value="3"/>
            </action>
            <action type="assignment" variable="tTempStimOdds" value="tTempStimOdds + trPer80Level4"/> 

            <!-- level 5 -->                         
            <action type="if" condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+trPer80Level5))"> 
              <action type="assignment" variable="tStimulusNumber" value="4"/> 
            </action>
            <action type="assignment" variable="tTempStimOdds" value="tTempStimOdds + trPer80Level5"/> 

            <!-- level 6 -->                         
            <action type="if" condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+trPer80Level6))"> 
              <action type="assignment" variable="tStimulusNumber" value="5"/> 
            </action>
            <action type="assignment" variable="tTempStimOdds" value="tTempStimOdds + trPer80Level6"/> 

            <!-- level 7 -->                         
            <action type="if" condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+trPer80Level7))"> 
              <action type="assignment" variable="tStimulusNumber" value="6"/> 
            </action>
            <action type="assignment" variable="tTempStimOdds" value="tTempStimOdds + trPer80Level7"/> 

            <!-- level 8 -->                         
            <action type="if" condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+trPer80Level8))"> 
              <action type="assignment" variable="tStimulusNumber" value="7"/> 
            </action>
            <action type="assignment" variable="tTempStimOdds" value="tTempStimOdds + trPer80Level8"/>

            <!-- error checking                -->
            <action type="assert" stop_on_failure="1"  
                    condition="tTempStimOdds == 80"
                    message="stim odds must sum to 80!  (sum now is $tTempStimOdds )"/>
            <!-- stop_on_failure=0: allow slop so it can be changed while running -->

	    <action type="assert" condition="trPer80Level1-(((int)trPer80Level1)/2)*2 == 0" stop_on_failure="1"
		    message="When doBlock2, all odds must be div. by 2"/>
	    <action type="assert" condition="trPer80Level2-(((int)trPer80Level2)/2)*2 == 0" stop_on_failure="1"
		    message="When doBlock2, all odds must be div. by 2"/>
	    <action type="assert" condition="trPer80Level3-(((int)trPer80Level3)/2)*2 == 0" stop_on_failure="1"
		    message="When doBlock2, all odds must be div. by 2"/>
	    <action type="assert" condition="trPer80Level4-(((int)trPer80Level4)/2)*2 == 0" stop_on_failure="1"
		    message="When doBlock2, all odds must be div. by 2"/>
	    <action type="assert" condition="trPer80Level5-(((int)trPer80Level5)/2)*2 == 0" stop_on_failure="1"
		    message="When doBlock2, all odds must be div. by 2"/>
	    <action type="assert" condition="trPer80Level6-(((int)trPer80Level6)/2)*2 == 0" stop_on_failure="1"
		    message="When doBlock2, all odds must be div. by 2"/>
	    <action type="assert" condition="trPer80Level7-(((int)trPer80Level7)/2)*2 == 0" stop_on_failure="1"
		    message="When doBlock2, all odds must be div. by 2"/>
	    <action type="assert" condition="trPer80Level8-(((int)trPer80Level8)/2)*2 == 0" stop_on_failure="1"
		    message="When doBlock2, all odds must be div. by 2"/>


            <!-- Choose block 2 trial type -->
            <action type="if" condition="doBlock2">
	      
              <!-- trial numbers assigned above in switch statement.  Note equal probability for both block2's.
                   If more complicated odds wanted; add a set of block2 level odds -->

              <!-- grating appearance for block 2 -->                         
              <action type="if" condition="1">  <!-- 121207 MH: needs fixing -->
                <action type="assignment" variable="tTrialLaserPowerMw" value="rightLaserPowerMaxMw"/>
	      </action>

	    </action>

	    <!-- Change so that contralateral side is not activated by the laser!!!!!-->
	    <!-- using trial laser for block 2 -->
	    <action type="if" condition="doBlock2">
              <action type="if" condition="doLeftLaserStim">

		<action type="assert" stop_on_failure="1" condition="1" message="place where tLeftTrial and 'tBlock2' are confused"/>
                <action type="if" condition="tLeftTrial == 0"> <!-- off -->
                  <action type="assignment" variable="tTrialLaserPowerMw" value="rightLaserPowerMaxMw"/>
                  <action type="assignment" variable="tGratingContrast8StepsMax" value="rightGratingContrast8StepsMax"/>
                  <action type="assignment" variable="tGratingContrastStepsPerOctave" value="rightGratingContrastSPO"/>
                </action>

                <action type="if" condition="tLeftTrial == 1"> <!-- on -->
                  <action type="assignment" variable="tTrialLaserPowerMw" value="leftLaserPowerMaxMw"/>
                  <action type="assignment" variable="tGratingContrast8StepsMax" value="leftLaserTrialContrastMax"/>
                  <action type="assignment" variable="tGratingContrastStepsPerOctave" value="leftLaserTrialContrastSPO"/>
                </action>
                
		<action type="if" condition="doRightLaserStim">
		<action type="assert" stop_on_failure="1" condition="1" message="place where tLeftTrial and 'tBlock2' are confused"/>
		  <action type="if" condition="tLeftTrial == 0"> <!-- off -->
		    <action type="assignment" variable="tTrialLaserPowerMw" value="rightLaserPowerMaxMw"/>
		    <action type="assignment" variable="tGratingContrast8StepsMax" value="rightLaserTrialContrastMax"/>
		    <action type="assignment" variable="tGratingContrastStepsPerOctave" value="rightLaserTrialContrastSPO"/>
		  </action>

		  <action type="if" condition="tLeftTrial == 1"> <!-- on -->
		    <action type="assignment" variable="tTrialLaserPowerMw" value="leftLaserPowerMaxMw"/>
		    <action type="assignment" variable="tGratingContrast8StepsMax" value="leftLaserTrialContrastMax"/>
		    <action type="assignment" variable="tGratingContrastStepsPerOctave" value="leftLaserTrialContrastSPO"/>
		  </action>
                </action>
		
                <!-- in both cases -->
                <action type="assignment" variable="tGratingDirectionDeg" value="rightGratingDirectionDeg"/>                           
                <action type="assignment" variable="tGratingElevationDeg" value="rightGratingElevationDeg"/>                           
                <action type="assignment" variable="tGratingAzimuthDeg" value="rightGratingAzimuthDeg"/>                       
                <action type="assignment" variable="tGratingHeightDeg" value="rightGratingHeightDeg"/>                         
                <action type="assignment" variable="tGratingWidthDeg" value="rightGratingWidthDeg"/>                           
                <action type="assignment" variable="tGratingSpatialFreqCPD" value="rightGratingSpatialFreqCPD"/>                       
                <action type="assignment" variable="tGratingSpeedDPS" value="rightGratingSpeedDPS"/>                           
                <action type="assignment" variable="tGratingDurationMs" value="rightGratingDurationMs"/>                       
              </action>

            </action> <!-- end doBlock2 -->


            <!-- choose stim intensity this trial -->
            <action type="assignment" variable="tGratingContrast" 
                    value="tGratingContrast8StepsMax / pow(2, 1.0*tStimulusNumber/tGratingContrastStepsPerOctave)"/>         
            <action type="report" message="Grating contrast this trial is $tGratingContrast"/>

            <!-- debug display-->
	    <!--
            <action type="report" message="tNStimAccepted == $tNStimAccepted, svStimN is $svStimNumber, tb2TrN is $tLeftTrial "/>
	    -->

            <transition type="direct" target="ITIWait"/>
          </task_system_state>



          <task_system_state tag="ITIWaitForBothPress">

            <transition type="conditional" condition="(now()/1000.0 - tThisTrialStartTimeMs) > 120 * 1000" target="EarlyRelease"/> <!-- restart trial w/ error if never pressed -->
            <transition type="conditional" condition="FIO1 == 1 &amp;&amp; FIO4 == 1" target="ITIRestart"/>
          </task_system_state>



          <task_system_state tag="ITIRestart">
            <action type="start_timer" timer="itiTimer" timebase="" duration="tItiWaitTimeMs" duration_units="ms"/>
            <action type="report" message="Restarting ITI: lever(s) released, now both pressed"/>

            <transition type="direct" target="ITIWait"/>
          </task_system_state>



          <task_system_state tag="ITIWait" interruptible="YES">
            <!-- always send laser params to controller -->
            <!-- disable this: not implemented now: MH 130114 
            <action type="assignment" tag="Send laser params to controller" variable="sendLaserParams" value="1"/>
            <action type="assignment" tag="Send laser params to controller" variable="sendLaserParams" value="0"/>
            -->
            <action type="if" condition="itiDoEnforceBothHeld == 1">
              <action type="report" message="In ITI: requiring hold"/>
            </action>
            <action type="if" condition="!(itiDoEnforceBothHeld == 1)">
              <action type="report" message="In ITI"/>
            </action>

            <transition type="conditional" condition="itiDoEnforceBothHeld &amp;&amp; (FIO1 == 0 || FIO4 == 0)" target="ITIWaitForBothPress"/>
            
            <transition type="timer_expired" target="PressWait" timer="itiTimer"/>
          </task_system_state>
          
          
          
          <task_system_state tag="PressWait" interruptible="YES">
            <action type="report" message="ITI Elapsed.. Waiting for both levers to be pressed to present stimulus... "/>

            <!-- fake mouse: schedule double press to start trial -->
            <action type="if" condition="fakeMouseOn==1">
              <action type="assignment" variable="tFakeMousePressMs" value="rand(0, fakeMouseMaxPressMs)"/>

              <action type="schedule" delay="tFakeMousePressMs*1000" duration="500" repeats="1">
                <action type="assignment" variable="FIO1" value="1"/>
                <action type="assignment" variable="FIO4" value="1"/>
              </action>
            </action>
            
            <action type="if" condition="leverSolenoidDoDuringIti==1 &amp;&amp; leverSolenoidDoStageOne==0">
              <action type="assignment" variable="FIO2" value="0"/>
              <action type="assignment" variable="FIO5" value="0"/>
	    </action>
	    
            <action type="if" condition="leverSolenoidDoStageOne==1 &amp;&amp; tLeftTrial==1 ">
              <action type="assignment" variable="FIO2" value="1"/>
              <action type="assignment" variable="FIO5" value="0"/>
	    </action>
	    
            <action type="if" condition="leverSolenoidDoStageOne==1 &amp;&amp; tLeftTrial==0 ">
              <action type="assignment" variable="FIO2" value="0"/>
              <action type="assignment" variable="FIO5" value="1"/>
	    </action>  
	    
	    <action type="assignment" tag="-" variable="tStartTrialWaitForPressTimeMs" value="now()/1000.0"></action>
            <transition type="conditional" tag="If both levers held, go to StimWait" condition=" leverSolenoidDoStageOne==0 &amp;&amp; FIO1 == 1 &amp;&amp; FIO4 == 1 " target="StimWait"/>
            <transition type="conditional"  condition="leverSolenoidDoStageOne == 1 &amp;&amp; tLeftTrial == 1 &amp;&amp; (FIO4 == 1 &amp;&amp; FIO1==0)" target="StimWait"/>
            <transition type="conditional" condition="leverSolenoidDoStageOne==1 &amp;&amp; tLeftTrial==0 &amp;&amp; (FIO1==1 &amp;&amp; FIO4==0)" target="StimWait"/>
          </task_system_state>
          
          
          <task_system_state tag="StimWait" interruptible="YES">
	    <action type="assignment" tag="set pressTimestampMs" variable="pressTimestampMs" value="now()/1000"></action>
            <action type="assignment" tag="leverResult = 1" variable="leverResult" value="1"></action>

	    <action type="play_sound" sound="louderPressSound"/>
            <action type="start_timer" timer="stimAppearanceTimer" timebase="" duration="tTotalReqHoldTimeMs" duration_units="ms"/>
            <action type="start_timer" timer="initialtargetAppearanceTimer" timebase="" duration="99999999999" duration_units="ms"/>
            <action type="if" condition="doMatchTotarget==1">
              <action type="start_timer" timer="initialtargetAppearanceTimer" timebase="" duration="targetOnsetTimeMs" duration_units="ms"/>
            </action>

            <!-- Fake mouse: do variables, schedule actions -->
            <action type="if" condition="fakeMouseOn == 1">
	      <action type="assignment" variable="tFakeMouseHoldMs" value="rand(fakeMouseMinHoldMs, fakeMouseMaxHoldMs)"/>
	      <action type="assignment" variable="tFakeMouseLeverOffsetMs" value="rand(0, fakeMouseMaxLeverOffsetMs)"/>
	      <action type="assignment" variable="tFakeMouseFirstReactReleaseIsLeft" value="(int)(rand(0,1) &lt; fakeMouseLeftProb)"/>

              <action type="if" condition="!tFakeMouseFirstReactReleaseIsLeft">	      
		<action type="schedule" delay="tFakeMouseHoldMs*1000.0" duration="500" repeats="1">
		  <action type="assignment" variable="FIO1" value="0"/>
		</action>

		<action type="schedule" delay="(tFakeMouseHoldMs+tFakeMouseLeverOffsetMs)*1000.0" duration="500" repeats="1">
		  <action type="assignment" variable="FIO4" value="0"/>
		</action>
	      </action>


              <action type="if" condition="tFakeMouseFirstReactReleaseIsLeft">	      
		<action type="schedule" delay="tFakeMouseHoldMs*1000.0" duration="500" repeats="1">
		  <action type="assignment" variable="FIO4" value="0"/>
		</action>

		<action type="schedule" delay="(tFakeMouseHoldMs+tFakeMouseLeverOffsetMs) * 1000.0" duration="500" repeats="1">
		  <action type="assignment" variable="FIO1" value="0"/>
		</action>
	      </action>
	    </action>



            <transition type="timer_expired" tag="if initialtargetTimer expired, go to targetOn" target="targetOn" timer="initialtargetAppearanceTimer"/>
            <transition type="timer_expired" tag="if stimAppearanceTimer expired, go to StimOn" target="StimOn" timer="stimAppearanceTimer"/>
            <transition type="conditional" tag="Left Roundabout for stage one" condition="leverSolenoidDoStageOne==1 &amp;&amp; tLeftTrial==1 &amp;&amp; FIO4==0" target="EarlyRelease"/>
            <transition type="conditional" tag="Right Roundabout for stage one" condition="leverSolenoidDoStageOne==1 &amp;&amp; tLeftTrial==0 &amp;&amp; FIO1==0" target="EarlyRelease"/>
            <transition type="conditional" tag="If lever up, go to EarlyRelease" 
			condition="leverSolenoidDoStageOne == 0 &amp;&amp; (FIO1 == 0 || FIO4 == 0)" target="EarlyRelease"/>
          </task_system_state>

          
          <task_system_state tag="targetOn" interruptible="NO">
            <action type="live_queue_stimulus" stimulus="initialOnsettargetStimulus"/>
            <action type="update_stimulus_display"/>
            <action type="play_dynamic_stimulus" stimulus="initialOnsettargetStimulus" tag="start"/>
            
            <action type="schedule" delay="targetDurationTimeMs*1000" duration="10" repeats="1">
                <action type="dequeue_stimulus" stimulus="initialOnsettargetStimulus"/>
                <action type="update_stimulus_display"/>
              </action>
            <action type="report" message="** Initial Onset target On **"/>
            
            
            <transition type="timer_expired" tag="if stimAppearanceTimer expired, go to StimOn" target="StimOn" timer="stimAppearanceTimer"/>
            <transition type="conditional" tag="Left StageOne Early" condition="leverSolenoidDoStageOne==1 &amp;&amp; tLeftTrial==1 &amp;&amp; FIO4==0" target="EarlyRelease"/>
            <transition type="conditional" tag="Right StageOne Early" condition="leverSolenoidDoStageOne==1 &amp;&amp; tLeftTrial==0 &amp;&amp; FIO1==0" target="EarlyRelease"/>
            <transition type="conditional" tag="If lever up, go to EarlyRelease" 
			condition="leverSolenoidDoStageOne == 0 &amp;&amp; (FIO1 == 0 || FIO4 == 0)" target="EarlyRelease"/>
          </task_system_state>
          

          <task_system_state tag="StimOn" interruptible="NO">
            <action type="assignment" tag="Encode LeverPressStart" variable="strobedDigitalWord" value="3"/>
            
            <!-- If using MatchTotarget Variables, dequeue initialtarget-->


            <!-- turn on trial laser if requested -->
            <action type="if" condition="tTrialLaserPowerMw > 0">
              <action type="assignment" variable="laserTriggerFIO" value="1"/> 
              <action type="assignment" tag="Encode LaserStimOn" variable="strobedDigitalWord" value="5"/>
            </action>
            
            <action type="start_timer" tag="Start Too Fast Timer" timer="tooFastTimer" timebase="" duration="reactTooFastMs" duration_units="ms"/>
            <action type="start_timer" tag="Start React Timer" timer="reactTimeTimer" timebase="" duration="reactTimeMs" duration_units="ms"/>

            <action type="assignment" variable="stimulusOn" value="1"/>
            <action type="report" message="StimOn (still holding; signaling release ok)"/>

            <!-- Normal Vis Stim On -->
            <action type="live_queue_stimulus" stimulus="targetStimulus"/>
            
            <action type="if" condition="doTargetSound">
              <action type="schedule" delay="targetSoundStimOffsetMs*1000" duration="500" repeats="1">
                <action type="if" condition="tStimTurnedOn == 1 || targetSoundStimOffsetMs == 0"> 
                  <action type="play_sound" sound="targetSound"/>
                </action>
              </action>
            </action>
            <action type="play_dynamic_stimulus" stimulus="targetStimulus" tag="start"/>
            
            <!-- If MTS On, Play Distractor and target-->
            <action type="if" condition="doMatchTotarget">>
                <action type="dequeue_stimulus" stimulus="initialOnsettargetStimulus"/>
                <action type="live_queue_stimulus" stimulus="distractorStimulus"/>  
                <action type="play_dynamic_stimulus" stimulus="distractorStimulus" tag="start"/>
                <!-- Play target only if targetDuration exceeds required hold time-->
                <action type="if" condition="(targetOnsetTimeMs + targetDurationTimeMs) > tTotalReqHoldTimeMs">
                  <action type="live_queue_stimulus" stimulus="targetStimulus"/>
                  <action type="play_dynamic_stimulus" stimulus="targetStimulus" tag="start"/>
                </action>
            </action>
            <action type="update_stimulus_display"/>
            
            <action type="assignment" tag="Encode VisStimOn" variable="strobedDigitalWord" value="4"/>

            <!-- finalize variables -->
            <action type="assignment" variable="tStimTurnedOn" value="1"/>

            <action type="if" condition="tLeftTrial">
	      <action type="assignment" variable="tLastStimWasLeft" value="1"/>	      
	    </action>
            <action type="if" condition="!tLeftTrial">
	      <action type="assignment" variable="tLastStimWasLeft" value="0"/>	      
	    </action>

            <transition type="conditional" condition="leverSolenoidDoStageOne==1" target="React"/>
            <transition type="direct" tag="Always Go to CheckTooFastTime" target="CheckTooFastTime"/>
          </task_system_state>

          <task_system_state tag="CheckTooFastTime" interruptible="NO">
            <!-- spin in this state, any release is a tooFast (early) -->
            <!-- no actions! -->
            
            <transition type="timer_expired" tag="if tooFastTimer expired, go to React" target="React" timer="tooFastTimer"/>
            <transition type="conditional" tag="If LeverUp, go to EarlyRelease" condition="leverSolenoidDoStageOne==0 &amp;&amp; (FIO1 == 0 || FIO4 == 0)" target="EarlyRelease"/>
            <transition type="conditional" tag="Left Roundabout for stage one" condition="leverSolenoidDoStageOne==1 &amp;&amp; tLeftTrial==1 &amp;&amp; FIO4==1" target="React"/>
            <transition type="conditional" tag="Right Roundabout for stage one" condition="leverSolenoidDoStageOne==1 &amp;&amp; tLeftTrial==0 &amp;&amp; FIO1==1" target="React"/>
            
          </task_system_state>

          <task_system_state tag="React" interruptible="YES">
            <!-- spin in this state; any release is correct -->
            <action_marker _unmoveable="1" tag="Actions"></action_marker>

            <!-- turn off stimulus if longer than gratingDurationMs -->                     
            <action type="if" condition="tStimTurnedOn == 1">  <!-- so we only turn it off once here -->
              <action type="if" condition="(((now()/1000) - pressTimestampMs) - tTotalReqHoldTimeMs) > tGratingDurationMs">
                <action type="dequeue_stimulus" stimulus="targetStimulus"/>

                <action type="if" condition="doMatchTotarget">
                    <action type="dequeue_stimulus" stimulus="distractorStimulus"/>
                    <action type="dequeue_stimulus" stimulus="targetStimulus"/>
                </action>

                <action type="update_stimulus_display"/> 
                <action type="assignment" variable="tStimTurnedOn" value="0"/>                

              </action>
            </action>

	    <transition type="conditional" condition="leverSolenoidDoStageOne==1 &amp;&amp; tLeftTrial==1 &amp;&amp; FIO4==0" target="Reward"/>
	    <transition type="conditional" condition="leverSolenoidDoStageOne==1 &amp;&amp; tLeftTrial==0 &amp;&amp; FIO1==0" target="Reward"/>    
	    
	    <transition type="conditional" tag="If any response, check for dualRelease first"
			condition="leverSolenoidDoStageOne==0 &amp;&amp; (FIO1 == 0 || FIO4 == 0)" target="SpinDualRelease"/>
	    
	    <transition type="timer_expired" tag="If React Time Expired, Go To Missed" target="Missed" timer="reactTimeTimer"/>

	    <transition type="direct" target="React"/>  <!--spin on this state to turn off stim if necessary -->
	  </task_system_state>
          
	  
	  <task_system_state tag="SpinDualRelease" interruptible="NO">
            <!-- if we get to this state, lever has been released -->
            <action type="assignment" tag="mark lever release" variable="leverResult" value="0"></action>   

            <action type="assignment" variable="actualHoldTimeMs" value="(now()/1000)-pressTimestampMs"/>
            <action type="start_timer" timer="preventDualReleaseTimer" duration="preventDualReleaseTimeMs" duration_units="ms"/>
            <action type="if" condition="FIO1==0">
	      <action type="assignment" variable="tFirstReactReleaseIsLeft" value="0"/>
	    </action>
            <action type="if" condition="FIO4==0">
	      <action type="assignment" variable="tFirstReactReleaseIsLeft" value="1"/>
	    </action>


	    <!-- turn off vis stim -->
            <action type="dequeue_stimulus" stimulus="targetStimulus"/>
            
            <action type="if" condition="doMatchTotarget">
                    <action type="dequeue_stimulus" stimulus="distractorStimulus"/>
                    <action type="dequeue_stimulus" stimulus="targetStimulus"/>
                </action>
            <action type="update_stimulus_display"/>
            <action type="assignment" variable="tStimTurnedOn" value="0"/> 


	    <transition type="conditional" condition="tFirstReactReleaseIsLeft == 1 &amp;&amp; FIO1==0" target="DualRelease"/>
	    <transition type="conditional" condition="tFirstReactReleaseIsLeft == 0 &amp;&amp; FIO4==0" target="DualRelease"/>
            <transition type="timer_expired" target="ReleaseNoDualCheckCorrect" timer="preventDualReleaseTimer"/>	    
	  </task_system_state>
	  
	  <task_system_state tag="ReleaseNoDualCheckCorrect" interruptible="NO">
	    <transition type="conditional" condition="tLeftTrial==1 &amp;&amp; tFirstReactReleaseIsLeft == 1" target="Reward"/>
	    <transition type="conditional" condition="tLeftTrial==0 &amp;&amp; tFirstReactReleaseIsLeft == 0" target="Reward"/> 
	    <transition type="conditional" condition="tLeftTrial==1 &amp;&amp; tFirstReactReleaseIsLeft == 0" target="Incorrect"/>	  
	    <transition type="conditional" condition="tLeftTrial==0 &amp;&amp; tFirstReactReleaseIsLeft == 1" target="Incorrect"/>	  
	  </task_system_state>

          <task_system_state tag="DualRelease" interruptible="YES">
            <action_marker _unmoveable="1" tag="Actions"></action_marker>
            <action type="assignment" variable="strobedDigitalWord" value="11"/>
            <action type="assignment" variable="dualrelease" value="dualrelease + 1"/>
            <action type="assignment" variable="tConsecCorrects" value="0"/>
            <action type="assignment" variable="tConsecErrors" value="tConsecErrors+1"/>
            <action tag="Report 5" full_name="ReportDigital" type="report" message="** Dual Release (FIO1 = $FIO1 , FIO4 = $FIO4)"/>
            <action tag="Play incorrectSound 2" type="play_sound" sound="incorrectSound"/>

	    <!-- reject stimulus selection -->
	    <action type="reject_selections" selection="svStimNumber"/>

            <action type="start_timer" tag="start timer" timer="dualreleaseTimeoutTimer" timebase="" duration="timeoutDualReleaseMs" duration_units="ms"/>
            <action type="report" message="****** Dual Release TimeOut for $timeoutDualReleaseMs ms"/>
            
            <action type="if" tag="if leverSolenoidDo/ErrorsOnly" condition="leverSolenoidDoAllTrials">
              <action type="assignment" tag="lever Solenoid on" variable="FIO2" value="1"/>
              <action type="assignment" tag="lever Solenoid on" variable="FIO5" value="1"/>
              <action type="assignment" tag="Encode LeverSolenoidOn" variable="strobedDigitalWord" value="12"/>
            </action>
            
            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="timer_expired" target="PossibleEndTimeout" timer="dualreleaseTimeoutTimer"/>
          </task_system_state>     
	  

          <task_system_state tag="EarlyRelease" interruptible="YES">
            <action_marker _unmoveable="1" tag="Actions"></action_marker>

            <action type="assignment" tag="Encode LeverReleaseEarly" variable="strobedDigitalWord" value="8"/>
            <action type="assignment" tag="mark lever release" variable="leverResult" value="0"></action> 

            <action type="assignment" variable="actualHoldTimeMs" value=" (now()/1000) - pressTimestampMs"/>
            <action type="report" tag="Report" message="actualHoldTimeMs = $actualHoldTimeMs"/>
            <action tag="ReportEarlyRelease" full_name="ReportDigital" type="report" message="** Early Release (FIO1 = $FIO1 , FIO4 = $FIO4)"/>
            <!-- update running variables -->
            <action type="assignment" variable="early" value="early+1"/>
            <action type="assignment" variable="tConsecErrors" value="tConsecErrors+1"/>
            
            <action tag="Play incorrectSound" type="play_sound" sound="incorrectSound"/>

            <!-- reject stim selection -->
            <action type="reject_selections" selection="svStimNumber"/>

            <action type="if" tag="if leverSolenoidDo/Early" condition="leverSolenoidDoAllTrials || leverSolenoidDoOnEarly">
              <action type="assignment" tag="lever Solenoid on" variable="FIO2" value="1"/>
              <action type="assignment" tag="lever Solenoid on" variable="FIO5" value="1"/>
              <action type="assignment" tag="Encode LeverSolenoidOn" variable="strobedDigitalWord" value="12"/>
            </action>
            <action type="dequeue_stimulus" stimulus="targetStimulus"/>
            <action type="if" condition="doMatchTotarget">
                    <action type="dequeue_stimulus" stimulus="distractorStimulus"/>
                    <action type="dequeue_stimulus" stimulus="targetStimulus"/>
                </action>
            <action type="update_stimulus_display"/>
            <action type="assignment" variable="tStimTurnedOn" value="0"/> 

            <action type="start_timer" tag="Start earlyTimeoutTimer" timer="earlyTimeoutTimer" timebase="" duration="timeoutEarlyMs" duration_units="ms"/>
            <action type="report" message="****** Early TimeOut for $timeoutEarlyMs ms"/>
            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="timer_expired" target="PossibleEndTimeout" timer="earlyTimeoutTimer"/>
          </task_system_state>


          <task_system_state tag="Reward" interruptible="NO">

            <action type="assignment" tag="Encode LeverReleaseCorrect" variable="strobedDigitalWord" value="9"/>

            <!-- selection variable: accept -->
            <action type="accept_selections" selection="svStimNumber"/>
            <action type="assignment" variable="tNStimAccepted" value="tNStimAccepted + 1"/>

            <!-- selection variable: choose next -->
            <action type="if" condition="tNStimAccepted >= 80">
              <action type="reset_selection" selection="svStimNumber"/>
              <action type="assignment" variable="tNStimAccepted" value="0"/>
            </action>
            <action type="if" condition="tNStimAccepted &lt; 80">
              <action type="next_selection" selection="svStimNumber"/>
            </action>

            <!-- update running variables -->
            <action type="assignment" variable="actualHoldTimeMs" value=" (now()/1000) - pressTimestampMs"/>
            <action type="report" message="** Success: actualHoldTimeMs = $actualHoldTimeMs"/>
            <action type="assignment" variable="success" value="success+1"/>
            
            <action type="assignment" variable="tConsecErrors" value="0"/>


	    <!-- assign reward size based on l/r trial; left/rightRewardUs is computed above at start of trial -->
	    <action type="if" condition="tLeftTrial == 1">
	      <action type="assignment" variable="tTotalRewardTimeUs" value="tLeftRewardUs"/>
	    </action>
	    <action type="if" condition="tLeftTrial == 0">
	      <action type="assignment" variable="tTotalRewardTimeUs" value="tRightRewardUs"/>
	    </action>

	    <!-- update bias, every trial corr/incorr (needs to be dup'd); only if not doing sliding win (now done in python) -->
	    <action type="if" condition="rewardDoStaircase &amp;&amp; (!rewardStaircaseDoSlidingWin) &amp;&amp; (tNTrialsAfterStartPressed >= rewardStaircaseNTrialsBeforeStart)">            
	      <action type="assignment" variable="tRewardRunningLeftBias" 	      
		value="(1-rewardStaircaseThisTrialWeight) * tRewardRunningLeftBias + rewardStaircaseThisTrialWeight*(int)tFirstReactReleaseIsLeft" />
	    </action>

            <!-- change tNRewards based on consec corrects -->
            <action type="if" tag="if tConsecCorrects &lt; max" condition="tConsecCorrects &lt; rewardConsecNCorrectMax">
              <action type="assignment" tag="tConsecCorrects++" variable="tConsecCorrects" value="tConsecCorrects+1"/>
            </action>
            <action type="assignment" tag="set tNRewards" variable="tNRewards" value="tConsecCorrects"/>
            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="direct" target="GiveReward"/>
          </task_system_state>


          <task_system_state tag="GiveReward" interruptible="YES">
            <action type="assignment" tag="tNRewards--" variable="tNRewards" value="tNRewards-1"/>
            <transition type="conditional" tag="if rewards remain, go to SingleReward (note must be -1)" condition="tNRewards > -1" target="SingleReward"/>
            <transition type="direct" tag="Otherwise exit reward loop" target="PossibleEndTimeout"/>
          </task_system_state>

          <task_system_state tag="SingleReward" interruptible="NO">
            <action type="assignment" tag="timer = gap+juice time" variable="tRewardConsecGapTimeMs" value="rewardConsecGapTimeMs + (tTotalRewardTimeUs/1000)"/>
            <action type="start_timer" timer="rewardConsecGapTimer" timebase="" duration="tRewardConsecGapTimeMs" duration_units="ms"/>

            <action type="assignment" tag="Start reward" variable="juice" value="tTotalRewardTimeUs"/>
            <action type="assignment" tag="Encode Reward" variable="strobedDigitalWord" value="10"/>
            <!--<action type="report" message="juice = $juice"/>-->
            <action tag="Play reward sound" type="play_sound" sound="rewardSound"/>

            <transition type="timer_expired" tag="back to GiveReward" target="GiveReward" timer="rewardConsecGapTimer"></transition>
          </task_system_state>
          
          <task_system_state tag="Incorrect" interruptible="YES">
            <action_marker _unmoveable="1" tag="Actions"></action_marker>
            <action type="assignment" variable="strobedDigitalWord" value="11"/>
            <action type="assignment" variable="actualHoldTimeMs" value=" (now()/1000) - pressTimestampMs"/>
            <action type="report" message="actualHoldTimeMs = $actualHoldTimeMs"/>
            <action type="assignment" variable="incorrect" value="incorrect + 1"/>
            <action type="assignment" variable="tConsecCorrects" value="0"/>
            <action type="assignment" variable="tConsecErrors" value="tConsecErrors+1"/>
            <action tag="Report 5" full_name="ReportDigital" type="report" message="** Incorrect react to stimulus (FIO1 = $FIO1 , FIO4 = $FIO4)"/>
            <action tag="Play incorrectSound 2" type="play_sound" sound="incorrectSound"/>

            <!-- accept stim selection -->
            <action type="accept_selections" selection="svStimNumber"/>
            <action type="assignment" variable="tNStimAccepted" value="tNStimAccepted + 1"/>

            <!-- update selection variable -->
            <action type="if" condition="tNStimAccepted >= 80">
              <action type="reset_selection" selection="svStimNumber"/>
              <action type="assignment" variable="tNStimAccepted" value="0"/>
            </action>
            <action type="if" condition="tNStimAccepted &lt; 80">
              <action type="next_selection" selection="svStimNumber"/>
            </action>

            <action type="start_timer" tag="start timer" timer="incorrectTimeoutTimer" timebase="" duration="timeoutIncorrectMs" duration_units="ms"/>
            <action type="report" message="****** Incorrect Response TimeOut for $timeoutIncorrectMs ms"/>
            <action type="if" tag="if left and solenoidOppIncorr, fire Lsolenoid" condition="tLeftTrial==1 &amp;&amp; leverSolenoidDoStimSideIncorr==1">
	      <action type="assignment" variable="FIO2" value="0"/>
	      <action type="assignment" variable="FIO5" value="1"/>
	    </action>
            <action type="if" tag="if right and solenoidOppIncorr, fire Rsolenoid" condition="tLeftTrial==0 &amp;&amp; leverSolenoidDoStimSideIncorr==1">
	      <action type="assignment" variable="FIO2" value="1"/>
	      <action type="assignment" variable="FIO5" value="0"/>
	    </action>
            
            <action type="if" tag="if leverSolenoidDo/ErrorsOnly" condition="leverSolenoidDoAllTrials || leverSolenoidDoBothSideIncorr">
              <action type="assignment" tag="lever Solenoid on" variable="FIO2" value="1"/>
              <action type="assignment" tag="lever Solenoid on" variable="FIO5" value="1"/>
              <action type="assignment" tag="Encode LeverSolenoidOn" variable="strobedDigitalWord" value="12"/>
            </action>
            
	    <!-- update bias, every trial corr/incorr (needs to be dup'd); only if not doing sliding win (now done in python) -->
	    <action type="if" condition="rewardDoStaircase &amp;&amp; (!rewardStaircaseDoSlidingWin) &amp;&amp; (tNTrialsAfterStartPressed >= rewardStaircaseNTrialsBeforeStart)">            
	      <action type="assignment" variable="tRewardRunningLeftBias" 	      
		value="(1-rewardStaircaseThisTrialWeight) * tRewardRunningLeftBias + rewardStaircaseThisTrialWeight*(int)tFirstReactReleaseIsLeft" />
	    </action>
	    
            <action type="dequeue_stimulus" stimulus="targetStimulus"/>
            <action type="if" condition="doMatchTotarget">
                    <action type="dequeue_stimulus" stimulus="distractorStimulus"/>
                    <action type="dequeue_stimulus" stimulus="targetStimulus"/>
                </action>
            <action type="update_stimulus_display"/>
            <action type="assignment" variable="tStimTurnedOn" value="0"/> 

            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="timer_expired" target="PossibleEndTimeout" timer="incorrectTimeoutTimer"/>
          </task_system_state>








          <task_system_state tag="Missed" interruptible="YES">
            <action_marker _unmoveable="1" tag="Actions"></action_marker>
            <action type="assignment" variable="strobedDigitalWord" value="11"/>
            <action type="assignment" variable="actualHoldTimeMs" value=" (now()/1000) - pressTimestampMs"/>
            <action type="report" message="actualHoldTimeMs = $actualHoldTimeMs"/>
            <action type="assignment" variable="ignore" value="ignore + 1"/>
            <action type="assignment" variable="tConsecCorrects" value="0"/>
            <action type="assignment" variable="tConsecErrors" value="tConsecErrors+1"/>
            <action tag="Report 4" full_name="ReportDigital" type="report" message="** Ignored react stimulus"/>
            <action tag="Play incorrectSound 2" type="play_sound" sound="incorrectSound"/>
            <action type="assignment" tag="leverResult = 0" variable="leverResult" value="0"></action>

            <!-- accept stim selection -->
            <action type="accept_selections" selection="svStimNumber"/>
            <action type="assignment" variable="tNStimAccepted" value="tNStimAccepted + 1"/>

            <!-- update selection variable -->
            <action type="if" condition="tNStimAccepted >= 80">
              <action type="reset_selection" selection="svStimNumber"/>
              <action type="assignment" variable="tNStimAccepted" value="0"/>
            </action>
            <action type="if" condition="tNStimAccepted &lt; 80">
              <action type="next_selection" selection="svStimNumber"/>
            </action>

            <action type="start_timer" tag="start timer" timer="missedTimeoutTimer" timebase="" duration="timeoutMissedMs" duration_units="ms"/>
            <action type="report" message="****** Missed TimeOut for $timeoutMissedMs ms"/>
            <action type="if" tag="if leverSolenoidDo/ErrorsOnly" condition="leverSolenoidDoAllTrials || leverSolenoidDoOnMiss">
              <action type="assignment" tag="lever Solenoid on" variable="FIO2" value="1"/>
              <action type="assignment" tag="lever Solenoid on" variable="FIO5" value="1"/>
              <action type="assignment" tag="Encode LeverSolenoidOn" variable="strobedDigitalWord" value="12"/>
            </action>

            <action type="dequeue_stimulus" stimulus="targetStimulus"/>
            <action type="if" condition="doMatchTotarget">
                    <action type="dequeue_stimulus" stimulus="distractorStimulus"/>
                    <action type="dequeue_stimulus" stimulus="targetStimulus"/>
                </action>
            <action type="update_stimulus_display"/>
            <action type="assignment" variable="tStimTurnedOn" value="0"/>

            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="timer_expired" target="PossibleEndTimeout" timer="missedTimeoutTimer"/>
          </task_system_state>


          <task_system_state tag="PossibleEndTimeout" interruptible="YES">    
            <!-- do timeout if too many recent errors:
                 use a state rather than a wait action because states are interruptible -->
            <action type="if" condition="tConsecErrors >= consecErrorNTrialsCauseTimeout">
              <action type="report" message="***!!*** $consecErrorTimeoutS s timeout after $tConsecErrors consecutive errors"/>
              <action type="assignment" tag="lever Solenoid on" variable="FIO2" value="1"/>
              <action type="assignment" tag="lever Solenoid on" variable="FIO5" value="1"/>
              <action type="start_timer" timer="consecErrorTimer" timebase="" duration="consecErrorTimeoutS" duration_units="s"/>
            </action>

            <transition type="conditional" tag="- bypass timer checking if no timeout requested" 
                        condition="tConsecErrors &lt; consecErrorNTrialsCauseTimeout" target="EndTrial"/>
            <transition type="timer_expired" target="EndTrial" timer="consecErrorTimer"/>
          </task_system_state>

          
          <task_system_state tag="EndTrial" interruptible="YES">
            <action_marker _unmoveable="1" tag="Actions"></action_marker>

            <action type="assignment" variable="laserTriggerFIO" value="0"/> <!-- disable trigger no matter if it went high or not -->

            <action type="dequeue_stimulus" stimulus="targetStimulus"/>
            <action type="if" condition="doMatchTotarget">
                    <action type="dequeue_stimulus" stimulus="distractorStimulus"/>
                    <action type="dequeue_stimulus" stimulus="targetStimulus"/>
                </action>
            <action type="update_stimulus_display"/>
            <action type="assignment" variable="tStimTurnedOn" value="0"/>

	    <!-- wait for 500 ms after each trial is over to collect dualRelease values -->
	    <action type="wait" duration="500" duration_units="ms"/>

            <!-- allow two trials after each timeout is over -->
            <action type="if" condition="tConsecErrors == consecErrorNTrialsCauseTimeout">
              <action type="assignment" variable="tConsecErrors" value="consecErrorNTrialsCauseTimeout-2"/>  
            </action>
            <!-- update running vars -->
            <action type="assignment" variable="tNTrialsCompleted" value="tNTrialsCompleted+1"/>
            <action type="assignment" variable="tNTrialsAfterStartPressed" value="tNTrialsAfterStartPressed+1"/>

            <action type="assignment" tag="End Matlab Sync" variable="sync" value="0"/>

            <action type="assignment" tag="Encode END" variable="strobedDigitalWord" value="85"/>
            <action type="assignment" tag="Encode END" variable="strobedDigitalWord" value="85"/>
            <action type="assignment" tag="Encode END" variable="strobedDigitalWord" value="85"/>

            <!-- trigger serial param dump to cyberkinetics -->
            <action type="assignment" tag="Send serial params" variable="sendSerialParams" value="1"/>
            <action type="assignment" tag="Send serial params" variable="sendSerialParams" value="0"/>

            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="yield" tag="return to parent task system"/>
          </task_system_state>

        </task_system>
      </trial>
    </protocol>
  </experiment>
</monkeyml>