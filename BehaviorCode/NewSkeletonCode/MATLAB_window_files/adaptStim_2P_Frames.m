function [retval] = HoldAndDetectConstant(data_struct, input)
% Main matlab online function for HADC8
%
%  MH 100115: created
%  MH 130107: refactored into new expt* functions.
% call: exptSetupBridge, exptProcessBridgeInput, do your own thing, then exptRunSubfunctions

if nargin < 2,
    input = [];
end

ds = data_struct;
addpath('~/Repositories/BehaviorCode-Glickfeld-Hull/BehaviorCode/NewSkeletonCode/MatlabSharedCode');
addpath('~/Repositories/BehaviorCode-Glickfeld-Hull/BehaviorAnalysis');

oneValEachTrialNames = {...
    'tTrialStartMWTimestampMs', ...
    'tThisTrialStartTimeMs', ...
    'tLastTrialStartTimeMs', ...
    'tTempStim', ...
    'tTempMask', ...
    'tStimulusNumber', ...
    'tMaskNumber', ...
    'tDoContingentAdapt', ...
    'tDoAsynchronousAdapt', ...
    'tDoSingleStimAdapt', ...
    'tTestStimGratingContrast', ...
    'tTestStimGratingDirectionDeg', ...
    'tTestMaskGratingContrast', ...
    'tTestMaskGratingDirectionDeg', ...
    'tTestMaskGratingPhaseDeg', ...
    'tAdaptGratingContrast', ...
    'tAdaptMaskGratingContrast', ...
    'tAdaptGratingDirectionDeg', ...
    'tAdaptMaskGratingDirectionDeg', ...
    'tAdaptTimeMs',...
    'tDoRandCon', ...
    'tDoRandDir', ...
    'tNStimAccepted', ...
    'tNMaskAccepted', ...
    'tItiTimeMs', ...
    'mwTestOnMs',...
    'mwTestOffMs',...
    'quadrature',...
    'tItiWaitFrames', ...
    'nAdaptFrames', ...
    'nAdaptStimOnFrames', ...
    'nTestFrames', ...
    'cItiStart',...
    'cAdaptStart',...
    'cTestOn',...
    'cTestOff',...
};

events = ds.events;
eventsTrial = events;

if isempty(input),
    input.trialSinceReset = 1;
    input.startDateVec = datevec(now);
    input.saveTime = datestr(now, 'yymmdd-HHMM');
    input.savedEvents = {};
    input.eventCodecs = {};
    input.eventCodecs{1} = ds.event_codec;
    nOne = length(oneValEachTrialNames);
    for iV = 1:nOne
        input.(oneValEachTrialNames{iV}) = {};
    end
else
    input.trialSinceReset = input.trialSinceReset+1;
end
trN = input.trialSinceReset;

% Consts that govern tValues
input.constList = { 'subjectNum',...
    'speedIntervalMS', ...
    'doRandCon', ...
    'doRandDir', ...
    'doRandMaskPhase', ...
    'doWheelSpeed', ...
    'itiTimeMs', ...
    'initialAdaptTimeMs',...
    'topUpAdaptTimeMs',...
    'adaptStimOnTimeMs', ...
    'adaptGratingContrast',...
    'adaptGratingDirectionDeg',...
    'adaptMaskGratingDirectionDegDiff',...
    'trialsPerAdaptBlock',...
    'testStimOnTimeMs', ...
    'testGratingContrast', ...
    'testGratingContrastStepLog', ...
    'testGratingContrastStepN', ...
    'maskGratingContrast', ...
    'maskGratingContrastStepLog', ...
    'maskGratingContrastStepN', ...
    'maskGratingPhaseDeg', ...
    'maskGratingPhaseStepDeg', ...
    'maskGratingPhaseStepN', ...
    'testGratingDirectionDeg', ...
    'testGratingDirectionStepDeg', ...
    'testGratingDirectionStepN', ...
    'maskGratingDirectionDegDiff', ...
    'gratingElevationDeg', ...
    'gratingAzimuthDeg', ...
    'gratingDiameterDeg', ...
    'gratingSpatialFreqCPD', ...
    'gratingTemporalFreqCPS', ...
    'gratingPhaseDeg', ...
    'sendElectrophysSync',...
    'doPhotodiode',...
    'frameRateHz',...
};

for iV = 1:length(oneValEachTrialNames)
    tName = oneValEachTrialNames{iV};
    input.(tName){trN} = mwGetEventValue(eventsTrial, ds.event_codec, tName, 'last', 1);
end

nSync = length(mwGetEventValue(ds.events, ds.event_codec, ...
                             'sync', 'all', 'ignoreMissing'));

                         
syncCode = codec_tag2code(ds.event_codec, 'sync');
codeList = [ds.events.event_code];
syncNs = find(codeList == syncCode);                        
if nSync >= 4,
  % if 6 codes, pull out consts from first block and leave last
  % (Somewhat dangerous)
  constsStruct = struct;
  constsStruct = ds.events(1:syncNs(3));
  trialStruct = ds.events(syncNs(end-1):end);
  ds.events = trialStruct;
end


nConsts = length(input.constList);
for iC = 1:nConsts
  tCN = input.constList{iC};
  if input.trialSinceReset==1  % use dump on first trial
    tCV1 = mwGetEventValue(constsStruct, ds.event_codec, tCN, [], ...
                          'ignoremissing');
    input.(tCN) = tCV1;
  
  else  % look for changes on all trials
    tCV = mwGetEventValue(ds.events, ds.event_codec, tCN, [], ...
                          'ignoremissing');
    if ~isempty(tCV)
      input.(tCN) = tCV;
    end
  end
end
 
% Look for changes in constants for all trials
b={};
for iC = 1:nConsts
  tCN = input.constList{iC};
  tV = mwGetEventValue(ds.events, ds.event_codec, tCN, [], 'ignoremissing');
 
  if ~isempty(tV), 
    % Constructs array of changed consts and when they changed
    b(end+1,1:2) = {tCN, tV};
  end
end
input.constChangedOnTrial{input.trialSinceReset} = b;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

trN = input.trialSinceReset;

%% Counter/Frames Synchronization Section
try
    input.counterTimesUs{trN} = mwGetEventTime(eventsTrial, ds.event_codec, 'counter', 'all', [], 1);
    input.counterValues{trN} = mwGetEventValue(eventsTrial, ds.event_codec, 'counter', 'all', 1) ;
catch
    input.counterTimesUs{trN} = NaN;
    input.counterValues{trN} = NaN;
end

try
    input.wheelSpeedTimesUs{trN} = mwGetEventTime(ds.events, ds.event_codec, 'wheelSpeed', 'all', [], 1);
    input.wheelSpeedValues{trN} = mwGetEventValue(ds.events, ds.event_codec, 'wheelSpeed', 'all', 1) ;
catch
    input.wheelSpeedTimesUs{trN} = NaN;
    input.wheelSpeedValues{trN} = NaN;
end

%% disp status
if input.tTestStimGratingContrast{trN} > 0
    testStr = sprintf('Stim: con %g%%, dir %g%, %g% ms', input.tTestStimGratingContrast{trN}.*100, input.tTestStimGratingDirectionDeg{trN}, input.testStimOnTimeMs);
else
    testStr = sprintf('');
end
if input.tTestMaskGratingContrast{trN} > 0
    maskStr = sprintf('Mask: con %g%%, dir %g%, %g% ms', input.tTestMaskGratingContrast{trN}*100, input.tTestMaskGratingDirectionDeg{trN});
else
    maskStr = sprintf('');
end

fprintf(1,'%s %s\n', ...
    testStr, maskStr);


%% run subfunctions
input = exptRunSubfunctions(ds, input, { @plotAdaptStim });



%% save variables for next trial
retval = input;

return


