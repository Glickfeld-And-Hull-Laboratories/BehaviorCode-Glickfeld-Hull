<?xml version="1.0"?>
<monkeyml version="1.0">
  <io_devices tag="IO Devices">
    <iodevice tag="LabJackU6" priority="" type="LabJackU6" 
              pulse_duration="juice" pulse_on="juice" 
              lever1="FIO1" lever2="" 
              lever1_solenoid="FIO2"
              lever2_solenoid=""
              laser_trigger="laserTriggerFIO"
              strobed_digital_word="strobedDigitalWord"/>
    <iodevice tag="FakeMonkey" priority="" type="fake_monkey" id="" alt="" spike_rate="10"/>
    <iodevice type="serverside_conduit" tag="Server-side Event Conduit" resource_name="server_conduit"/>
  </io_devices>
  <variables tag="Variables">
    <folder tag="Behavioral Control">
      <variable tag="subjectNum" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"/>
      <variable tag="experimentXmlTrialId" scope="global" logging="when_changed" default_value="8" type="integer" persistant="1"/> <!-- n.b. it is forcibly set each trial below -->
      <variable tag="doLeverSolenoidAllTrials" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"/>
      <variable tag="doLeverSolenoidOnMiss" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"/>
      <variable tag="doLeverSolenoidOnEarly" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"/>
      <variable tag="doCycleBeforeReqHold" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1"/>
      <variable tag="fixedReqHoldTimeMs" scope="global" logging="when_changed" default_value="400" type="integer" persistant="1"/>
      <variable tag="delayMs" scope="global" logging="when_changed" default_value="1000" type="integer" persistant="1"/>
      <variable tag="reactTimeMs" scope="global" logging="when_changed" default_value="1000" type="integer" persistant="1"/>
      <variable tag="earlyTimeoutMs" scope="global" logging="when_changed" default_value="200" type="integer" persistant="1"/>
      <variable tag="missedTimeoutMs" scope="global" logging="when_changed" default_value="2000" type="integer" persistant="1"/>
      <variable tag="itiTimeMs" scope="global" logging="when_changed" default_value="750" type="integer" persistant="1"/>
      <variable tag="itiExtraRandTimeMs" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"/>
      <variable tag="doExtendItiOnShortPrevTrial" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"/>
      <variable tag="postRewardMs" scope="global" logging="when_changed" default_value="500" type="integer" persistant="1"/>
      <variable tag="minRewardUs" scope="global" logging="when_changed" default_value="20000" type="integer" persistant="1"/>
      <variable tag="maxRewardUs" scope="global" logging="when_changed" default_value="20000" type="integer" persistant="1"/>
      <variable tag="interRewardIntervalMs" scope="global" logging="when_changed" default_value="200" type="integer" persistant="1"/>
      <variable tag="maxConsecCorrects" scope="global" logging="when_changed" default_value="1" type="integer" persistant="1"/>
      <variable tag="nConsecErrorsCauseTimeout" scope="global" logging="when_changed" default_value="10" type="integer" persistant="1"/>
      <variable tag="consecErrorTimeoutS" scope="global" logging="when_changed" default_value="120" type="integer" persistant="1"/>
    </folder>
    <folder tag="Stimuli">

    </folder>
    <folder tag="Fake Mouse">
      <variable tag="doLever" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1"/>
      <variable tag="fakeMouseMaxPressMs" scope="global" logging="when_changed" default_value="300" type="integer" persistant="1"/>
      <variable tag="fakeMouseMaxReactMs" scope="global" logging="when_changed" default_value="5000" type="integer" persistant="1"/>
    </folder>
    <folder tag="Task Status">
      <variable tag="failure" scope="global" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="leverResult" scope="global" logging="when_changed" default_value="0" type="boolean"/>
      <variable tag="stimulusOn" scope="global" logging="when_changed" default_value="0" type="boolean"/>
      <variable tag="success" scope="global" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="ignore" scope="global" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="trialStart" scope="global" logging="when_changed" default_value="0" type="boolean"/>
      <variable tag="pressTimestampMs" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
      <variable tag="actualHoldTimeMs" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
    </folder>
    <folder tag="Online Display">
      <variable tag="sync" scope="global" logging="when_changed" default_value="0" type="integer"/>
    </folder>
    <folder tag="Hardware variables">
      <variable tag="FIO1" full_name="FIO1" default_value="0" scope="GLOBAL" type="INTEGER" editable="never" logging="when_changed"/>
      <variable tag="FIO2" full_name="FIO2" default_value="0" scope="GLOBAL" type="boolean" editable="never" logging="when_changed"/>
      <variable tag="laserTriggerFIO" full_name="laserTriggerFIO" default_value="0" scope="GLOBAL" type="boolean" logging="when_changed" persistant="0"/>
      <variable tag="strobedDigitalWord" full_name="strobedDigitalWord" default_value="0" scope="GLOBAL" type="integer" logging="when_changed" persistant="0"/>
      <variable tag="juice" full_name="juice" scope="GLOBAL" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="sendLaserParams" full_name="sendLaserParams" scope="GLOBAL" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="sendSerialParams" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
    </folder>
    <folder tag="Internal Variables">
      <variable tag="tTrialStartMWTimestampMs" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      <variable tag="tTotalReqHoldTimeMs" scope="global" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="tTotalRewardTimeUs" scope="global" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="tFakeMouseReactMs" scope="global" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="tFakeMousePressMs" scope="global" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="tStartTrialWaitForPressTimeMs" scope="global" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="consecCorrects" scope="global" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="tConsecErrors" scope="global" logging="when_changed" default_value="0" persistent="0" type="integer"/>
      <variable tag="tConsecTimeoutStartTime" scope="global" logging="when_changed" default_value="0" persistent="0" type="integer"/>
      <variable tag="tNRewards" scope="global" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="tInterRewardIntervalMs" scope="global" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="tRewardAddPerMsHoldUs" scope="global" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="tStimTurnedOn" scope="global" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="tItiWaitTimeMs" scope="global" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="tThisTrialStartTimeMs" scope="global" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="tLastTrialStartTimeMs" scope="global" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="lastActualHoldTimeMs" scope="global" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="tempMs" scope="global" logging="when_changed" default_value="0" type="integer"/>
      <variable tag="tTempStimOdds" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
    </folder>
  </variables>
  <sounds tag="Sounds">
    <sound tag="louderPressSound" type="wav_file" path="wavs/louderFlatterPress.wav" amplitude="1"></sound>
    <sound tag="incorrectSound" type="wav_file" path="wavs/incorrectMouse.wav"></sound>
    <sound tag="rewardSound" type="wav_file" path="wavs/shortCorrect.wav"></sound>
    <sound tag="delaySound" type="wav_file" path="wavs/8000Hz_.3s.wav"></sound>
  </sounds>
  <stimuli tag="Stimuli">
    <stimulus type="blank_screen" tag="background" color="0.5,0.5,0.5"></stimulus>
  </stimuli>    
  <experiment tag="Experiment" full_name="">
    <protocol tag="JuiceOnHoldProtocol" full_name="" selection="sequential" nsamples="1" sampling_method="cycles" description="" interruptible="YES">

      <!-- init actions before running trials after any press of start-->
      <action type="queue_stimulus" stimulus="background"></action>
      <action type="update_stimulus_display" tag="-"></action>
      <action type="assignment" tag="consecCorrects = 0" variable="consecCorrects" value="0"></action>
      <action type="assignment" variable="tConsecErrors" value="0"></action>
      <action type="assignment" tag="juice = 0" variable="juice" value="0"></action>

      <!-- init actions run only on first trial after loading experiment -->
      <action type="if" condition="success+ignore+failure == 0">
        <action type="report" message="**** First trial since experiment load - initializing"></action>
        <action type="assignment" variable="tLastTrialStartTimeMs" value="-1"></action>
        <action type="assignment" variable="tThisTrialStartTimeMs" value="-1"></action>
        <action type="assignment" variable="lastActualHoldTimeMs" value="0"></action>
      </action>

      <trial tag="Trial 01" nsamples="10000" sampling_method="cycles" selection="sequential">
        <task_system tag="TS" full_name="TS" interruptable="YES" description="" interruptible="YES" 
                     _error="Task Systems must contain >=1 transition that yields to parent">
          <task_system_state tag="Intertrial" interruptible="YES">
            <action_marker _unmoveable="1" tag="Actions"></action_marker>
            
            <action tag="Start IO Device" type="start_device_IO" device="LabJackU6"></action>

            <action type="assignment" variable="tTrialStartMWTimestampMs" value="now()/1000"></action>  <!-- integer valued ms timestamp -->

            <action type="assignment" tag="Encode START" variable="strobedDigitalWord" value="170"></action>
            <action type="assignment" tag="Encode START" variable="strobedDigitalWord" value="170"></action>
            <action type="assignment" tag="Encode START" variable="strobedDigitalWord" value="170"></action>

            <!--Transmit the trial timestamp so strobed code sequences are unique -->
            <action type="assert" condition="tTrialStartMWTimestampMs &lt;= 2147483648" 
                    message="tTrialStartMWTimestampMs is too large - should happen only after several days of running!?"
                    stop_on_failure="1"/>  
            <!-- prevent overflow outside 2**31ms ~ 10 days - I don't know how to get unsigned casts in the XML -->
            <!-- encode trialStartTimestamp in bytes: 4 bytes: millions of seconds, 1000s, s, ms -->
            <action type="assignment" tag="Encode TimestampStart" variable="strobedDigitalWord" value="200"/>
            <action type="assignment" variable="strobedDigitalWord" value="tTrialStartMWTimestampMs/1000/1000000"/>  <!-- mega s -->
            <action type="assignment" variable="strobedDigitalWord" value="(tTrialStartMWTimestampMs- (tTrialStartMWTimestampMs/1000000000)*1000000000) /1000000"/> <!-- mega to kilo s -->
            <action type="assignment" variable="strobedDigitalWord" value="(tTrialStartMWTimestampMs- (tTrialStartMWTimestampMs/1000000)*1000000) /1000"/> <!-- 0-999s -->
            <action type="assignment" variable="strobedDigitalWord" value="(tTrialStartMWTimestampMs - (tTrialStartMWTimestampMs/1000)*1000)"/>  <!-- ms -->
            <action type="assignment" tag="Encode TimestampEnd" variable="strobedDigitalWord" value="201"/>

            <action type="assignment" tag="Sync Matlab" variable="sync" value="1"></action>
            <action type="assignment" tag="Set trialStart" variable="trialStart" value="1"></action>
            <action type="assignment" tag="juice = 0" variable="juice" value="0"></action>
            <action type="assignment" tag="leverResult = 0" variable="leverResult" value="0"></action>
            <action type="assignment" variable="lastActualHoldTimeMs" value="actualHoldTimeMs"></action>
            <action type="assignment" variable="experimentXmlTrialId" value="8"></action>
            <action type="assignment" variable="tStimTurnedOn" value="0"></action>

            <!-- Assign the variable for this trial's hold time -->
            <action type="assignment" variable="tTotalReqHoldTimeMs" value="fixedReqHoldTimeMs"></action>

               <!-- initialize trial start/end times -->
            <action type="if" condition="tThisTrialStartTimeMs == -1">  
              <!--first trial, leave lasttime as -1 -->
              <action type="assignment" variable="tLastTrialStartTimeMs" value="-1"></action>
            </action>
            <action type="if" condition="tThisTrialStartTimeMs != -1">  <!--else-->
              <!--later trials, copy this into last before setting this again below -->
              <action type="assignment" variable="tLastTrialStartTimeMs" value="tThisTrialStartTimeMs"></action>
            </action>
            <action type="assignment" variable="tThisTrialStartTimeMs" value="now()/1000"></action>


            <!-- compute ITI time -->
            <!-- initialize with a const value -->
            <action type="assignment" 
                    variable="tItiWaitTimeMs" 
                    value="itiTimeMs"></action>
            <!-- add random -->
            <action type="if" condition="itiExtraRandTimeMs > 0">
              <action type="assignment" variable="tItiWaitTimeMs" value="tItiWaitTimeMs + rand(0, itiExtraRandTimeMs)"/>
            </action>
            <!-- extend based on previous hold and max stim time, if asked for -->
            <action type="if" condition="doExtendItiOnShortPrevTrial == 1"> 
              <action type="assignment" variable="tempMs"  
                      value="fixedReqHoldTimeMs-lastActualHoldTimeMs"></action> 
              <action type="if" condition="tempMs > 0">
                <!--add to ITI-->
                <action type="assignment" tag="-"
                        variable="tItiWaitTimeMs" value="tItiWaitTimeMs+tempMs"></action>
              </action>
            </action>

            <action type="start_timer" tag="Start interTrialTimer" timer="interTrialTimer" 
                    timebase="" duration="tItiWaitTimeMs" duration_units="ms"></action>
            <action type="assignment" tag="Clear stimulusOn" variable="stimulusOn" value="0"></action>
            <action type="assignment" tag="Encode ItiStart" variable="strobedDigitalWord" value="6"></action>
            <action type="if" condition="doLeverSolenoidAllTrials">
              <!-- Turn on solenoid for ITI only if doLS is true, not if doLSErrorsOnly -->
              <action type="assignment" tag="lever Solenoid on" variable="FIO2" value="1"></action>
              <action type="assignment" tag="Encode LeverSolenoidOn" variable="strobedDigitalWord" value="12"></action>
            </action>
            <action type="if" condition="!doLeverSolenoidAllTrials">
              <action type="assignment" variable="FIO2" value="0"></action>
              <action type="assignment" tag="Encode LeverSolenoidOff" variable="strobedDigitalWord" value="13"></action>
            </action>
            <action type="report" message="In ITI, waiting for $tItiWaitTimeMs ms, then waiting for press"></action>


            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="timer_expired" tag="If Expired, Go To StartTrial" target="StartTrial" timer="interTrialTimer"></transition>
          </task_system_state>

          <task_system_state tag="StartTrial" full_name="" description="" interruptible="YES">
            <action type="if" tag="if doLeverSolenoid/ErrorsOnly" condition="doLeverSolenoidAllTrials || doLeverSolenoidOnMiss || doLeverSolenoidOnEarly">
              <!-- Lower solenoid at beginning of trial for any solenoid -->
              <action type="assignment" tag="lever Solenoid off" variable="FIO2" value="0"></action>
              <action type="assignment" tag="Encode LeverSolenoidOff" variable="strobedDigitalWord" value="13"></action>
            </action>
              
            <action type="assignment" variable="tStartTrialWaitForPressTimeMs" value="now()/1000.0"></action>

            <action type="assignment" tag="Encode StartTrialWaitForPress" variable="strobedDigitalWord" value="7"></action>

            <!-- fake mouse calculations -->
            <action type="if" tag="if fakeMouse" condition="!doLever">
              <action type="assignment" variable="tFakeMousePressMs" value="rand(0, fakeMouseMaxPressMs)"></action>
            </action>

            <transition type="conditional" tag="If Lever Down, Go To Hold Lever" condition="doLever &amp;&amp; FIO1 == 1" target="HoldLever"></transition>
            <transition type="conditional" tag="If fakeMouse elapsed, go to HoldLever" 
                        condition="!doLever &amp;&amp; ( (now()/1000.0)-tStartTrialWaitForPressTimeMs) > tFakeMousePressMs" target="HoldLever"></transition>
            <transition type="conditional" tag="If waiting here too long (120s), go to HoldLever" 
                        condition="doLever &amp;&amp; ( (now()/1000.0)-tStartTrialWaitForPressTimeMs) > 120*1000" target="HoldLever"></transition>
          </task_system_state>
            
          <task_system_state tag="HoldLever" interruptible="YES">
            <action_marker _unmoveable="1" tag="Actions"></action_marker>              
            <action type="start_timer" tag="Hold Time Before Timing Trial Timer" timer="reqHoldTimeTimerMs" timebase="" duration="tTotalReqHoldTimeMs" duration_units="ms"></action>
              
              
            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
              <transition type="conditional" tag="If release lever with cycle variable off, go to Early Release"
                        condition="doCycleBeforeReqHold==0 &amp;&amp; doLever==1 &amp;&amp; FIO1==0" target="EarlyRelease"></transition>
                 <transition type="conditional" tag="If release lever, cycle to Trial Start"
                  condition="doCycleBeforeReqHold==1 &amp;&amp; doLever==1 &amp;&amp; FIO1==0" target="StartTrial"></transition>
              <transition type="timer_expired" tag="If holdTimer expired, send to start timing" target="Delay" timer="reqHoldTimeTimerMs"></transition>
          </task_system_state>
            
          <task_system_state tag="Delay" interruptible="YES">
            <action_marker _unmoveable="1" tag="Actions"></action_marker>
            <action type="play_sound" sound="delaySound"></action>
            <action type="assignment" tag="leverResult = 1" variable="leverResult" value="1"></action>
            <action type="assignment" tag="set pressTimestampMs" variable="pressTimestampMs" value="now()/1000"></action>
            <action type="assignment" tag="Encode LeverPressStart" variable="strobedDigitalWord" value="3"></action>

            <!-- If fakeMouse, then time transitions based on variables variables -->
            <action type="if" tag="if fakeMouse" condition="!doLever">
              <action type="assignment" tag="Assign tFakeMouseReactMs" variable="tFakeMouseReactMs" value="rand(0, fakeMouseMaxReactMs)"></action>
              <action type="start_timer" tag="Start Fake Mouse Timer" timer="fakeMouseTimer" timebase="" duration="tFakeMouseReactMs" duration_units="ms"></action>
              <action tag="Report FakeMouseTimer" full_name="Report Press" type="report" message="fake mouse to react in $tFakeMouseReactMs ms"></action>
            </action>
              
            <!-- If not fakeMouse, then start trial on lever press -->
            <action type="if" tag="if ! fakeMouse" condition="doLever">
              <action type="start_timer" tag="Start fakeMouseTimer infinite" timer="fakeMouseTimer" timebase="" duration="100000" duration_units="ms"></action>
            </action>
            <action type="start_timer" tag="Start Delay Timer" timer="delayTimerMs" timebase="" duration="delayMs" duration_units="ms"></action>
            <action tag="Report Delay Start" full_name="ReportDigital" type="report" message="Delay Started (need to hold for $delayMs)"></action>
              
            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="conditional" tag="If Lever Up, Go To EarlyRelease" condition="FIO1 == 0 &amp;&amp; doLever == 1" target="EarlyRelease"></transition>
            <transition type="timer_expired" tag="If fakeMouseTimer expired, go to EarlyRelease" target="EarlyRelease" timer="fakeMouseTimer"></transition>
            <transition type="timer_expired" tag="If delayTimer Expired, Go To StartReactTimer" target="StartReactTimer" timer="delayTimerMs"></transition>
          </task_system_state>

          <task_system_state tag="StartReactTimer" interruptible="YES">
            <action_marker _unmoveable="1" tag="Actions"></action_marker>
            
            <action type="start_timer" tag="Start React Timer" timer="reactTimeTimer" timebase="" duration="reactTimeMs" duration_units="ms"></action>

            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="direct" tag="Go WaitForAction" target="WaitForAction"></transition>
          </task_system_state>

          <task_system_state tag="WaitForAction" interruptible="YES">
            <action_marker _unmoveable="1" tag="Actions"></action_marker>
         

            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="conditional" tag="If Lever Up, Go To Reward" condition="FIO1 == 0 &amp;&amp; doLever == 1" target="Reward"></transition>
            <transition type="timer_expired" tag="If fakeMouse expired, Transition to Reward" target="Reward" timer="fakeMouseTimer"></transition>
            <transition type="timer_expired" tag="If React Time Expired, Go To Missed" target="Missed" timer="reactTimeTimer"></transition>
            <transition type="direct" target="WaitForAction"></transition> <!-- spin on this state to turn off stim if necessary -->
          </task_system_state>

          <task_system_state tag="EarlyRelease" interruptible="YES">
            <action_marker _unmoveable="1" tag="Actions"></action_marker>
            <action type="assignment" tag="leverResult = 0" variable="leverResult" value="0"></action>
            <action type="assignment" tag="Encode LeverReleaseEarly" variable="strobedDigitalWord" value="8"></action>
            <action type="assignment" variable="actualHoldTimeMs" value=" (now()/1000) - pressTimestampMs"></action>
            <action type="report" tag="Report" message="actualHoldTimeMs = $actualHoldTimeMs"></action>
            <action tag="ReportEarlyRelease" full_name="ReportDigital" type="report" message="** Early Release (FIO1 = $FIO1 )"></action>
              
            <!-- update running variables -->
            <action type="assignment" tag="failure++" variable="failure" value="failure+1"></action>
            <action type="assignment" tag="consecCorrects = 0" variable="consecCorrects" value="0"></action>
            <action type="assignment" variable="tConsecErrors" value="tConsecErrors+1"></action>
            
            <action tag="Play incorrectSound" type="play_sound" sound="incorrectSound"></action>

            <action type="if" tag="if doLeverSolenoid/Early" condition="doLeverSolenoidAllTrials || doLeverSolenoidOnEarly">
              <action type="assignment" tag="lever Solenoid on" variable="FIO2" value="1"></action>
              <action type="assignment" tag="Encode LeverSolenoidOn" variable="strobedDigitalWord" value="12"></action>
            </action>

            <action type="start_timer" tag="Start earlyTimeoutTimer" timer="earlyTimeoutTimer" timebase="" duration="earlyTimeoutMs" duration_units="ms"></action>
            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="timer_expired" target="PossibleEndTimeout" timer="earlyTimeoutTimer"></transition>
          </task_system_state>

          <task_system_state tag="Reward" interruptible="YES">
            <action_marker _unmoveable="1" tag="Actions"></action_marker>
            <action type="assignment" tag="leverResult = 0" variable="leverResult" value="0"></action>

            <action type="assignment" tag="Encode LeverReleaseCorrect" variable="strobedDigitalWord" value="9"></action>


            <action type="assignment" variable="actualHoldTimeMs" value=" (now()/1000) - pressTimestampMs"></action>
            <action type="report" tag="Report" message="actualHoldTimeMs = $actualHoldTimeMs"></action>
            <action tag="Report Reward" full_name="ReportDigital" type="report" message="** Success"></action>
            <!-- update running variables -->
            <action type="assignment" tag="success++" variable="success" value="success+1"></action>
            <action type="assignment" variable="tConsecErrors" value="0"></action>


            <!-- scale based on consec corrects -->
            <action type="if" tag="if consecCorrects &lt; max" condition="consecCorrects &lt; maxConsecCorrects">
              <action type="assignment" tag="consecCorrects++" variable="consecCorrects" value="consecCorrects+1"></action>
            </action>
            <action type="assignment" tag="set tNRewards" variable="tNRewards" value="consecCorrects"></action>


            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="direct" tag="Always Go to GiveReward" target="GiveReward"></transition>
          </task_system_state>

          <task_system_state tag="GiveReward" interruptible="YES">
            <action_marker _unmoveable="1" tag="Actions"></action_marker>
            <action type="assignment" tag="tNRewards--" variable="tNRewards" value="tNRewards-1"></action>
            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="conditional" tag="if rewards remain, go to SingleReward (note must be -1)" condition="tNRewards > -1" target="SingleReward"></transition>
            <transition type="direct" tag="Always Go to PRP" target="PostRewardPause"></transition>
          </task_system_state>

          <task_system_state tag="PostRewardPause" interruptible="YES">
            <action type="start_timer" tag="StartTimer" timer="postRewardTimer" timebase="" duration="postRewardMs" duration_units="ms"></action> 
            <action_marker _unmoveable="1" tag="Actions"></action_marker>
            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="timer_expired" target="PossibleEndTimeout" timer="postRewardTimer"></transition>
          </task_system_state>

          <task_system_state tag="SingleReward" interruptible="YES">
            <action_marker _unmoveable="1" tag="Actions"></action_marker>
            <action type="assignment" tag="interRewardInterval minimum to juiceTime" variable="tInterRewardIntervalMs" value="interRewardIntervalMs + ( tTotalRewardTimeUs / 1000 )"></action>
            <action type="start_timer" tag="Start interRewardIntervalTimer" timer="interRewardIntervalTimer" timebase="" duration="tInterRewardIntervalMs" duration_units="ms"></action>
            <action type="assignment" tag="Start reward" variable="juice" value="tTotalRewardTimeUs"></action>

            <action type="assignment" tag="Encode Reward" variable="strobedDigitalWord" value="10"></action>
            <action type="report" tag="Report" message="juice = $juice"></action>
            <action tag="Play reward sound" type="play_sound" sound="rewardSound"></action>
            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="timer_expired" tag="If interRewardIntervalTimer expired, go to GiveReward" target="GiveReward" timer="interRewardIntervalTimer"></transition>
          </task_system_state>

          <task_system_state tag="Missed" interruptible="YES">
            <action_marker _unmoveable="1" tag="Actions"></action_marker>
            <action type="assignment" tag="leverResult = 0" variable="leverResult" value="0"></action>
            <action type="assignment" tag="Encode LeverNoReleaseMiss" variable="strobedDigitalWord" value="11"></action>
            <action type="assignment" variable="actualHoldTimeMs" value=" (now()/1000) - pressTimestampMs"></action>
            <action type="report" tag="Report" message="actualHoldTimeMs = $actualHoldTimeMs"></action>
            <action type="assignment" tag="ignore++" variable="ignore" value="ignore + 1"></action>
            <action type="assignment" tag="consecCorrects = 0" variable="consecCorrects" value="0"></action>
            <action type="assignment" variable="tConsecErrors" value="tConsecErrors+1"></action>
            <action tag="Report 4" full_name="ReportDigital" type="report" message="** Ignored react stimulus"></action>
            <action tag="Play incorrectSound 2" type="play_sound" sound="incorrectSound"></action>

            <action type="start_timer" tag="start timer" timer="missedTimeoutTimer" timebase="" duration="missedTimeoutMs" duration_units="ms"></action>
            <action type="if" tag="if doLeverSolenoid/ErrorsOnly" condition="doLeverSolenoidAllTrials || doLeverSolenoidOnMiss">
              <action type="assignment" tag="lever Solenoid on" variable="FIO2" value="1"></action>
              <action type="assignment" tag="Encode LeverSolenoidOn" variable="strobedDigitalWord" value="12"></action>
            </action>

            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="timer_expired" target="PossibleEndTimeout" timer="missedTimeoutTimer"></transition>
          </task_system_state>


          <task_system_state tag="PossibleEndTimeout" interruptible="YES">    
            <!-- do timeout if too many recent errors:
                 use a state rather than a wait action because states are interruptible -->
            <action type="if" condition="tConsecErrors >= nConsecErrorsCauseTimeout">
              <action type="report" message="***!!*** $consecErrorTimeoutS s timeout after $tConsecErrors consecutive errors"></action>
              <action type="start_timer" timer="consecErrorTimer" timebase="" duration="consecErrorTimeoutS" duration_units="s"></action>
            </action>

            <transition type="conditional" tag="- bypass timer checking if no timeout requested" 
                        condition="tConsecErrors &lt; nConsecErrorsCauseTimeout" target="EndTrial"></transition>
            <transition type="timer_expired" target="EndTrial" timer="consecErrorTimer"></transition>
          </task_system_state>

          
          <task_system_state tag="EndTrial" interruptible="YES">
            <action_marker _unmoveable="1" tag="Actions"></action_marker>

            <action type="assignment" variable="laserTriggerFIO" value="0"></action> <!-- disable trigger no matter if it went high or not -->

            <action tag="Stop IO Device" type="stop_device_IO" device="LabJackU6"></action>
            <action type="assignment" tag="End Matlab Sync" variable="sync" value="0"></action>
            
            <!-- allow two trials after each timeout is over -->
            <action type="if" condition="tConsecErrors == nConsecErrorsCauseTimeout">
              <action type="assignment" variable="tConsecErrors" value="nConsecErrorsCauseTimeout-2"/>  
            </action>

            <action type="assignment" tag="Encode END" variable="strobedDigitalWord" value="85"></action>
            <action type="assignment" tag="Encode END" variable="strobedDigitalWord" value="85"></action>
            <action type="assignment" tag="Encode END" variable="strobedDigitalWord" value="85"></action>

            <!-- trigger serial param dump to cyberkinetics -->
            <action type="assignment" tag="Send serial params" variable="sendSerialParams" value="1"></action>
            <action type="assignment" tag="Send serial params" variable="sendSerialParams" value="0"></action>

            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="yield" tag="return to parent task system"></transition>
          </task_system_state>

        </task_system>
      </trial>
    </protocol>
  </experiment>
</monkeyml>

