<?xml version="1.0"?>
<monkeyml version="1.0">
  <io_devices tag="IO Devices">
    <iodevice tag="LabJackU6" priority="" type="LabJackU6" 
      pulse_duration="juice" pulse_on="juice" 
      lever1="FIO1" 
      lever1_solenoid="MIO0"
      counter2="counter2"
      trial_laser_powerMw="tTrialLaserPowerMw"
      laser_trigger="laserTrigger"
      optic_device="optic_device"
      strobed_digital_word="strobedDigitalWord"
      counter="counter"
      do2led="do2led" led_seq="led_seq" LED_duration="LED_durationMS" led1_status="led1_status" led2_status="led2_status"/>
      <iodevice tag="FakeMonkey" priority="" type="fake_monkey" id="" alt="" spike_rate="10"/>
      <iodevice type="serverside_conduit" tag="Server-side Event Conduit" resource_name="server_conduit"/>
    </io_devices>
    <variables tag="Variables">
      <folder tag="Behavioral Control">
        <variable tag="subjectNum" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="ExptStruct"/>
        <variable tag="experimentXmlTrialId" scope="global" logging="when_changed" default_value="90" type="integer" persistant="1"/> <!-- n.b. it is forcibly set each trial below -->
        <variable tag="optic_device" scope="global" logging="when_changed" default_value="led" type="string"></variable>
      </folder>
      <folder tag="Stimuli">
        <variable tag="stopAfterNTrials" scope="local" logging="when_changed" default_value="90" type="integer" persistant="1" groups="ExptStruct"/>      
        <variable tag="nScansOn" scope="global" logging="when_changed" default_value="200" type="integer" persistant="1" groups="ExptStruct"/>
        <variable tag="nScansOff" scope="global" logging="when_changed" default_value="200" type="integer" persistant="1" groups="ExptStruct"/>
        <variable tag="doMatrix" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="ExptStruct"/> 
        <variable tag="doRand" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="ExptStruct"/>
        <variable tag="doLEDStim" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="ExptStruct"/>    
        <variable tag="backgroundLuminance" scope="global" logging="when_changed" default_value="0.5" type="float" persistant="1" groups="Background"/> 
        <variable tag="doBackgroundStim" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="ExptStruct"/>
        <variable tag="backgroundLuminanceStepLog" scope="global" logging="when_changed" default_value="2" type="float" persistant="1" groups="Background"/>
        <variable tag="backgroundLuminanceStepDir" scope="global" logging="when_changed" default_value="1" type="float" persistant="1" groups="Background"/>
        <variable tag="backgroundLuminanceStepN" scope="global" logging="when_changed" default_value="6" type="float" persistant="1" groups="Background"/>     

        <variable tag="nTotalImagingFrames" scope="global" logging="when_changed" default_value="3600" type="integer" persistant="1" groups="ImagingVars"/>
        <variable tag="frameImagingRateMs" scope="global" logging="when_changed" default_value="500" type="float" persistant="1" groups="ImagingVars"/>
        <variable tag="frameImagingExposureMs" scope="global" logging="when_changed" default_value="450" type="integer" persistant="1" groups="ImagingVars"/>	 
        <variable tag="frameImagingBinning" scope="global" logging="when_changed" default_value="4" type="integer" persistant="1" groups="ImagingVars"/>

        <variable tag="doRetStim" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="GratingExptStruct"/>
        <variable tag="doConStim" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="GratingExptStruct"/>
        <variable tag="doDirStim" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="GratingExptStruct"/>
        <variable tag="doSFStim" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="GratingExptStruct"/>
        <variable tag="doTFStim" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="GratingExptStruct"/>      
        <variable tag="doSizeStim" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="GratingExptStruct"/>
        <variable tag="doAnnulusStim" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="GratingExptStruct"/>
        <variable tag="doAnnulusSizeStim" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="GratingExptStruct"/>
        <variable tag="doPhaseStim" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="GratingExptStruct"/>
        <variable tag="doLoomStim" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="GratingExptStruct"/>
        <variable tag="doGaussianMask" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="GratingExptStruct"/>
        <variable tag="doEllipseMask" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="GratingExptStruct"/>

        <variable tag="doMovingDots" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="DotsExptStruct"/> 
        <variable tag="doDotsSpeedStim" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="DotsExptStruct"/> 
        <variable tag="doDotsSizeStim" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="DotsExptStruct"/>
        <variable tag="doDotsCoherenceStim" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="DotsExptStruct"/>
        <variable tag="doDotsDirectionStim" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="DotsExptStruct"/>
        <variable tag="doDotsContrastStim" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="DotsExptStruct"/>
        <variable tag="doDotsDensityStim" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="DotsExptStruct"/> 
        <variable tag="doRunFeedback" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="DotsExptStruct"/>
        <variable tag="runFeedbackGain" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="DotsExptStruct"/> 

        

        <variable tag="baseGratingContrast" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="GratingSpecs"/>
        <variable tag="baseGratingDirectionDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="GratingSpecs"/>
        <variable tag="baseGratingStartingPhaseDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="GratingSpecs"/>

        <variable tag="target_mask" scope="global" logging="when_changed" default_value="none" type="string" persistant="1" groups="GratingSpecs"/>

        <variable tag="gratingElevationDeg" scope="global" logging="when_changed" default_value="20" type="float" persistant="1" groups="GratingSpecs"/>
        <variable tag="gratingElevationStepDeg" scope="global" logging="when_changed" default_value="-20" type="float" persistant="1" groups="GratingSpecs"/>
        <variable tag="gratingElevationStepN" scope="global" logging="when_changed" default_value="3" type="float" persistant="1" groups="GratingSpecs"/>
        <variable tag="gratingAzimuthDeg" scope="global" logging="when_changed" default_value="-30" type="float" persistant="1" groups="GratingSpecs"/>
        <variable tag="gratingAzimuthStepDeg" scope="global" logging="when_changed" default_value="30" type="float" persistant="1" groups="GratingSpecs"/>
        <variable tag="gratingAzimuthStepN" scope="global" logging="when_changed" default_value="3" type="float" persistant="1" groups="GratingSpecs"/>

        <variable tag="gratingContrast" scope="global" logging="when_changed" default_value="1" type="float" persistant="1" groups="GratingSpecs"/>
        <variable tag="gratingContrastStepLog" scope="global" logging="when_changed" default_value="2" type="float" persistant="1" groups="GratingSpecs"/>
        <variable tag="gratingContrastStepDir" scope="global" logging="when_changed" default_value="1" type="float" persistant="1" groups="GratingSpecs"/>
        <variable tag="gratingContrastStepN" scope="global" logging="when_changed" default_value="6" type="float" persistant="1" groups="GratingSpecs"/>

        <variable tag="gratingDirectionDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="GratingSpecs"/>
        <variable tag="gratingDirectionStepDeg" scope="global" logging="when_changed" default_value="30" type="float" persistant="1" groups="GratingSpecs"/>
        <variable tag="gratingDirectionStepN" scope="global" logging="when_changed" default_value="12" type="float" persistant="1" groups="GratingSpecs"/>

        <variable tag="gratingSpatialFreqCPD" scope="global" logging="when_changed" default_value="0.02" type="float" persistant="1" groups="GratingSpecs"/>
        <variable tag="gratingSpatialFreqStepLog" scope="global" logging="when_changed" default_value="2" type="float" persistant="1" groups="GratingSpecs"/>
        <variable tag="gratingSpatialFreqStepDir" scope="global" logging="when_changed" default_value="1" type="float" persistant="1" groups="GratingSpecs"/>
        <variable tag="gratingSpatialFreqStepN" scope="global" logging="when_changed" default_value="6" type="float" persistant="1" groups="GratingSpecs"/>

        <variable tag="gratingTemporalFreqCPS" scope="global" logging="when_changed" default_value="1" type="float" persistant="1" groups="GratingSpecs"/>
        <variable tag="gratingTemporalFreqStepLog" scope="global" logging="when_changed" default_value="2" type="float" persistant="1" groups="GratingSpecs"/>
        <variable tag="gratingTemporalFreqStepDir" scope="global" logging="when_changed" default_value="1" type="float" persistant="1" groups="GratingSpecs"/>
        <variable tag="gratingTemporalFreqStepN" scope="global" logging="when_changed" default_value="6" type="float" persistant="1" groups="GratingSpecs"/>

        <variable tag="gratingDiameterDeg" scope="global" logging="when_changed" default_value="40" type="float" persistant="1" groups="GratingSpecs"/>
        <variable tag="gratingDiameterStepDeg" scope="global" logging="when_changed" default_value="-5" type="float" persistant="1" groups="GratingSpecs"/>
        <variable tag="gratingDiameterStepN" scope="global" logging="when_changed" default_value="6" type="float" persistant="1" groups="GratingSpecs"/>

        <variable tag="gratingStartingPhaseDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="GratingSpecs"/>
        <variable tag="gratingStartingPhaseStepDeg" scope="global" logging="when_changed" default_value="45" type="float" persistant="1" groups="GratingSpecs"/>
        <variable tag="gratingStartingPhaseStepN" scope="global" logging="when_changed" default_value="8" type="float" persistant="1" groups="GratingSpecs"/>

        <variable tag="greymaskDiameterDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="GratingSpecs"/>

        <variable tag="AnnulusgratingDiameterStepN" scope="global" logging="when_changed" default_value="1" type="float" persistant="1" groups="GratingSpecs"/>
        <variable tag="AnnulusgratingDiameterMinN" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="GratingSpecs"/>
        <variable tag="AnnulusgratingDiameterMaxN" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="GratingSpecs"/>

        <variable tag="loomSpeedDPS" scope="global" logging="when_changed" default_value="5" type="float" persistant="1" groups="GratingSpecs"/>
        <variable tag="maxLoomDiameterDeg" scope="global" logging="when_changed" default_value="5" type="float" persistant="1" groups="GratingSpecs"/>
        <variable tag="loomSpeedStepLog" scope="global" logging="when_changed" default_value="2" type="float" persistant="1" groups="GratingSpecs"/>
        <variable tag="loomSpeedStepDir" scope="global" logging="when_changed" default_value="1" type="float" persistant="1" groups="GratingSpecs"/>
        <variable tag="loomSpeedStepN" scope="global" logging="when_changed" default_value="5" type="float" persistant="1" groups="GratingSpecs"/>

        <variable tag="LEDPowerMw" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="LEDSpecs"/>
        <variable tag="LEDPowerStepMw" scope="global" logging="when_changed" default_value="0.01" type="float" persistant="1" groups="LEDSpecs"/>
        <variable tag="LEDPowerStepN" scope="global" logging="when_changed" default_value="2" type="float" persistant="1" groups="LEDSpecs"/>
        <variable tag="LaserPowerMw" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="LaserSpecs"/>

        <variable tag="baseDotContrast" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="DotSpecs"/>
        <variable tag="baseDotSpeedDPS" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="DotSpecs"/>
        <variable tag="baseDotDirectionDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="DotSpecs"/>
        <variable tag="baseDotCoherence" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="DotSpecs"/>
        <variable tag="baseDotSizeDeg" scope="global" logging="when_changed" default_value=".5" type="float" persistant="1" groups="DotSpecs"/>
        <variable tag="baseDotDensity" scope="global" logging="when_changed" default_value=".5" type="float" persistant="1" groups="DotSpecs"/>

        <variable tag="dotElevationDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="DotSpecs"/>
        <variable tag="dotAzimuthDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="DotSpecs"/>
        <variable tag="dotFieldSizeDeg" scope="global" logging="when_changed" default_value="30" type="float" persistant="1" groups="DotSpecs"/>

        <variable tag="dotDensity" scope="global" logging="when_changed" default_value="1" type="float" persistant="1" groups="DotSpecs"/>
        <variable tag="dotDensityStep" scope="global" logging="when_changed" default_value="30" type="float" persistant="1" groups="DotSpecs"/>
        <variable tag="dotDensityStepN" scope="global" logging="when_changed" default_value="12" type="float" persistant="1" groups="DotSpecs"/>

        <variable tag="dotContrast" scope="global" logging="when_changed" default_value="1" type="float" persistant="1" groups="DotSpecs"/>
        <variable tag="dotContrastStepLog" scope="global" logging="when_changed" default_value="2" type="float" persistant="1" groups="DotSpecs"/>
        <variable tag="dotContrastStepDir" scope="global" logging="when_changed" default_value="-1" type="float" persistant="1" groups="DotSpecs"/>
        <variable tag="dotContrastStepN" scope="global" logging="when_changed" default_value="5" type="float" persistant="1" groups="DotSpecs"/>

        <variable tag="dotCoherence" scope="global" logging="when_changed" default_value="1" type="float" persistant="1" groups="DotSpecs"/>
        <variable tag="dotCoherenceStepLog" scope="global" logging="when_changed" default_value="2" type="float" persistant="1" groups="DotSpecs"/>
        <variable tag="dotCoherenceStepDir" scope="global" logging="when_changed" default_value="-1" type="float" persistant="1" groups="DotSpecs"/>
        <variable tag="dotCoherenceStepN" scope="global" logging="when_changed" default_value="5" type="float" persistant="1" groups="DotSpecs"/>

        <variable tag="dotDirectionDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="DotSpecs"/>
        <variable tag="dotDirectionStepDeg" scope="global" logging="when_changed" default_value="30" type="float" persistant="1" groups="DotSpecs"/>
        <variable tag="dotDirectionStepN" scope="global" logging="when_changed" default_value="12" type="float" persistant="1" groups="DotSpecs"/>

        <variable tag="dotSizeDeg" scope="global" logging="when_changed" default_value=".5" type="float" persistant="1" groups="DotSpecs"/>
        <variable tag="dotSizeStepDeg" scope="global" logging="when_changed" default_value="2" type="float" persistant="1" groups="DotSpecs"/>
        <variable tag="dotSizeStepN" scope="global" logging="when_changed" default_value="4" type="float" persistant="1" groups="DotSpecs"/>

        <variable tag="dotSpeedDPS" scope="global" logging="when_changed" default_value="5" type="float" persistant="1" groups="DotSpecs"/>
        <variable tag="dotSpeedStepLog" scope="global" logging="when_changed" default_value="2" type="float" persistant="1" groups="DotSpecs"/>
        <variable tag="dotSpeedStepDir" scope="global" logging="when_changed" default_value="1" type="float" persistant="1" groups="DotSpecs"/>
        <variable tag="dotSpeedStepN" scope="global" logging="when_changed" default_value="5" type="float" persistant="1" groups="DotSpecs"/>

        <variable tag="doPhotodiode" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="Photodiode Variables"/>
        <variable tag="photoStimulusContrast" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Photodiode Variables"/>
        <variable tag="photoStimulusAzimuth" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Photodiode Variables"/>
        <variable tag="photoStimulusElevation" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Photodiode Variables"/>
        <variable tag="photoStimulusWidth" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Photodiode Variables"/>
        <variable tag="photoStimulusHeight" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Photodiode Variables"/>
        <variable tag="photoMaskSpatialFreq" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Photodiode Variables"/>
        
        <variable tag="Do2LED" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="Alternating LED"/>
        <variable tag="LED_sequence" scope="global" logging="when_changed" default_value="1,1,1,2" type="list" persistant="1" groups="Alternating LED"/>
        <variable tag="LED_DurationMS" scope="global" logging="when_changed" default_value="33" type="integer" persistant="1" groups="Alternating LED"/>

      </folder>
      <folder tag="Task Status">
        <variable tag="stimulusOn" scope="global" logging="when_changed" default_value="0" type="boolean"/>
        <variable tag="trialStart" scope="global" logging="when_changed" default_value="0" type="boolean"/>
      </folder>
      <folder tag="Online Display">
        <variable tag="sync" scope="global" logging="when_changed" default_value="0" type="integer"/>
      </folder>
      <folder tag="Hardware variables">
        <variable tag="FIO1" full_name="FIO1" default_value="0" scope="GLOBAL" type="INTEGER" editable="never" logging="when_changed" groups="Hardware"/>
        <variable tag="MIO0" full_name="MIO0" default_value="0" scope="GLOBAL" type="boolean" editable="never" logging="when_changed" groups="Hardware"/>
        <variable tag="laserTrigger" full_name="laserTrigger" default_value="0" scope="GLOBAL" type="boolean" logging="when_changed" groups="Hardware"/>
        <variable tag="strobedDigitalWord" full_name="strobedDigitalWord" default_value="0" scope="GLOBAL" type="integer" logging="when_changed" persistant="0"/>
        <variable tag="juice" full_name="juice" scope="GLOBAL" logging="when_changed" default_value="0" type="integer" groups="Hardware"/>
        <variable tag="counter" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0" groups="SpeedCounters"></variable>
        <variable tag="counter2" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="SpeedCounters"></variable>
        <variable tag="do2led" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="0"/>
      <variable tag="LED_durationMS" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
      <variable tag="led1_status" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="0"/>
      <variable tag="led2_status" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="0"/>
      <variable tag="led_seq" scope="global" logging="when_changed" default_value="1,1,1,2" type="list" persistant="0"/>
        <variable tag="sendLaserParams" full_name="sendLaserParams" scope="GLOBAL" logging="when_changed" default_value="0" type="integer" persistant="0"/>
        <variable tag="sendSerialParams" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
      </folder>
      <folder tag="Internal Variables">
        <variable tag="tTempStim" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
        <variable tag="tCounter2" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0" groups="SpeedCounters"/>
        <variable tag="ttCounter2" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0" groups="SpeedCounters"/>

        <variable tag="spCounter1" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0" groups="SpeedCounters"/>
        <variable tag="spCounter2" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0" groups="SpeedCounters"/>
        <variable tag="spCounter3" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0" groups="SpeedCounters"/>
        <variable tag="spCounter4" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0" groups="SpeedCounters"/>
        <variable tag="spCounter5" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0" groups="SpeedCounters"/>
        <variable tag="spCounter6" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0" groups="SpeedCounters"/>
        <variable tag="spCounter7" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0" groups="SpeedCounters"/>
        <variable tag="spCounter8" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0" groups="SpeedCounters"/>
        <variable tag="spCounter9" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0" groups="SpeedCounters"/>
        <variable tag="spCounter10" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0" groups="SpeedCounters"/>
        <variable tag="speedTimerIntervalMs" scope="global" logging="when_changed" default_value="500" type="float" persistant="1" groups="ExptStruct"/>
        <variable tag="tITIWheelCounter" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0" groups="SpeedCounters"/>
        <variable tag="tStimWheelCounter" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0" groups="SpeedCounters"/>
        <variable tag="runFeedbackCounter" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0" groups="SpeedCounters"/>

        <variable tag="tTrialsDoneSinceStart" scope="global" logging="when_changed" default_value="90" type="integer" persistant="1"/>
        <variable tag="tTrialStartMWTimestampMs" scope="global" logging="when_changed" default_value="90" type="integer" persistant="1"/>
        <variable tag="tThisTrialStartTimeMs" scope="global" logging="when_changed" default_value="90" type="integer" persistant="1"/>
        <variable tag="tLastTrialStartTimeMs" scope="global" logging="when_changed" default_value="90" type="integer" persistant="1"/>
        
        <variable tag="rrStimulusNumber" scope="local" logging="when_changed" default_value="0" type="integer" persistant="0"/>
        <variable tag="tStimulusNumber" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>

        <variable tag="tBackgroundLuminance" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tBaseGratingDiameterDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tBaseGratingDirectionDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tBaseGratingContrast" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tGratingDirectionDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tGratingContrast" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tGratingElevationDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tGratingAzimuthDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tGratingDiameterDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tAnnulusGratingDiameterDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tGreymaskDiameterDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tGratingSpatialFreqCPD" scope="global" logging="when_changed" default_value="1" type="float" persistant="0"/>
        <variable tag="tGratingTemporalFreqCPS" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tGratingSpeedDPS" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tGratingStartingPhaseDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tGratingLoomSpeedDPS" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tTrialLaserPowerMw" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tTrialLaserPowerMw_trigger" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>

        <variable tag="tDotDirectionDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tDotContrast" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tDotElevationDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tDotAzimuthDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tDotFieldSizeDeg" scope="global" logging="when_changed" default_value="30" type="float" persistant="0"/>
        <variable tag="tDotSizeDeg" scope="global" logging="when_changed" default_value=".1" type="float" persistant="0"/>
        <variable tag="tDotDensity" scope="global" logging="when_changed" default_value="1" type="float" persistant="0"/>
        <variable tag="tDotSpeedDPS" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tDotCoherence" scope="global" logging="when_changed" default_value="1" type="float" persistant="0"/>
        <variable tag="setDotSpeedDPS" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="setDotDirectionDeg" scope="global" logging="when_changed" default_value="90" type="float" persistant="0"/>
        <variable tag="setDotContrast" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="setDotSizeDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="setDotCoherence" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="setDotDensity" scope="global" logging="when_changed" default_value="1" type="float" persistant="0"/>

        <variable tag="targetStimOnMs" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
        
        <variable tag="tNStimAccepted" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
        <variable tag="frameCountN" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>

        <variable type="selection" tag="svRandStimNumber" values="0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89" selection="random_without_replacement" nsamples="90" sampling_method="samples"/>
        <variable type="selection" tag="svSeqStimNumber" values="0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89" selection="sequential_ascending" nsamples="90" sampling_method="samples"/>

      </folder>
    </variables>
    <sounds tag="Sounds">
    </sounds>
    <stimuli tag="Stimuli">
      <stimulus type="blank_screen" tag="background" color="tBackgroundLuminance,tBackgroundLuminance,tBackgroundLuminance"></stimulus>
      <stimulus type="drifting_grating" tag="base_grating"  direction="0" starting_phase="baseGratingStartingPhaseDeg"
        spatial_frequency="tGratingSpatialFreqCPD" 
        speed="tGratingSpeedDPS" 
        grating_type="sinusoid" mask="gaussian" std_dev="0.3" mean="0.1" 
        x_size="tBaseGratingDiameterDeg" y_size="tBaseGratingDiameterDeg" 
        x_position="tGratingAzimuthDeg" y_position="tGratingElevationDeg" 
        rotation="tBaseGratingDirectionDeg" 
        alpha_multiplier="tBaseGratingContrast"></stimulus>
        <stimulus type="circle" tag="inner_mask" color="tBackgroundLuminance,tBackgroundLuminance,tBackgroundLuminance" 
            x_size="tGreymaskDiameterDeg" y_size="tGreymaskDiameterDeg" 
            x_position="tGratingAzimuthDeg" y_position="tGratingElevationDeg" rotation="0" alpha_multiplier="1.0"></stimulus>
        <stimulus type="drifting_grating" tag="target_grating_annulus"  direction="0" starting_phase="tGratingStartingPhaseDeg"
            spatial_frequency="tGratingSpatialFreqCPD" 
            speed="tGratingSpeedDPS" 
            grating_type="sinusoid" mask="ellipse" std_dev="0.3" mean="0.1" 
            x_size="tAnnulusGratingDiameterDeg" y_size="tAnnulusGratingDiameterDeg" 
            x_position="tGratingAzimuthDeg" y_position="tGratingElevationDeg" 
            rotation="tGratingDirectionDeg" 
            alpha_multiplier="tGratingContrast"></stimulus>
        <list_replicator tag="List of Masks" values="gaussian, ellipse" variable="target_mask">
            <stimulus type="drifting_grating" tag="target_grating_$target_mask"  direction="0" starting_phase="tGratingStartingPhaseDeg"
            spatial_frequency="tGratingSpatialFreqCPD" 
            speed="tGratingSpeedDPS" 
            grating_type="sinusoid" mask="$target_mask" std_dev="0.3" mean="0.1" 
            x_size="tGratingDiameterDeg" y_size="tGratingDiameterDeg" 
            x_position="tGratingAzimuthDeg" y_position="tGratingElevationDeg" 
            rotation="tGratingDirectionDeg" 
            alpha_multiplier="tGratingContrast"></stimulus>
        </list_replicator>
          <stimulus type="moving_dots" tag="moving_dots"  direction="setDotDirectionDeg"
            dot_density="setDotDensity" dot_size="setDotSizeDeg" coherence="setDotCoherence" 
            speed="setDotSpeedDPS" field_radius="tDotFieldSizeDeg/2" 
            field_center_x="tDotAzimuthDeg" field_center_y="tDotElevationDeg" 
            alpha_multiplier="setDotContrast"></stimulus>
            <stimulus type="drifting_grating" tag="photoDiodeGrating"  direction="0" starting_phase="0"
              spatial_frequency=".000000000001" 
              speed="0" 
              grating_type="sinusoid" mask="gaussian" std_dev="0.3" mean="0.1" 
              x_size="photoStimulusWidth" y_size="photoStimulusHeight" 
              x_position="photoStimulusAzimuth" y_position="photoStimulusElevation" 
              rotation="0" 
              alpha_multiplier="photoStimulusContrast"></stimulus>
              <stimulus type="drifting_grating" tag="photoDiodeMask"  direction="0" starting_phase="1"
                spatial_frequency="photoMaskSpatialFreq" 
                speed="0" 
                grating_type="sinusoid" mask="gaussian" std_dev="0.3" mean="0.1" 
                x_size="photoStimulusWidth" y_size="photoStimulusHeight" 
                x_position="photoStimulusAzimuth" y_position="photoStimulusElevation" 
                rotation="0" 
                alpha_multiplier="1"></stimulus>                   
              </stimuli>    
              <experiment tag="Experiment" full_name="">
                <protocol tag="JuiceOnHoldProtocol" full_name="" selection="sequential" nsamples="1" sampling_method="cycles" description="" interruptible="YES">
                  <action type="assignment" variable="tBackgroundLuminance" value= "backgroundLuminance"/>
                  <action type="queue_stimulus" stimulus="background"></action>

                  <action tag="Start IO Device" type="start_device_IO" device="LabJackU6"></action>
                  <!-- init actions before running trials after any press of start-->

                  <action type="assignment" variable="tTrialsDoneSinceStart" value="0"></action>
                  <action type="assignment" tag="juice = 0" variable="juice" value="0"></action>
                  <action type="assignment" tag="set counter to 0" variable="counter" value="0"></action>
                  <action type="assignment" tag="set counter2 to 0" variable="counter2" value="0"></action>
                  <action type="assignment" tag="set tCounter2 to 0" variable="tCounter2" value="0"></action>
                  <action type="assignment" tag="set ttCounter2 to 0" variable="ttCounter2" value="0"></action>

                  <action type="assignment" variable="led_seq" value="LED_sequence"/>
                  <action type="assignment" variable="do2led" value="Do2LED"/>
                  <action type="assignment" variable="LED_durationMS" value="LED_DurationMS"></action>

                  <trial tag="Trial" full_name="Trial" description="" interruptible="1" selection="sequential" nsamples="1" sampling_method="cycles">
                    <trial tag="New List" nsamples="9999" sampling_method="samples" selection="random_without_replacement">
                      <!--<range_replicator tag="New Replicator" from="0" to="89" step="1" variable="rrStimulusNumber"> -->
                      <task_system tag="TS" full_name="TS" description="" interruptible="YES" >
                        <task_system_state tag="Inter Stimulus Interval" interruptible="YES">
                          <action_marker _unmoveable="1" tag="Actions"></action_marker>
                          <action type="assignment" tag="set tCounter2 to counter2" variable="tCounter2" value="counter2"></action>

                          <action type="assignment" variable="setDotSpeedDPS" value="baseDotSpeedDPS"></action>
                          <action type="assignment" variable="setDotDirectionDeg" value="baseDotDirectionDeg"></action>
                          <action type="assignment" variable="setDotContrast" value="baseDotContrast"></action>
                          <action type="assignment" variable="setDotCoherence" value="baseDotCoherence"></action>
                          <action type="assignment" variable="setDotSizeDeg" value="baseDotSizeDeg"></action>
                          <action type="assignment" variable="setDotDensity" value="baseDotDensity"></action>

                          <action type="assignment" variable="tDotFieldSizeDeg" value="dotFieldSizeDeg"></action>
                          <action type="assignment" variable="tDotAzimuthDeg" value="dotAzimuthDeg"></action>
                          <action type="assignment" variable="tDotElevationDeg" value="dotElevationDeg"></action>
                          <action type="assignment" variable="tBaseGratingDiameterDeg" value="gratingDiameterDeg"></action>
                          <action type="assignment" variable="tGratingDiameterDeg" value="gratingDiameterDeg"></action>
                          
                          <action type="assignment" variable="tGreymaskDiameterDeg" value="greymaskDiameterDeg"></action>
                          <action type="assignment" variable="tBaseGratingContrast" value="baseGratingContrast"></action>
                          <action type="assignment" variable="tBaseGratingDirectionDeg" value="baseGratingDirectionDeg"></action>


                          <action type="if" condition="doMovingDots != 1">
                           <action tag="Queue Stimulus" type="live_queue_stimulus" stimulus="base_grating"></action>    
                           <action type="play_dynamic_stimulus" stimulus="base_grating" tag="start"></action>
                         </action>
                         <action type="if" condition="doMovingDots == 1">
                           <action tag="Queue Stimulus" type="live_queue_stimulus" stimulus="moving_dots"></action>    
                           <action type="play_dynamic_stimulus" stimulus="moving_dots" tag="start"></action>
                         </action>

                         <action type="if" condition="doPhotodiode">
                          <action tag="Queue Stimulus" type="live_queue_stimulus" stimulus="photoDiodeMask"></action>
                          <action type="play_dynamic_stimulus" stimulus="photoDiodeMask" tag="StimOn"></action> 
                        </action>

                        <action type="update_stimulus_display" tag="-"></action>        
                        <!-- if we have done enough trials, abort this trial - before any encodes/sync are done -->
                        <action type="if" condition="stopAfterNTrials > 0 &amp;&amp; tTrialsDoneSinceStart > stopAfterNTrials">
                          <action type="report" message="** Stopping after completing $stopAfterNTrials trials"></action>
                          <action type="stop_experiment"></action>  
                        </action>


                        <action type="assignment" variable="tTrialStartMWTimestampMs" value="now()/1000"></action>  <!-- integer valued ms timestamp -->

                        <action type="assignment" tag="Encode START" variable="strobedDigitalWord" value="170"></action>
                        <action type="assignment" tag="Encode START" variable="strobedDigitalWord" value="170"></action>
                        <action type="assignment" tag="Encode START" variable="strobedDigitalWord" value="170"></action>

                        <!--Transmit the trial timestamp so strobed code sequences are unique -->
                        <action type="assert" condition="tTrialStartMWTimestampMs &lt;= 2147483648" 
                          message="tTrialStartMWTimestampMs is too large - should happen only after several days of running!?"
                          stop_on_failure="1"/>  
                          <!-- prevent overflow outside 2**31ms ~ 10 days - I don't know how to get unsigned casts in the XML -->
                          <!-- encode trialStartTimestamp in bytes: 4 bytes: millions of seconds, 1000s, s, ms -->
                          <action type="assignment" tag="Encode TimestampStart" variable="strobedDigitalWord" value="200"/>
                          
                          <action type="assignment" tag="Encode TimestampEnd" variable="strobedDigitalWord" value="201"/>

                          <action type="assignment" tag="Sync Matlab" variable="sync" value="1"></action>
                          <action type="assignment" tag="Set trialStart" variable="trialStart" value="1"></action>
                          <action type="assignment" tag="juice = 0" variable="juice" value="0"></action>
                          <action type="assignment" tag="-" variable="laserTrigger" value="0"></action>


                          <!-- choose correct stimulus number based on odds; block2 tr number does not get assigned if ! doBlock2 -->
                          <action type="if" condition="doRand == 1">
                            <action type="assignment" variable="tStimulusNumber" value="svRandStimNumber"/>
                          </action>
                          <action type="if" condition="doRand == 0">
                            <action type="assignment" variable="tStimulusNumber" value="svSeqStimNumber"/>
                          </action>


                          <!--set background luminance -->
                          <!--Select luminance -->
                          <action type="if" condition="doBackgroundStim == 1">  
                            <action type="assignment" variable="tTempStim" value= "tStimulusNumber % backgroundLuminanceStepN"/>
                            <action type="assignment" variable="tBackgroundLuminance" value= "backgroundLuminance * (pow(backgroundLuminanceStepLog,(backgroundLuminanceStepDir*(tTempStim))))"/>
                            <action type="report" message="Luminance is $tBackgroundLuminance"/>
                            <action type="queue_stimulus" stimulus="background"></action>
                            <action tag="Send stimulus to back" type="send_stimulus_to_back" stimulus="background"/>
                            <action tag="Update Stimulus" type="update_stimulus_display"></action>
                          </action>
                          <action type="if" condition="doBackgroundStim == 0">  
                           <action type="assignment" variable="tBackgroundLuminance" value= "backgroundLuminance"/>
                         </action>   


                         <!--Select retinotopy position; choose a value from selection var, 0-origin -->
                         <action type="if" condition="doRetStim">
                          <!--Select direction with Retinotopy -->
                          <action type="if" condition="doDirStim">
                            <action type="assignment" variable="tTempStim" value= "tStimulusNumber % (gratingElevationStepN * gratingAzimuthStepN * gratingDirectionStepN)"/>
                            <action type="if" condition="tTempStim &lt; (gratingAzimuthStepN * gratingDirectionStepN)">
                              <action type="assignment" variable="tGratingElevationDeg" value= "gratingElevationDeg"/>
                              <action type="assignment" variable="tGratingAzimuthDeg" value= "gratingAzimuthDeg + (gratingAzimuthStepDeg * floor(tTempStim/gratingDirectionStepN))"/>
                              <action type="assignment" variable="tGratingDirectionDeg" value= "gratingDirectionDeg + (gratingDirectionStepDeg * (tTempStim % gratingDirectionStepN))"/>
                              <action type="report" message="Azimuth is $tGratingAzimuthDeg ; Elevation is $tGratingElevationDeg ; Direction is $tGratingDirectionDeg"/>
                            </action>
                            <action type="if" condition="tTempStim &gt;= (gratingAzimuthStepN * gratingDirectionStepN)">
                              <action type="assignment" variable="tGratingElevationDeg" value= "gratingElevationDeg + (gratingElevationStepDeg * (floor(tTempStim / (gratingAzimuthStepN * gratingDirectionStepN))))"/>
                              <action type="assignment" variable="tGratingAzimuthDeg" value= "gratingAzimuthDeg + (gratingAzimuthStepDeg * floor(((tTempStim) % (gratingAzimuthStepN * gratingDirectionStepN))/gratingDirectionStepN))"/>
                              <action type="assignment" variable="tGratingDirectionDeg" value= "gratingDirectionDeg + (gratingDirectionStepDeg * (tTempStim % gratingDirectionStepN))"/>
                              <action type="report" message="Azimuth is $tGratingAzimuthDeg ; Elevation is $tGratingElevationDeg ;  $tGratingDirectionDeg"/>
                            </action>
                          </action> 
                          <action type="if" condition="!doDirStim">
                            <action type="assignment" variable="tTempStim" value= "tStimulusNumber % (gratingElevationStepN * gratingAzimuthStepN)"/>    
                            <action type="if" condition="tTempStim &lt; gratingAzimuthStepN">
                             <action type="assignment" variable="tGratingAzimuthDeg" value= "gratingAzimuthDeg + (gratingAzimuthStepDeg * (tTempStim))"/>
                             <action type="assignment" variable="tGratingElevationDeg" value= "gratingElevationDeg"/>
                             <action type="report" message="Azimuth is $tGratingAzimuthDeg ; Elevation is $tGratingElevationDeg"/>
                           </action>
                           <action type="if" condition="tTempStim &gt;= gratingAzimuthStepN">
                             <action type="assignment" variable="tGratingAzimuthDeg" value= "gratingAzimuthDeg+ (gratingAzimuthStepDeg * ((tTempStim) % gratingAzimuthStepN))"/>
                             <action type="assignment" variable="tGratingElevationDeg" value= "gratingElevationDeg+ (gratingElevationStepDeg * (floor(tTempStim / gratingAzimuthStepN)))"/>
                             <action type="report" message="Azimuth is $tGratingAzimuthDeg ; Elevation is $tGratingElevationDeg"/>
                           </action>
                         </action>
                       </action>
                       <action type="if" condition="doRetStim == 0">
                         <action type="assignment" variable="tGratingAzimuthDeg" value= "gratingAzimuthDeg"/>
                         <action type="assignment" variable="tGratingElevationDeg" value= "gratingElevationDeg"/>
                       </action>

                       <!--Select features if not in matrix mode -->
                       <action type="if" condition="doMatrix == 0">	
                        <!--Select size -->
                        <action type="if" condition="doSizeStim = 1">	
                         <action type="assignment" variable="tTempStim" value= "tStimulusNumber % gratingDiameterStepN"/>
                         <action type="assignment" variable="tGratingDiameterDeg" value= "gratingDiameterDeg + (gratingDiameterStepDeg * (tTempStim))"/>
                         <action type="report" message="Diameter is $tGratingDiameterDeg"/>
                       </action>
                        <action type="if" condition="doAnnulusSizeStim == 1">   
                         <action type="assignment" variable="tTempStim" value= "tStimulusNumber % AnnulusgratingDiameterStepN"/>
                         <action type="assignment" variable="tAnnulusGratingDiameterDeg" value= "AnnulusgratingDiameterMinN * tGreymaskDiameterDeg + (AnnulusgratingDiameterMaxN * tGreymaskDiameterDeg / AnnulusgratingDiameterStepN * (tTempStim))"/>
                         <action type="report" message="Annulus Diameter is $tAnnulusGratingDiameterDeg"/>
                       </action>		
                       <action type="if" condition="doSizeStim == 0">
                         <action type="assignment" variable="tGratingDiameterDeg" value= "gratingDiameterDeg"/>
                       </action>          

                       <!--Select spatial frequency -->
                       <action type="if" condition="doSFStim == 1">	
                        <action type="assignment" variable="tTempStim" value= "tStimulusNumber % gratingSpatialFreqStepN"/>          	

                        <action type="if" condition="doRetStim = 1">
                          <action type="assignment" variable="tTempStim" value= "floor((tStimulusNumber % (gratingElevationStepN * gratingAzimuthStepN * gratingSpatialFreqStepN))/(gratingElevationStepN * gratingAzimuthStepN))"/>
                        </action>	
                        <action type="assignment" variable="tGratingSpatialFreqCPD" value= "gratingSpatialFreqCPD * (pow(gratingSpatialFreqStepLog,(gratingSpatialFreqStepDir*(tTempStim))))"/>
                        <action type="report" message="Spatial Frequency is $tGratingSpatialFreqCPD"/>
                      </action>		
                      <action type="if" condition="doSFStim == 0">
                       <action type="assignment" variable="tGratingSpatialFreqCPD" value= "gratingSpatialFreqCPD"/>
                     </action>

                     <!--Select temporal frequency -->
                     <action type="if" condition="doTFStim = 1">	
                      <action type="assignment" variable="tTempStim" value= "tStimulusNumber % gratingTemporalFreqStepN"/>
                      <!--Select temporal frequency with Retinotopy -->
                      <action type="if" condition="doRetStim = 1">
                       <action type="assignment" variable="tTempStim" value= "floor((tStimulusNumber % (gratingElevationStepN * gratingAzimuthStepN * gratingTemporalFreqStepN))/(gratingElevationStepN * gratingAzimuthStepN))"/>
                     </action>	
                     <action type="assignment" variable="tGratingTemporalFreqCPS" value= "gratingTemporalFreqCPS * (pow(gratingTemporalFreqStepLog,(gratingTemporalFreqStepDir*(tTempStim))))"/>
                     <action type="report" message="Temporal Frequency is $tGratingTemporalFreqCPS"/>
                   </action>		
                   <action type="if" condition="doTFStim == 0">
                     <action type="assignment" variable="tGratingTemporalFreqCPS" value= "gratingTemporalFreqCPS"/>
                   </action> 

                   <!--Select direction -->
                   <action type="if" condition="(doDirStim == 1) &amp;&amp; !doMatrix">
                     <action type="assignment" variable="tTempStim" value= "tStimulusNumber % gratingDirectionStepN"/>
                     <action type="assignment" variable="tGratingDirectionDeg" value= "gratingDirectionDeg + (gratingDirectionStepDeg * (tTempStim))"/>
                     <action type="report" message="Direction is $tGratingDirectionDeg"/>
                   </action>		
                   <action type="if" condition="doDirStim == 0">
                    <action type="assignment" variable="tGratingDirectionDeg" value= "gratingDirectionDeg"/>
                  </action>


                  <!--Select contrast -->
                  <action type="if" condition="!doMatrix &amp;&amp; doConStim == 1">	
                    <action type="assignment" variable="tTempStim" value= "tStimulusNumber % gratingContrastStepN"/>
                    <action type="assignment" variable="tGratingContrast" value= "gratingContrast * (pow(gratingContrastStepLog,(gratingContrastStepDir*(tTempStim))))"/>
                    <action type="report" message="Contrast is $tGratingContrast"/>
                  </action>		
                  <action type="if" condition="doConStim == 0">
                   <action type="assignment" variable="tGratingContrast" value= "gratingContrast"/>
                 </action>

                 <!-- do Phase -->
                 <action type="if" condition="!doMatrix &amp;&amp; doPhaseStim = 1">  
                  <action type="assignment" variable="tTempStim" value= "tStimulusNumber % gratingStartingPhaseStepN"/>
                  <action type="assignment" variable="tGratingStartingPhaseDeg" value= "gratingStartingPhaseDeg + (gratingStartingPhaseStepDeg * (tTempStim))"/>
                  <action type="report" message="Starting phase is $tGratingStartingPhaseDeg"/>
                </action>   
                <action type="if" condition="doPhaseStim == 0">
                  <action type="assignment" variable="tGratingStartingPhaseDeg" value= "gratingStartingPhaseDeg"/>
                </action> 

                <action type="if" condition="!doMatrix &amp;&amp; doLoomStim == 1">  
                  <action type="assignment" variable="tTempStim" value= "tStimulusNumber % loomSpeedStepN"/>
                  <action type="assignment" variable="tGratingLoomSpeedDPS" value= "loomSpeedDPS * (pow(loomSpeedStepLog,(loomSpeedStepDir*(tTempStim))))"/>
                  <action type="report" message="Speed is $tGratingLoomSpeedDPS"/>
                </action>   
                <action type="if" condition="doLoomStim == 0">
                  <action type="assignment" variable="tGratingLoomSpeedDPS" value= "loomSpeedDPS"/>
                </action>

                <!--Select speed- for moving dots only --> 
                <action type="if" condition="!doMatrix &amp;&amp; doDotsSpeedStim == 1">  
                  <action type="assignment" variable="tTempStim" value= "tStimulusNumber % dotSpeedStepN"/>
                  <action type="assignment" variable="tDotSpeedDPS" value= "dotSpeedDPS * (pow(dotSpeedStepLog,(dotSpeedStepDir*(tTempStim))))"/>
                  <action type="report" message="Speed is $tDotSpeedDPS"/>
                </action>   
                <action type="if" condition="doDotsSpeedStim == 0">
                  <action type="assignment" variable="tDotSpeedDPS" value= "dotSpeedDPS"/>
                </action>

                <action type="if" condition="doDotsDirectionStim = 1">
                  <action type="assignment" variable="tTempStim" value= "tStimulusNumber % dotDirectionStepN"/>
                  <action type="assignment" variable="tDotDirectionDeg" value= "dotDirectionDeg + (dotDirectionStepDeg * (tTempStim))"/>
                  <action type="report" message="Direction is $tDotDirectionDeg"/>
                </action> 
                <action type="if" condition="doDotsDirectionStim = 0">
                  <action type="assignment" variable="tDotDirectionDeg" value= "dotDirectionDeg"/>
                </action>  

                <!--Select contrast- for moving dots only -->
                <action type="if" condition="!doMatrix &amp;&amp; doDotsContrastStim == 1">  
                  <action type="assignment" variable="tTempStim" value= "tStimulusNumber % dotContrastStepN"/>
                  <action type="assignment" variable="tDotContrast" value= "dotContrast * (pow(dotContrastStepLog,(dotContrastStepDir*(tTempStim))))"/>
                  <action type="report" message="Contrast is $tDotContrast"/>
                </action>   
                <action type="if" condition="doDotsContrastStim == 0">
                  <action type="assignment" variable="tDotContrast" value= "dotContrast"/>
                </action>

                <!--Select coherence- for moving dots only -->
                <action type="if" condition="!doMatrix &amp;&amp; doDotsCoherenceStim == 1">  
                  <action type="assignment" variable="tTempStim" value= "tStimulusNumber % dotCoherenceStepN"/>
                  <action type="assignment" variable="tDotCoherence" value= "dotCoherence * (pow(dotCoherenceStepLog,(dotCoherenceStepDir*(tTempStim))))"/>
                  <action type="report" message="Coherence is $tDotCoherence"/>
                </action>   
                <action type="if" condition="doDotsCoherenceStim == 0">
                  <action type="assignment" variable="tDotCoherence" value= "dotCoherence"/>
                </action>

                <!--Select direction- for moving dots only -->
                <action type="if" condition="!doMatrix &amp;&amp; doDotsDirectionStim == 1">  
                  <action type="assignment" variable="tTempStim" value= "tStimulusNumber % dotDirectionStepN"/>
                  <action type="assignment" variable="tDotDirectionDeg" value= "dotDirectionDeg + (dotDirectionStepDeg *(tTempStim))"/>
                  <action type="report" message="Size is $tDotDirectionDeg"/>
                </action>   
                <action type="if" condition="doDotsDirectionStim == 0">
                  <action type="assignment" variable="tDotDirectionDeg" value= "dotDirectionDeg"/>
                </action>

                <!--Select size- for moving dots only -->
                <action type="if" condition="!doMatrix &amp;&amp; doDotsSizeStim == 1">  
                  <action type="assignment" variable="tTempStim" value= "tStimulusNumber % dotSizeStepN"/>
                  <action type="assignment" variable="tDotSizeDeg" value= "dotSizeDeg + (dotSizeStepDeg *(tTempStim))"/>
                  <action type="report" message="Size is $tDotSizeDeg"/>
                </action>   
                <action type="if" condition="doDotsSizeStim == 0">
                  <action type="assignment" variable="tDotSizeDeg" value= "dotSizeDeg"/>
                </action>

                <!--Select density- for moving dots only -->
                <action type="if" condition="!doMatrix &amp;&amp; doDotsDensityStim == 1">  
                  <action type="assignment" variable="tTempStim" value= "tStimulusNumber % dotDensityStepN"/>
                  <action type="assignment" variable="tDotDensity" value= "dotDensity + (dotDensityStep *(tTempStim))"/>
                  <action type="report" message="Size is $tDotDensity"/>
                </action>   
                <action type="if" condition="doDotsDensityStim == 0">
                  <action type="assignment" variable="tDotDensity" value= "dotDensity"/>
                </action>  


                <!--Select LED power -->
                <action type="if" condition="!doMatrix &amp;&amp; doLEDStim == 1">	
                  <action type="assignment" variable="tTempStim" value= "tStimulusNumber % LEDPowerStepN"/>
                  <action type="assignment" variable="tTrialLaserPowerMw_trigger" value= "LEDPowerMw + (LEDPowerStepMw * (tTempStim))"/>
                  <action type="report" message="LED Power is $tTrialLaserPowerMw_trigger"/>
                </action>		
                <action type="if" condition="doLEDStim == 0">
                 <action type="assignment" variable="tTrialLaserPowerMw_trigger" value= "LEDPowerMw"/>
               </action>
             </action>

               <action type="if" condition="LaserPowerMw > 0 &amp;&amp; optic_device != 'led'">
                    <action type="assignment" variable="tTrialLaserPowerMw" value="LaserPowerMw"/>
               </action>
             <!--Select features if IN matrix mode -->
             <action type="if" condition="doMatrix = 1">
              <!-- Make SFxTF Matrix-->	
              <action type="if" condition="(doTFStim == 1) &amp;&amp; (doSFStim == 1)">
               <action type="assignment" variable="tTempStim" value= "tStimulusNumber % (gratingSpatialFreqStepN * gratingTemporalFreqStepN)"/>
               <action type="if" condition="tTempStim &lt; gratingSpatialFreqStepN">
                 <action type="assignment" variable="tGratingSpatialFreqCPD" value= "gratingSpatialFreqCPD *(pow(gratingSpatialFreqStepLog,(gratingSpatialFreqStepDir*tTempStim)))"/>
                 <action type="assignment" variable="tGratingTemporalFreqCPS" value= "gratingTemporalFreqCPS"/>
                 <action type="report" message="SF is $tGratingSpatialFreqCPD ; TF is $tGratingTemporalFreqCPS"/>
               </action>
               <action type="if" condition="tTempStim &gt;= gratingSpatialFreqStepN">
                 <action type="assignment" variable="tGratingSpatialFreqCPD" value= "gratingSpatialFreqCPD * (pow(gratingSpatialFreqStepLog, (gratingSpatialFreqStepDir*(tTempStim % gratingSpatialFreqStepN))))"/>
                 <action type="assignment" variable="tGratingTemporalFreqCPS" value= "gratingTemporalFreqCPS * (pow(gratingTemporalFreqStepLog, (gratingTemporalFreqStepDir*(floor(tTempStim / gratingSpatialFreqStepN)))))"/>
                 <action type="report" message="SF is $tGratingSpatialFreqCPD ; TF is $tGratingTemporalFreqCPS"/>
               </action>
               <action type="assignment" variable="tGratingContrast" value= "gratingContrast"/>
               <action type="assignment" variable="tGratingDirectionDeg" value= "gratingDirectionDeg"/>
               <action type="assignment" variable="tGratingDiameterDeg" value= "gratingDiameterDeg"/>
               <action type="assignment" variable="tGratingAzimuthDeg" value= "gratingAzimuthDeg"/>
               <action type="assignment" variable="tGratingElevationDeg" value= "gratingElevationDeg"/>
             </action>

             <!-- Make SF x Dir Matrix -->
             <action type="if" condition="(doDirStim == 1) &amp;&amp; (doSFStim) == 1">
               <action type="assignment" variable="tTempStim" value= "tStimulusNumber % (gratingSpatialFreqStepN * gratingDirectionStepN)"/>
               <action type="if" condition="tTempStim &lt; gratingSpatialFreqStepN">
                 <action type="assignment" variable="tGratingSpatialFreqCPD" value= "gratingSpatialFreqCPD * (pow(gratingSpatialFreqStepLog, (gratingSpatialFreqStepDir*(tTempStim))))"/>
                 <action type="assignment" variable="tGratingDirectionDeg" value= "gratingDirectionDeg"/>
                 <action type="report" message="SF is $tGratingSpatialFreqCPD ; Direction is $tGratingDirectionDeg"/>
               </action>
               <action type="if" condition="tTempStim &gt;= gratingSpatialFreqStepN">
                 <action type="assignment" variable="tGratingSpatialFreqCPD" value= "gratingSpatialFreqCPD * (pow(gratingSpatialFreqStepLog, (gratingSpatialFreqStepDir*((tTempStim) % gratingSpatialFreqStepN))))"/>
                 <action type="assignment" variable="tGratingDirectionDeg" value= "gratingDirectionDeg + (gratingDirectionStepDeg * (floor(tTempStim / gratingSpatialFreqStepN)))"/>
                 <action type="report" message="SF is $tGratingSpatialFreqCPD ; Direction is $tGratingDirectionDeg"/>
               </action>
               <action type="assignment" variable="tGratingContrast" value= "gratingContrast"/>
               <action type="assignment" variable="tGratingTemporalFreqCPS" value= "gratingTemporalFreqCPS"/>
               <action type="assignment" variable="tGratingDiameterDeg" value= "gratingDiameterDeg"/>
               <action type="assignment" variable="tGratingAzimuthDeg" value= "gratingAzimuthDeg"/>
               <action type="assignment" variable="tGratingElevationDeg" value= "gratingElevationDeg"/>
             </action>

             <!-- Make Dir X Phase--> 
             <action type="if" condition="(doDirStim == 1) &amp;&amp; (doPhaseStim == 1)">
              <action type="if" condition="tStimulusNumber &lt; (gratingDirectionStepN * gratingStartingPhaseStepN)">    
                <action type="assignment" variable="tTempStim" value= "tStimulusNumber"/>
              </action>
              <action type="if" condition="tStimulusNumber &gt;= (gratingDirectionStepN * gratingStartingPhaseStepN)">
                <action type="assignment" variable="tTempStim" value= "tStimulusNumber % (gratingDirectionStepN * gratingStartingPhaseStepN)"/>
              </action>
              <action type="if" condition="tTempStim &lt; gratingStartingPhaseStepN">
                <action type="assignment" variable="tGratingStartingPhaseDeg" value= "gratingStartingPhaseDeg + (gratingStartingPhaseStepDeg * (tTempStim))"/> 
                <action type="assignment" variable="tGratingDirectionDeg" value= "gratingDirectionDeg"/>   
                <action type="report" message="SP is $tGratingStartingPhaseDeg ; Direction is $tGratingDirectionDeg"/>
              </action>
              <action type="if" condition="tTempStim >= gratingStartingPhaseStepN">
                <action type="assignment" variable="tGratingStartingPhaseDeg" value= "gratingStartingPhaseDeg + (gratingStartingPhaseStepDeg * ((tTempStim % gratingStartingPhaseStepN)))"/> 
                <action type="assignment" variable="tGratingDirectionDeg" value= "gratingDirectionDeg + (gratingDirectionStepDeg * (floor(tTempStim / gratingStartingPhaseStepN)))"/>
                <action type="report" message="SP is $tGratingStartingPhaseDeg; Direction is $tGratingDirectionDeg"/>
              </action>
              <action type="assignment" variable="tGratingContrast" value= "gratingContrast"/>
              <action type="assignment" variable="tGratingTemporalFreqCPS" value= "gratingTemporalFreqCPS"/>
              <action type="assignment" variable="tGratingDiameterDeg" value= "gratingDiameterDeg"/>
              <action type="assignment" variable="tGratingAzimuthDeg" value= "gratingAzimuthDeg"/>
              <action type="assignment" variable="tGratingElevationDeg" value= "gratingElevationDeg"/>
              <action type="assignment" variable="tGratingSpatialFreqCPD" value="gratingSpatialFreqCPD"/>
            </action>

            <!-- Make LEDpower x Dir Matrix -->
            <action type="if" condition="(doDirStim == 1) &amp;&amp; (doLEDStim == 1)">
             <action type="assignment" variable="tTempStim" value= "tStimulusNumber % (LEDPowerStepN * gratingDirectionStepN)"/>
             <action type="if" condition="tTempStim &lt; LEDPowerStepN">
               <action type="assignment" variable="tTrialLaserPowerMw_trigger" value= "LEDPowerMw + (LEDPowerStepMw * (tTempStim))"/>
               <action type="assignment" variable="tGratingDirectionDeg" value= "gratingDirectionDeg"/>
               <action type="report" message="LED Power is $tTrialLaserPowerMw_trigger ; Direction is $tGratingDirectionDeg"/>
             </action>
             <action type="if" condition="tTempStim &gt;= LEDPowerStepN">
               <action type="assignment" variable="tTrialLaserPowerMw_trigger" value= "LEDPowerMw + (LEDPowerStepMw * ((tTempStim) % LEDPowerStepN))"/>
               <action type="assignment" variable="tGratingDirectionDeg" value= "gratingDirectionDeg + (gratingDirectionStepDeg * (floor(tTempStim / LEDPowerStepN)))"/>
               <action type="report" message="LED Power is $tTrialLaserPowerMw_trigger ; Direction is $tGratingDirectionDeg"/>
             </action>
             <action type="assignment" variable="tGratingContrast" value= "gratingContrast"/>
             <action type="assignment" variable="tGratingTemporalFreqCPS" value= "gratingTemporalFreqCPS"/>
             <action type="assignment" variable="tGratingSpatialFreqCPD" value= "gratingSpatialFreqCPD"/>
             <action type="assignment" variable="tGratingDiameterDeg" value= "gratingDiameterDeg"/>
             <action type="assignment" variable="tGratingAzimuthDeg" value= "gratingAzimuthDeg"/>
             <action type="assignment" variable="tGratingElevationDeg" value= "gratingElevationDeg"/>
           </action>

	      	<!-- check for errors in feature combos 
	      		<action type="if" condition= "(doTFStim+doSFStim+doDirStim+doConStim+doSizeStim+(doRetStim*2)) &gt; 2">
	      			<action type="assert" condition= "1 = 1" message="Too many stim features selected for matrix mode"
                  stop_on_failure="1"/>
                 </action>
                 <action type="if" condition= "(doTFStim+doSFStim+doDirStim+doConStim+doSizeStim+(doRetStim*2)) &lt; 2">
	      			<action type="assert" condition= "1 = 1" message="Too few stim features selected for matrix mode"
                  stop_on_failure="1"/>
                 </action>
	      		<action type="if" condition= "((doTFStim+doSFStim) &lt; 2) &amp;&amp; ((doDirStim+doSFStim) &lt; 2)">
                  <action type="assert" condition= "1 = 1" message="Code not written to do matrix for these features"
                  stop_on_failure="1"/>
                </action> -->
              </action>

              <!-- convert TF/SF to speed -->
              <action type="if" condition="doMovingDots != 1 &amp;&amp; doLoomStim != 1">                                     
                <action type="assignment" variable="tGratingSpeedDPS" value="tGratingTemporalFreqCPS / tGratingSpatialFreqCPD"></action> 
                <action type="report" message="Speed is $tGratingSpeedDPS"/>
              </action>

              <action type="if" condition="tTrialLaserPowerMw_trigger > 0 &amp;&amp; optic_device != 'led'"> 
                    <action type="assignment" variable="tTrialLaserPowerMw_trigger" value= "LaserPowerMw"/>
              </action>

              <!-- Zero the LED port-->
              <action type="assignment" variable="laserTrigger" value="0"/>
              <action type="if" condition="optic_device == 'led'">
                <action type="assignment" variable="tTrialLaserPowerMw" value="0"/>
              </action>
              <action type="if" condition="tTrialLaserPowerMw_trigger > 0">
                <action type="assignment" tag="Send laser params to controller" variable="sendLaserParams" value="1"></action>
                <action type="assignment" tag="Send laser params to controller" variable="sendLaserParams" value="0"></action>
              </action>

              <!-- initialize trial start/end times -->
              <action type="if" condition="tThisTrialStartTimeMs == -1">  
                <!--first trial, leave lasttime as -1 -->
                <action type="assignment" variable="tLastTrialStartTimeMs" value="-1"></action>
              </action>
              <action type="if" condition="tThisTrialStartTimeMs != -1">  <!--else-->
                <!--later trials, copy this into last before setting this again below -->
                <action type="assignment" variable="tLastTrialStartTimeMs" value="tThisTrialStartTimeMs"></action>
              </action>
              <action type="assignment" variable="tThisTrialStartTimeMs" value="now()/1000"></action>
              <action type="assignment" tag="Clear stimulusOn" variable="stimulusOn" value="0"></action>
              <action type="assignment" tag="Encode InterStimIntervalStart" variable="strobedDigitalWord" value="6"></action> 

              <action type="report" message="In InterStimInterval, waiting for $nScansOff frames"></action>          
              <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
              <transition type="conditional" tag="If nScansOff, move to StimOn" condition="counter >= ((nScansOff+nScansOn) * tTrialsDoneSinceStart) + nScansOff" target="StimOn"></transition>
            </task_system_state>

            <task_system_state tag="StimOn" interruptible="YES">
              <action_marker _unmoveable="1" tag="Actions"></action_marker>

              <action type="if" condition="doPhotodiode">
                <action tag="Queue Stimulus" type="live_queue_stimulus" stimulus="photoDiodeGrating"></action>
                <action tag="Dequeue Stimulus" type="dequeue_stimulus" stimulus="photoDiodeMask"></action> 
                <action type="play_dynamic_stimulus" stimulus="photoDiodeGrating" tag="StimOn"></action>
              </action>

              <action type="if" condition="doMovingDots != 1">
                <action tag="Dequeue Stimulus" type="dequeue_stimulus" stimulus="base_grating"></action>
                <action type="if" condition="doAnnulusStim == 0">
                    <action type="if" condition="doGaussianMask == 1">
                        <action tag="Queue Stimulus" type="queue_stimulus" stimulus="target_grating_gaussian"></action>
                        <action type="play_dynamic_stimulus" stimulus="target_grating_gaussian" tag="start"></action>
                    </action>
                    <action type="if" condition="doEllipseMask == 1">
                        <action tag="Queue Stimulus" type="queue_stimulus" stimulus="target_grating_ellipse"></action>
                        <action type="play_dynamic_stimulus" stimulus="target_grating_ellipse" tag="start"></action>
                    </action>
                </action>
                <action type="if" condition="doAnnulusStim == 1">
                    <action type="if" condition="doEllipseMask == 1">
                        <action tag="Queue Stimulus" type="queue_stimulus" stimulus="target_grating_annulus"></action>
                        <action type="play_dynamic_stimulus" stimulus="target_grating_annulus" tag="start"></action>
                        <action tag="Queue Stimulus" type="queue_stimulus" stimulus="inner_mask"></action>
                        <action tag="Queue Stimulus" type="queue_stimulus" stimulus="target_grating_ellipse"></action>
                        <action type="play_dynamic_stimulus" stimulus="target_grating_ellipse" tag="start"></action>
                    </action>
                </action>
              </action>

              <!-- update display, finalize variables -->
              <action tag="Update Display" type="update_stimulus_display"></action>
              <action type="report" message="Visual Stim ON, presenting for $nScansOn scans."></action>
              <action type="report" message="Laser trial and power is $tTrialLaserPowerMw_trigger"/>
              <action type="if" condition="tTrialLaserPowerMw_trigger &gt; 0">
                <action type="report" message="Laser trial and power is $tTrialLaserPowerMw_trigger"/>
                <action type="if" condition="tTrialsDoneSinceStart > 10">
                    <action type="assignment" variable="laserTrigger" value="1"/>
                </action>
                <action type="if" condition="optic_device == 'led'">
                    <action type="assignment" variable="tTrialLaserPowerMw" value="tTrialLaserPowerMw_trigger"/>
                </action>
              </action>
              
              <action type="assignment" tag="Log Number of Wheel-pulses received during ITI" variable="tITIWheelCounter" value="counter2 - tCounter2"></action>
              <action type="assignment" tag="reset tCounter2 to counter2" variable="tCounter2" value="counter2"></action>
              <action type="assignment" tag="reset ttCounter2 to counter2" variable="ttCounter2" value="counter2"></action>

              <action type="if" condition="doMovingDots == 1">
               <action type="assignment" tag="reset contrast" variable="setDotContrast" value="tDotContrast"></action>
               <action type="if" condition="doDotsSpeedStim == 1">
                <action type="assignment" tag="reset speed" variable="setDotSpeedDPS" value="tDotSpeedDPS"></action>
              </action>
              <action type="if" condition="doDirStim == 1">
                <action type="assignment" tag="reset direction" variable="setDotDirectionDeg" value="tDotDirectionDeg"></action>
              </action>
              <action type="if" condition="doDotsSizeStim == 1">
                <action type="assignment" tag="reset size" variable="setDotSizeDeg" value="tDotSizeDeg"></action>
              </action>
              <action type="if" condition="doDotsCoherenceStim == 1">
                <action type="assignment" tag="reset size" variable="setDotCoherence" value="tDotCoherence"></action>
              </action>
              <action type="if" condition="doDotsDensityStim == 1">
                <action type="assignment" tag="reset size" variable="setDotDensity" value="tDotDensity"></action>
              </action>
            </action>  
            

            <action type="assignment" tag="Encode VisStimOn" variable="strobedDigitalWord" value="4"></action>
            
            <action type="start_timer" tag="Start 1st Speed Timer" timer="speedTimer1" timebase="" duration="speedTimerIntervalMs" duration_units="ms"></action> 

            <action type="if" condition="counter >= (nScansOff+nScansOn) * (1+tTrialsDoneSinceStart)"> 
              <action type="assignment" tag="Log Speed of current Interval" variable="spCounter1" value="counter2 - tCounter2"></action>

              <action type="assignment" tag="reset tCounter2 to counter2" variable="tCounter2" value="counter2"></action>
            </action>

            <action type="start_timer" tag="Start refresh timer" timer="refreshTimer" timebase="" duration="300" duration_units="ms"></action>

            <!-- Can't actually jave a system state for timer 1, but it would be here-->
            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="timer_expired" timer="speedTimer1" target="speedCounter2"/> 
            <transition type="conditional" tag="If nScansON, move to EndTrial" condition="counter >= (nScansOff+nScansOn) * (1+tTrialsDoneSinceStart)" target="EndTrial" ></transition>
            <transition type="conditional" tag="If doLooming go to loom state" condition="timerExpired(refreshTimer) &amp;&amp; doLoomStim" target="LoomState" ></transition>
            <transition type="conditional" tag="If doRunFeedback go to run feedback state" condition="timerExpired(refreshTimer) &amp;&amp; doRunFeedback" target="RunFeedback" ></transition>
          </task_system_state>

          <task_system_state tag="LoomState" interruptible="YES">
            <action type="start_timer" tag="Start refresh timer" timer="refreshTimer" timebase="" duration="30" duration_units="ms"></action>
            <action type="assignment" tag="set new stimulus size" variable="tGratingDiameterDeg" value="tGratingDiameterDeg + tGratingLoomSpeedDPS*.03"></action>
            <action type="if" condition="doAnnulusStim == 0">
                <action type="if" condition="doGaussianMask == 1">
                    <action tag="Queue Stimulus" type="queue_stimulus" stimulus="target_grating_gaussian"></action>
                    <action type="play_dynamic_stimulus" stimulus="target_grating_gaussian" tag="start"></action>
                </action>
                <action type="if" condition="doEllipseMask == 1">
                    <action tag="Queue Stimulus" type="queue_stimulus" stimulus="target_grating_ellipse"></action>
                    <action type="play_dynamic_stimulus" stimulus="target_grating_ellipse" tag="start"></action>
                </action>
            </action>

            <action type="if" condition="doAnnulusStim == 1">
                <action type="if" condition="doEllipseMask == 1">
                    <action tag="Queue Stimulus" type="queue_stimulus" stimulus="target_grating_annulus"></action>
                    <action type="play_dynamic_stimulus" stimulus="target_grating_annulus" tag="start"></action>
                    <action tag="Queue Stimulus" type="queue_stimulus" stimulus="inner_mask"></action>
                    <action tag="Queue Stimulus" type="queue_stimulus" stimulus="target_grating_ellipse"></action>
                    <action type="play_dynamic_stimulus" stimulus="target_grating_ellipse" tag="start"></action>
                </action>
            </action>

            <action tag="Update Display" type="update_stimulus_display"></action>
            <!-- <action type="report" message="Diameter is $tGratingDiameterDeg"/> -->
            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="conditional" tag="If nScansON, move to EndTrial" condition="counter >= (nScansOff+nScansOn) * (1+tTrialsDoneSinceStart)" target="EndTrial" ></transition>
            <transition type="conditional" tag="If timer expired and not yet max size, recycle" condition="timerExpired(refreshTimer) &amp;&amp; tGratingDiameterDeg &lt; maxLoomDiameterDeg" target="LoomState" ></transition>
          </task_system_state>

          <task_system_state tag="RunFeedback" interruptible="YES">
            <action type="start_timer" tag="Start refresh timer" timer="refreshTimer" timebase="" duration="300" duration_units="ms"></action>
            <action type="assignment" tag="Log Speed of previous Interval" variable="runFeedbackCounter" value="counter2 - tCounter2"></action>
            <action type="assignment" tag="set new stimulus speed" variable="setDotSpeedDPS" value="runFeedbackCounter * runFeedbackGain"></action>
            <action tag="Update Display" type="update_stimulus_display"></action>
            <action type="report" message="setDotSpeedDPS is $setDotSpeedDPS"/> 
            <action type="assignment" tag="reset tCounter2 to counter2" variable="tCounter2" value="counter2"></action>
            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="conditional" tag="If nScansON, move to EndTrial" condition="counter >= (nScansOff+nScansOn) * (1+tTrialsDoneSinceStart)" target="EndTrial" ></transition>
            <transition type="conditional" tag="If timer expired, recycle" condition="timerExpired(refreshTimer)" target="RunFeedback" ></transition>
          </task_system_state>

          <task_system_state tag="speedCounter2" interruptible="YES">
            <action_marker _unmoveable="1" tag="Actions"></action_marker>
            <action type="start_timer" tag="Start speedTimer2" timer="speedTimer2" timebase="" duration="speedTimerIntervalMs" duration_units="ms"></action>
            <action type="assignment" tag="Log Speed of previous Interval" variable="spCounter1" value="counter2 - tCounter2"></action>
            <action type="assignment" tag="reset tCounter2 to counter2" variable="tCounter2" value="counter2"></action>

            <action type="if" condition="counter >= (nScansOff+nScansOn) * (1+tTrialsDoneSinceStart)"> 
              <action type="assignment" tag="Log Speed of current Interval" variable="spCounter2" value="counter2 - tCounter2"></action>
              <action type="assignment" tag="reset tCounter2 to counter2" variable="tCounter2" value="counter2"></action>
            </action>

            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="timer_expired" target="speedCounter3" timer="speedTimer2"></transition>
            <transition type="conditional" tag="If nScansON, move to EndTrial" condition="counter >= (nScansOff+nScansOn) * (1+tTrialsDoneSinceStart)" target="EndTrial" ></transition>
          </task_system_state>

          <task_system_state tag="speedCounter3" interruptible="YES">
            <action_marker _unmoveable="1" tag="Actions"></action_marker>
            <action type="start_timer" tag="Start speedTimer3" timer="speedTimer3" timebase="" duration="speedTimerIntervalMs" duration_units="ms"></action>
            <action type="assignment" tag="Log Speed of previous Interval" variable="spCounter2" value="counter2 - tCounter2"></action>
            <action type="assignment" tag="reset tCounter2 to counter2" variable="tCounter2" value="counter2"></action>

            <action type="if" condition="counter >= (nScansOff+nScansOn) * (1+tTrialsDoneSinceStart)"> 
              <action type="assignment" tag="Log Speed of current Interval" variable="spCounter3" value="counter2 - tCounter2"></action>
              <action type="assignment" tag="reset tCounter2 to counter2" variable="tCounter2" value="counter2"></action>
            </action>

            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="timer_expired" target="speedCounter4" timer="speedTimer3"></transition>
            <transition type="conditional" tag="If nScansON, move to EndTrial" condition="counter >= (nScansOff+nScansOn) * (1+tTrialsDoneSinceStart)" target="EndTrial" ></transition>
          </task_system_state>

          <task_system_state tag="speedCounter4" interruptible="YES">
            <action_marker _unmoveable="1" tag="Actions"></action_marker>
            <action type="start_timer" tag="Start speedTimer4" timer="speedTimer4" timebase="" duration="speedTimerIntervalMs" duration_units="ms"></action>
            <action type="assignment" tag="Log Speed of previous Interval" variable="spCounter3" value="counter2 - tCounter2"></action>
            <action type="assignment" tag="reset tCounter2 to counter2" variable="tCounter2" value="counter2"></action>

            <action type="if" condition="counter >= (nScansOff+nScansOn) * (1+tTrialsDoneSinceStart)"> 
              <action type="assignment" tag="Log Speed of current Interval" variable="spCounter4" value="counter2 - tCounter2"></action>
              <action type="assignment" tag="reset tCounter2 to counter2" variable="tCounter2" value="counter2"></action>
            </action>

            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="timer_expired" target="speedCounter5" timer="speedTimer4"></transition>
            <transition type="conditional" tag="If nScansON, move to EndTrial" condition="counter >= (nScansOff+nScansOn) * (1+tTrialsDoneSinceStart)" target="EndTrial" ></transition>
          </task_system_state>

          <task_system_state tag="speedCounter5" interruptible="YES">
            <action_marker _unmoveable="1" tag="Actions"></action_marker>
            <action type="start_timer" tag="Start speedTimer5" timer="speedTimer5" timebase="" duration="speedTimerIntervalMs" duration_units="ms"></action>
            <action type="assignment" tag="Log Speed of previous Interval" variable="spCounter4" value="counter2 - tCounter2"></action>
            <action type="assignment" tag="reset tCounter2 to counter2" variable="tCounter2" value="counter2"></action>

            <action type="if" condition="counter >= (nScansOff+nScansOn) * (1+tTrialsDoneSinceStart)"> 
              <action type="assignment" tag="Log Speed of current Interval" variable="spCounter5" value="counter2 - tCounter2"></action>
              <action type="assignment" tag="reset tCounter2 to counter2" variable="tCounter2" value="counter2"></action>
            </action>

            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="timer_expired" target="speedCounter6" timer="speedTimer5"></transition>
            <transition type="conditional" tag="If nScansON, move to EndTrial" condition="counter >= (nScansOff+nScansOn) * (1+tTrialsDoneSinceStart)" target="EndTrial" ></transition>
          </task_system_state>

          <task_system_state tag="speedCounter6" interruptible="YES">
            <action_marker _unmoveable="1" tag="Actions"></action_marker>
            <action type="start_timer" tag="Start speedTimer6" timer="speedTimer6" timebase="" duration="speedTimerIntervalMs" duration_units="ms"></action>
            <action type="assignment" tag="Log Speed of previous Interval" variable="spCounter5" value="counter2 - tCounter2"></action>
            <action type="assignment" tag="reset tCounter2 to counter2" variable="tCounter2" value="counter2"></action>

            <action type="if" condition="counter >= (nScansOff+nScansOn) * (1+tTrialsDoneSinceStart)"> 
              <action type="assignment" tag="Log Speed of current Interval" variable="spCounter6" value="counter2 - tCounter2"></action>
              <action type="assignment" tag="reset tCounter2 to counter2" variable="tCounter2" value="counter2"></action>
            </action>

            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="timer_expired" target="speedCounter7" timer="speedTimer6"></transition>
            <transition type="conditional" tag="If nScansON, move to EndTrial" condition="counter >= (nScansOff+nScansOn) * (1+tTrialsDoneSinceStart)" target="EndTrial" ></transition>
          </task_system_state>

          <task_system_state tag="speedCounter7" interruptible="YES">
            <action_marker _unmoveable="1" tag="Actions"></action_marker>
            <action type="start_timer" tag="Start speedTimer7" timer="speedTimer7" timebase="" duration="speedTimerIntervalMs" duration_units="ms"></action>
            <action type="assignment" tag="Log Speed of previous Interval" variable="spCounter6" value="counter2 - tCounter2"></action>
            <action type="assignment" tag="reset tCounter2 to counter2" variable="tCounter2" value="counter2"></action>

            <action type="if" condition="counter >= (nScansOff+nScansOn) * (1+tTrialsDoneSinceStart)"> 
              <action type="assignment" tag="Log Speed of current Interval" variable="spCounter7" value="counter2 - tCounter2"></action>
              <action type="assignment" tag="reset tCounter2 to counter2" variable="tCounter2" value="counter2"></action>
            </action>

            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="timer_expired" target="speedCounter8" timer="speedTimer7"></transition>
            <transition type="conditional" tag="If nScansON, move to EndTrial" condition="counter >= (nScansOff+nScansOn) * (1+tTrialsDoneSinceStart)" target="EndTrial" ></transition>
          </task_system_state>

          <task_system_state tag="speedCounter8" interruptible="YES">
            <action_marker _unmoveable="1" tag="Actions"></action_marker>
            <action type="start_timer" tag="Start speedTimer8" timer="speedTimer8" timebase="" duration="speedTimerIntervalMs" duration_units="ms"></action>
            <action type="assignment" tag="Log Speed of previous Interval" variable="spCounter7" value="counter2 - tCounter2"></action>
            <action type="assignment" tag="reset tCounter2 to counter2" variable="tCounter2" value="counter2"></action>

            <action type="if" condition="counter >= (nScansOff+nScansOn) * (1+tTrialsDoneSinceStart)"> 
              <action type="assignment" tag="Log Speed of current Interval" variable="spCounter8" value="counter2 - tCounter2"></action>
              <action type="assignment" tag="reset tCounter2 to counter2" variable="tCounter2" value="counter2"></action>
            </action>

            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="timer_expired" target="speedCounter9" timer="speedTimer8"></transition>
            <transition type="conditional" tag="If nScansON, move to EndTrial" condition="counter >= (nScansOff+nScansOn) * (1+tTrialsDoneSinceStart)" target="EndTrial" ></transition>
          </task_system_state>

          <task_system_state tag="speedCounter9" interruptible="YES">
            <action_marker _unmoveable="1" tag="Actions"></action_marker>
            <action type="start_timer" tag="Start speedTimer9" timer="speedTimer9" timebase="" duration="speedTimerIntervalMs" duration_units="ms"></action>
            <action type="assignment" tag="Log Speed of previous Interval" variable="spCounter8" value="counter2 - tCounter2"></action>
            <action type="assignment" tag="reset tCounter2 to counter2" variable="tCounter2" value="counter2"></action>

            <action type="if" condition="counter >= (nScansOff+nScansOn) * (1+tTrialsDoneSinceStart)"> 
              <action type="assignment" tag="Log Speed of current Interval" variable="spCounter9" value="counter2 - tCounter2"></action>
              <action type="assignment" tag="reset tCounter2 to counter2" variable="tCounter2" value="counter2"></action>
            </action>

            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="timer_expired" target="speedCounter10" timer="speedTimer9"></transition>
            <transition type="conditional" tag="If nScansON, move to EndTrial" condition="counter >= (nScansOff+nScansOn) * (1+tTrialsDoneSinceStart)" target="EndTrial" ></transition>
          </task_system_state>

          <task_system_state tag="speedCounter10" interruptible="YES">
            <action_marker _unmoveable="1" tag="Actions"></action_marker>
            <action type="start_timer" tag="Start speedTimer10" timer="speedTimer10" timebase="" duration="speedTimerIntervalMs" duration_units="ms"></action>
            <action type="assignment" tag="Log Speed of previous Interval" variable="spCounter9" value="counter2 - tCounter2"></action>
            <action type="assignment" tag="reset tCounter2 to counter2" variable="tCounter2" value="counter2"></action>

            <action type="if" condition="counter >= (nScansOff+nScansOn) * (1+tTrialsDoneSinceStart)"> 
              <action type="assignment" tag="Log Speed of current Interval" variable="spCounter10" value="counter2 - tCounter2"></action>
              <action type="assignment" tag="reset tCounter2 to counter2" variable="tCounter2" value="counter2"></action>
            </action>

            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="timer_expired" target="speedCounterEnd" timer="speedTimer10"></transition>
            <transition type="conditional" tag="If nScansON, move to EndTrial" condition="counter >= (nScansOff+nScansOn) * (1+tTrialsDoneSinceStart)" target="EndTrial" ></transition>
          </task_system_state>

          <task_system_state tag="speedCounterEnd" interruptible="YES">
            <action_marker _unmoveable="1" tag="Actions"></action_marker>
            <action type="assignment" tag="Log Speed of previous Interval" variable="spCounter10" value="counter2 - tCounter2"></action>

            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="conditional" tag="If nScansON, move to EndTrial" condition="counter >= (nScansOff+nScansOn) * (1+tTrialsDoneSinceStart)" target="EndTrial" ></transition>
          </task_system_state>

          <task_system_state tag="EndTrial" interruptible="YES">
            <action_marker _unmoveable="1" tag="Actions"></action_marker>
            <action type="if" condition="doPhotodiode">
              <action tag="dequeue Stimulus" type="dequeue_stimulus" stimulus="photoDiodeGrating"></action>
              <action tag="Queue Stimulus" type="live_queue_stimulus" stimulus="photoDiodeMask"></action>
              <action type="play_dynamic_stimulus" stimulus="photoDiodeMask" tag="StimOn"></action>  
            </action>

            <action type="if" condition="doMovingDots != 1">
                <action type="if" condition="doAnnulusStim == 0">
                    <action type="if" condition="doGaussianMask == 1">
                        <action tag="Dequeue Stimulus 0" type="dequeue_stimulus" stimulus="target_grating_gaussian"></action>
                    </action>
                    <action type="if" condition="doEllipseMask == 1">
                        <action tag="Dequeue Stimulus 0" type="dequeue_stimulus" stimulus="target_grating_ellipse"></action>
                    </action>
                </action>
                <action type="if" condition="doAnnulusStim == 1">
                    <action type="if" condition="doEllipseMask == 1">
                        <action tag="Deueue Stimulus" type="dequeue_stimulus" stimulus="target_grating_annulus"></action>
                        <action tag="Dequeue Stimulus" type="dequeue_stimulus" stimulus="inner_mask"></action>
                        <action tag="Dequeue Stimulus" type="dequeue_stimulus" stimulus="target_grating_ellipse"></action>
                    </action>
                </action>
              <action tag="Queue Stimulus" type="live_queue_stimulus" stimulus="base_grating"></action>    
              <action type="play_dynamic_stimulus" stimulus="base_grating" tag="start"></action>
              <action tag="Update Stimulus" type="update_stimulus_display"></action>
            </action>

            <action type="assignment" tag="Log Speed of entire stim Interval" variable="tStimWheelCounter" value="counter2 - ttCounter2"></action>
            <!-- Must use next selection and reset selection here to move through rand/seq -->
            <action type="if" condition="doRand == 0 &amp;&amp; tNStimAccepted &lt; 89">
              <action type="next_selection" selection="svSeqStimNumber"/>
              <action type="assignment" variable="tNStimAccepted" value="tNStimAccepted + 1"></action>
            </action>
            <action type="if" condition="doRand == 0 &amp;&amp; tNStimAccepted &gt;= 89">
              <action type="reset_selection" selection="svSeqStimNumber"/>
              <action type="assignment" variable="tNStimAccepted" value="0"></action>
            </action>

            <action type="if" condition="doRand == 1 &amp;&amp; tNStimAccepted &lt; 89">
              <action type="next_selection" selection="svRandStimNumber"/>
              <action type="assignment" variable="tNStimAccepted" value="tNStimAccepted + 1"></action>
            </action>
            <action type="if" condition="doRand == 1 &amp;&amp; tNStimAccepted &gt;= 89">
              <action type="reset_selection" selection="svRandStimNumber"/>
              <action type="assignment" variable="tNStimAccepted" value="0"></action>
            </action>

            <action type="if" condition="optic_device == 'led'">
                <action type="assignment" variable="tTrialLaserPowerMw" value="0"></action>
            </action>
            <action type="assignment" variable="laserTrigger" value="0"></action>

            

            <action type="assignment" tag="End Matlab Sync" variable="sync" value="0"></action>
            

            <action type="assignment" tag="Encode END" variable="strobedDigitalWord" value="85"></action>
            <action type="assignment" tag="Encode END" variable="strobedDigitalWord" value="85"></action>
            <action type="assignment" tag="Encode END" variable="strobedDigitalWord" value="85"></action>

            <!-- trigger serial param dump to cyberkinetics -->
            <action type="assignment" tag="Send serial params" variable="sendSerialParams" value="1"></action>
            <action type="assignment" tag="Send serial params" variable="sendSerialParams" value="0"></action>
            
            <action type="assignment" variable="tTrialsDoneSinceStart" value="tTrialsDoneSinceStart+1"/>

            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="yield" tag="return to parent task system"></transition>
          </task_system_state>
          
        </task_system>
      </trial>
    </trial>
    <action tag="Stop IO Device" type="stop_device_IO" device="LabJackU6"></action>
  </protocol>
</experiment>
</monkeyml>

