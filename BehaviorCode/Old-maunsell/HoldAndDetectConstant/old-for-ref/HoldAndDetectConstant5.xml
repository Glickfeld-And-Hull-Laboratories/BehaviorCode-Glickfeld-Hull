<?xml version="1.0"?>
<monkeyml version="1.0">
    <io_devices tag="IO Devices">
        <iodevice tag="LabJackU6" priority="" type="LabJackU6" pulse_duration="juice" pulse_on="juice" lever_press="FIO1" alt="FakeMonkey" lever_solenoid="FIO2" 
		  laser_trigger="laserTriggerFIO" strobed_digital_word="strobedDigitalWord"></iodevice>
        <iodevice tag="FakeMonkey" priority="" type="fake_monkey" id="" alt="" spike_rate="10">
            -->
        </iodevice>
    </io_devices>
    <variables tag="Variables">
        <folder tag="Behavioral Control">
            <variable tag="subjectNum" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="experimentXmlTrialId" scope="global" logging="when_changed" default_value="10" type="integer" persistant="1"></variable>

            <variable tag="doLeverSolenoidAllTrials" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="doLeverSolenoidOnMiss" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="doLeverSolenoidOnEarly" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="tooFastTimeMs" scope="global" logging="when_changed" default_value="100" type="integer" persistant="1"></variable>
            <variable tag="randReqHoldMaxMs" scope="global" logging="when_changed" default_value="300" type="integer" persistant="1"></variable>
            <variable tag="fixedReqHoldTimeMs" scope="global" logging="when_changed" default_value="400" type="integer" persistant="1"></variable>
            <variable tag="reactTimeMs" scope="global" logging="when_changed" default_value="1000" type="integer" persistant="1"></variable>
            <variable tag="earlyTimeoutMs" scope="global" logging="when_changed" default_value="200" type="integer" persistant="1"></variable>
            <variable tag="missedTimeoutMs" scope="global" logging="when_changed" default_value="2000" type="integer" persistant="1"></variable>
            <variable tag="itiTimeMs" scope="global" logging="when_changed" default_value="750" type="integer" persistant="1"></variable>
            <variable tag="doExtendItiOnShortPrevTrial" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="postRewardMs" scope="global" logging="when_changed" default_value="500" type="integer" persistant="1"></variable>
            <variable tag="minRewardUs" scope="global" logging="when_changed" default_value="20000" type="integer" persistant="1"></variable>
            <variable tag="maxRewardUs" scope="global" logging="when_changed" default_value="20000" type="integer" persistant="1"></variable>
	    <variable tag="doRampDownReward" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="rampDownRewardTimeMs" scope="global" logging="when_changed" default_value="800" type="integer" persistant="1"></variable>
            <variable tag="earlyRewardUs" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="missedRewardUs" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="doTurnOffStimAtRampBottom" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="interRewardIntervalMs" scope="global" logging="when_changed" default_value="200" type="integer" persistant="1"></variable>
            <variable tag="maxConsecCorrects" scope="global" logging="when_changed" default_value="1" type="integer" persistant="1"></variable>
            <variable tag="jackpotProb" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="jackpotRewardSizeUs" scope="global" logging="when_changed" default_value="100000" type="integer" persistant="1"></variable>
        </folder>
        <folder tag="Stimuli">
            <variable tag="gratingDirectionDeg" scope="global" logging="when_changed" default_value="0" 
		      type="integer"></variable>
            <variable tag="gratingElevationDeg" scope="global" logging="when_changed" default_value="0" 
		      type="float" persistant="1"></variable>
            <variable tag="gratingAzimuthDeg" scope="global" logging="when_changed" default_value="0" 
		      type="float" persistant="1"></variable>
            <variable tag="gratingElevationDeg" scope="global" logging="when_changed" default_value="0" 
		      type="integer" persistant="1"></variable>
            <variable tag="gratingHeightDeg" scope="global" logging="when_changed" default_value="200" 
		      type="integer" persistant="1"></variable>
            <variable tag="gratingSpatialFreqCPD" scope="global" logging="when_changed" default_value="0.05" 
		      type="float" persistant="1"></variable>
            <variable tag="gratingSpeedDPS" scope="global" logging="when_changed" default_value="0" 
		      type="integer" persistant="1"></variable>
            <variable tag="gratingWidthDeg" scope="global" logging="when_changed" default_value="200" 
		      type="integer" persistant="1"></variable>

            <variable tag="doVisualStim" scope="global" logging="when_changed" default_value="1" type="integer" persistant="1"></variable>
            <variable tag="doLaserStim" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>

            <variable tag="gratingContrastMax" scope="global" logging="when_changed" default_value="1" type="float" persistant="1"></variable>
            <variable tag="gratingContrastStepsPerOctave" scope="global" logging="when_changed" default_value="2" type="float" persistant="1"></variable>

            <variable tag="laserPeakMaxMw" scope="global" logging="when_changed" default_value="20" type="integer" persistant="1"></variable>
            <variable tag="laserPeakStepsPerOctave" scope="global" logging="when_changed" default_value="2" type="integer" persistant="1"></variable>
            <variable tag="laserOffPowerMw" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="laserTransitionRampUpDownMs" scope="global" logging="when_changed" default_value="2" type="integer" persistant="1"></variable>

            <variable tag="laserDoLinearRamp" scope="global" logging="when_changed" default_value="1" type="integer" persistant="1"></variable>
            <variable tag="laserRampLengthMs" scope="global" logging="when_changed" default_value="100" type="integer" persistant="1"></variable>

            <variable tag="laserDoPulseTrain" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="laserPulseLengthMs" scope="global" logging="when_changed" default_value="5" type="integer" persistant="1"></variable>
            <variable tag="laserPulsePeriodMs" scope="global" logging="when_changed" default_value="20" type="integer" persistant="1"></variable>
            <variable tag="laserTrainLengthMs" scope="global" logging="when_changed" default_value="100" type="integer" persistant="1"></variable>

            <variable tag="stimulusLevel1" scope="global" logging="when_changed" default_value="0.01" type="float" persistant="1"></variable>
            <variable tag="stimulusLevel2" scope="global" logging="when_changed" default_value="0.02" type="float" persistant="1"></variable>
            <variable tag="stimulusLevel3" scope="global" logging="when_changed" default_value="0.04" type="float" persistant="1"></variable>
            <variable tag="stimulusLevel4" scope="global" logging="when_changed" default_value="0.08" type="float" persistant="1"></variable>
            <variable tag="stimulusLevel5" scope="global" logging="when_changed" default_value="0.16" type="float" persistant="1"></variable>

            <variable tag="trPer20Level1" scope="global" logging="when_changed" default_value="2" type="integer" persistant="1"></variable>
            <variable tag="trPer20Level2" scope="global" logging="when_changed" default_value="2" type="integer" persistant="1"></variable>
            <variable tag="trPer20Level3" scope="global" logging="when_changed" default_value="10" type="integer" persistant="1"></variable>
            <variable tag="trPer20Level4" scope="global" logging="when_changed" default_value="3" type="integer" persistant="1"></variable>
            <variable tag="trPer20Level5" scope="global" logging="when_changed" default_value="3" type="integer" persistant="1"></variable>

        </folder>
        <folder tag="Fake Mouse">
            <variable tag="doLever" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1"></variable>
            <variable tag="fakeMouseMaxPressMs" scope="global" logging="when_changed" default_value="300" type="integer" persistant="1"></variable>
            <variable tag="fakeMouseMaxReactMs" scope="global" logging="when_changed" default_value="5000" type="integer" persistant="1"></variable>
        </folder>
        <folder tag="Task Status">
            <variable tag="failure" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="leverResult" scope="global" logging="when_changed" default_value="0" type="boolean"></variable>
            <variable tag="stimulusOn" scope="global" logging="when_changed" default_value="0" type="boolean"></variable>
            <variable tag="success" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="ignore" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="trialStart" scope="global" logging="when_changed" default_value="0" type="boolean"></variable>
            <variable tag="pressTimestampMs" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"></variable>
            <variable tag="actualHoldTimeMs" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"></variable>
        </folder>
        <folder tag="Online Display">
            <variable tag="sync" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
        </folder>
        <folder tag="Hardware variables">
            <variable tag="FIO1" full_name="FIO1" default_value="0" scope="GLOBAL" type="INTEGER" editable="never" logging="when_changed"></variable>
            <variable tag="FIO2" full_name="FIO2" default_value="0" scope="GLOBAL" type="boolean" editable="never" logging="when_changed"></variable>
            <variable tag="laserTriggerFIO" full_name="laserTriggerFIO" default_value="0" scope="GLOBAL" type="boolean" logging="when_changed" persistant="0"></variable>
            <variable tag="strobedDigitalWord" full_name="strobedDigitalWord" default_value="0" scope="GLOBAL" type="integer" logging="when_changed" persistant="0"></variable>
            <variable tag="juice" full_name="juice" scope="GLOBAL" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="sendLaserParams" full_name="sendLaserParams" scope="GLOBAL" logging="when_changed" default_value="0" type="integer" persistant="0"></variable>
            <variable tag="sendSerialParams" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"></variable>
        </folder>
        <folder tag="Internal Variables">
            <variable tag="tTotalReqHoldTimeMs" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="tTotalRewardTimeUs" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="tRandReqHoldTimeMs" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="tFakeMouseReactMs" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="consecCorrects" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="tNRewards" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="tInterRewardIntervalMs" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="tRewardAddPerMsHoldUs" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="tIsJackpot" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="tActualHoldRelMs" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="tStimTurnedOn" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
	    <variable tag="tItiWaitTimeMs" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
	    <variable tag="tThisTrialStartTimeMs" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
	    <variable tag="tLastTrialStartTimeMs" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
	    <variable tag="lastActualHoldTimeMs" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
	    <variable tag="tempMs" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
	    <variable tag="rrStimulusNumber" scope="local" logging="when_changed" default_value="0" type="integer" persistant="0"></variable>
            <variable tag="tStimulusNumberDecimated" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"></variable>
            <variable tag="tStimIntensity" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"></variable>
	    <variable tag="tLaserPowerMw" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"></variable>
	    <variable tag="tGratingContrast" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"></variable>
        </folder>
        <folder tag="Old Variables: delete on changing XML name: values don't do anything">
            <variable tag="doVisualNotChR2" scope="global" logging="when_changed" default_value="-100" type="integer" persistant="1"></variable>
            <variable tag="doWaitForUp" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="doHoldTone" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="holdRepeatIntervalMs" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="forceMinStimStepTo" scope="global" logging="when_changed" default_value="-1" type="float" persistant="1"></variable>
            <variable tag="stimulusNSteps" scope="global" logging="when_changed" default_value="8" type="integer" persistant="1"></variable>
            <variable tag="stimulusStepsDecimateBy" scope="global" logging="when_changed" default_value="8" type="integer" persistant="1"></variable>
        </folder>
    </variables>
    <sounds tag="Sounds">
        <sound tag="louderPressSound" type="wav_file" path="../wavs/louderFlatterPress.wav"></sound>
        <sound tag="waitingForLeverSound" type="wav_file" path="../wavs/trialStart-F10e-short.wav"></sound>
        <sound tag="correctSound" type="wav_file" path="../wavs/shortCorrect.wav"></sound>
        <sound tag="incorrectSound" type="wav_file" path="../wavs/incorrectMouse.wav"></sound>
        <sound tag="holdSound" type="wav_file" path="../wavs/quietHold.wav"></sound>
        <sound tag="rewardSound" type="wav_file" path="../wavs/shortCorrect.wav"></sound>
    </sounds>
    <stimuli tag="Stimuli">
        <stimulus type="rectangle" tag="topRect" color="0.5,0.5,0.5" 
		  x_size="gratingWidthDeg" y_size="gratingHeightDeg" 
		  x_position="0" y_position="0" rotation="0" 
		  alpha_multiplier="1.0-tGratingContrast"></stimulus>
        <stimulus type="blank_screen" tag="background" color="0.5,0.5,0.5"></stimulus>
	<stimulus type="drifting_grating" tag="driftStimulus" 
		  frames_per_second="10" direction="0" starting_phase="0" 
		  spatial_frequency="gratingSpatialFreqCPD" 
		  speed="gratingSpeedDPS" 
		  grating_type="sinusoid" mask="gaussian" std_dev="0.3" mean="0.1" 
		  x_size="gratingWidthDeg" y_size="gratingHeightDeg" 
		  x_position="gratingAzimuthDeg" y_position="gratingElevationDeg" 
		  rotation="gratingDirectionDeg" 
		  alpha_multiplier="1.0"></stimulus>
    </stimuli>
    <experiment tag="Experiment" full_name="DigitalInExample">
        <protocol tag="JuiceOnHoldProtocol" full_name="Protocol" interruptable="YES" selection="sequential_ascending" nsamples="1" sampling_method="cycles" description="" interruptible="YES">
            <action tag="Queue Stimulus" type="queue_stimulus" stimulus="background"></action>
            <action tag="Update Stimulus 3" type="update_stimulus_display"></action>
            <action type="assignment" tag="consecCorrects = 0" variable="consecCorrects" value="0"></action>
            <action type="assignment" tag="-" variable="tLastTrialStartTimeMs" value="-1"></action>
            <action type="assignment" tag="-" variable="tThisTrialStartTimeMs" value="-1"></action>
            <action type="assignment" tag="-" variable="lastActualHoldTimeMs" value="0"></action>
            <action type="assignment" tag="juice = 0" variable="juice" value="0"></action>

            <block tag="New Block" nsamples="99999" sampling_method="cycles" selection="sequential" interruptible="1">
            <trial tag="Trial" full_name="Trial" description="" interruptible="1" selection="sequential" nsamples="1" sampling_method="cycles">
            <trial tag="New List" nsamples="20" sampling_method="samples" selection="random_without_replacement">
            <range_replicator tag="New Replicator" from="0" to="19" step="1" variable="rrStimulusNumber">  <!-- must set 'to' here and nsamples above  to stimulusNSteps-1 manually!-->
                <task_system tag="TS" full_name="TS" interruptable="YES" description="" interruptible="YES" _error="Task Systems must contain >=1 transition that yields to parent">
                    <task_system_state tag="Intertrial" interruptible="YES">
                        <action_marker _unmoveable="1" tag="Actions"></action_marker>
			
			<action type="assignment" tag="Encode START" variable="strobedDigitalWord" value="170"></action>
			<action type="assignment" tag="Encode START" variable="strobedDigitalWord" value="170"></action>
			<action type="assignment" tag="Encode START" variable="strobedDigitalWord" value="170"></action>

                        <action type="assignment" tag="Sync Matlab" variable="sync" value="1"></action>
                        <action type="assignment" tag="Set trialStart" variable="trialStart" value="1"></action>
                        <action type="assignment" tag="juice = 0" variable="juice" value="0"></action>
                        <action type="assignment" tag="leverResult = 0" variable="leverResult" value="0"></action>
			<action type="assignment" tag="-" variable="laserTriggerFIO" value="0"></action>
                        <action type="assignment" tag="-" variable="lastActualHoldTimeMs" value="actualHoldTimeMs"></action>
                        <action type="assignment" tag="-" variable="experimentXmlTrialId" value="10"></action>

			<!-- choose correct stimulus number based on odds -->
                        <action type="if" tag="-" condition="rrStimulusNumber >= 0 &amp;&amp; rrStimulusNumber &lt; trPer20Level1"> 
                          <action type="assignment" tag="-" variable="tStimulusNumberDecimated" value="0"></action> 
                        </action>
                        <action type="if" tag="-" condition="rrStimulusNumber >= trPer20Level1 
                                                             &amp;&amp; rrStimulusNumber &lt; (trPer20Level1+trPer20Level2)"> 
                          <action type="assignment" tag="-" variable="tStimulusNumberDecimated" value="1"></action> 
                        </action>
                        <action type="if" tag="-" condition="rrStimulusNumber >= (trPer20Level1+trPer20Level2)
                                                             &amp;&amp; rrStimulusNumber &lt; (trPer20Level1+trPer20Level2+trPer20Level3)"> 
                          <action type="assignment" tag="-" variable="tStimulusNumberDecimated" value="2"></action> 
                        </action>
                        <action type="if" tag="-" condition="rrStimulusNumber >= (trPer20Level1+trPer20Level2+trPer20Level3)
                                                             &amp;&amp; rrStimulusNumber &lt; (trPer20Level1+trPer20Level2+trPer20Level3+trPer20Level4)"> 
                          <action type="assignment" tag="-" variable="tStimulusNumberDecimated" value="3"></action> 
                        </action>
                        <action type="if" tag="-" condition="rrStimulusNumber >= (trPer20Level1+trPer20Level2+trPer20Level3+trPer20Level4)
                                                             &amp;&amp; rrStimulusNumber &lt; (trPer20Level1+trPer20Level2+trPer20Level3+trPer20Level4+trPer20Level5)"> 
                          <action type="assignment" tag="-" variable="tStimulusNumberDecimated" value="4"></action> 
                        </action>

                        <!-- lookup intensity -->
                        <action type="if" tag="-" condition="tStimulusNumberDecimated==0">
                          <action type="assignment" tag="-" variable="tStimIntensity" value="stimulusLevel1"></action> 
                        </action>
                        <action type="if" tag="-" condition="tStimulusNumberDecimated==1">
                          <action type="assignment" tag="-" variable="tStimIntensity" value="stimulusLevel2"></action> 
                        </action>
                        <action type="if" tag="-" condition="tStimulusNumberDecimated==2">
                          <action type="assignment" tag="-" variable="tStimIntensity" value="stimulusLevel3"></action> 
                        </action>
                        <action type="if" tag="-" condition="tStimulusNumberDecimated==3">
                          <action type="assignment" tag="-" variable="tStimIntensity" value="stimulusLevel4"></action> 
                        </action>
                        <action type="if" tag="-" condition="tStimulusNumberDecimated==4">
                          <action type="assignment" tag="-" variable="tStimIntensity" value="stimulusLevel5"></action> 
                        </action>

                        <action type="if" tag="-" condition="doLaserStim">
			  <action type="assignment" tag="-" variable="tLaserPowerMw" value="tStimIntensity"></action> 
                          <action type="assignment" tag="Send laser params to controller" variable="sendLaserParams" value="1"></action>
                          <action type="assignment" tag="Send laser params to controller" variable="sendLaserParams" value="0"></action>
			  <action type="report" tag="-" message="Laser power this trial is $tLaserPowerMw"></action>
                        </action>
                        <action type="if" tag="-" condition="doVisualStim"> 
			  <action type="assignment" tag="-" variable="tGratingContrast" value="tStimIntensity*1.0"></action>
			  <action type="report" tag="-" message="Grating contrast this trial is $tGratingContrast"></action>
                        </action>

                        <action tag="Start IO Device" type="start_device_IO" device="LabJackU6"></action>

			<!-- initialize trial start/end times -->
			<action type="if" tag="-" condition="tThisTrialStartTimeMs == -1">  
			  <!--first trial, leave lasttime as -1 -->
			  <action type="assignment" tag="-" variable="tLastTrialStartTimeMs" value="-1"></action>
			</action>
                        <action type="if" tag="-" condition="tThisTrialStartTimeMs != -1">  <!--else-->
			  <!--later trials, copy this into last before setting this again below -->
			  <action type="assignment" tag="-" variable="tLastTrialStartTimeMs" value="tThisTrialStartTimeMs"></action>
			</action>
			<action type="assignment" tag="-" variable="tThisTrialStartTimeMs" value="now()/1000"></action>

			<!-- compute ITI time -->
			<!-- initialize with a const value -->
			<action type="assignment" tag="default fixed ITI length" 
				variable="tItiWaitTimeMs" 
				value="itiTimeMs"></action>
			<!-- extend based on previous hold and max stim time, if asked for -->
			<action type="if" tag="-" condition="doExtendItiOnShortPrevTrial == 1">  
			  <action type="assignment" tag="-" variable="tempMs"  
				  value="(fixedReqHoldTimeMs+randReqHoldMaxMs)-lastActualHoldTimeMs"></action> 
			  <action type="if" tag="-" condition="tempMs > 0">
			    <!--add to ITI-->
			    <action type="assignment" tag="-"
				variable="tItiWaitTimeMs" value="tItiWaitTimeMs+tempMs"></action>
			  </action>
			</action>

                        <action type="start_timer" tag="Start interTrialTimer" timer="interTrialTimer" 
				timebase="" duration="tItiWaitTimeMs" duration_units="ms"></action>
                        <action type="assignment" tag="Clear stimulusOn" variable="stimulusOn" value="0"></action>
                        <action type="assignment" tag="Compute tIsJackpot" variable="tIsJackpot" value="rand(0,1000) &lt; jackpotProb*1000"></action>
                        <action type="assignment" tag="Encode ItiStart" variable="strobedDigitalWord" value="6"></action>
                        <action type="if" tag="if doLeverSolenoidAllTrials" condition="doLeverSolenoidAllTrials">
                            <!-- Turn on solenoid for ITI only if doLS is true, not if doLSErrorsOnly -->
                            <action type="assignment" tag="lever Solenoid on" variable="FIO2" value="1"></action>
                            <action type="assignment" tag="Encode LeverSolenoidOn" variable="strobedDigitalWord" value="12"></action>
                        </action>
                        <action type="report" tag="-" message="In ITI, waiting for $tItiWaitTimeMs ms"></action>                        

                        <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                        <transition type="timer_expired" tag="If Expired, Go To StartTrial" target="StartTrial" timer="interTrialTimer"></transition>
                    </task_system_state>

                    <task_system_state tag="StartTrial" full_name="" description="" interruptible="YES">
                        <action type="if" tag="if doLeverSolenoid/ErrorsOnly" condition="doLeverSolenoidAllTrials || doLeverSolenoidOnMiss || doLeverSolenoidOnEarly">
                            <!-- Lower solenoid at beginning of trial for any solenoid -->
                            <action type="assignment" tag="lever Solenoid off" variable="FIO2" value="0"></action>
                            <action type="assignment" tag="Encode LeverSolenoidOff" variable="strobedDigitalWord" value="13"></action>
                        </action>
                        <action tag="Play waitingForLeverSound" type="play_sound" sound="waitingForLeverSound"></action>

                        <action type="assignment" tag="Encode StartTrialWaitForPress" variable="strobedDigitalWord" value="7"></action>

                        <action type="if" tag="if fakeMouse" condition="!doLever">
                            <action type="start_timer" tag="Start Fake Mouse Press Timer" timer="fakeMousePressTimer" timebase="" duration="rand(0, fakeMouseMaxPressMs)" duration_units="ms"></action>
                        </action>
                        <action type="if" tag="if !fakeMouse" condition="doLever">
                            <action type="start_timer" tag="Start Fake Mouse Press Timer infinite" timer="fakeMousePressTimer" timebase="" duration="100000" duration_units="ms"></action>
                        </action>

                        <transition type="conditional" tag="If Lever Down, Go To Hold Lever" condition="FIO1 == 1" target="HoldLever"></transition>
                        <transition type="timer_expired" tag="If fakeMousePress expired, go to HoldLever" target="HoldLever" timer="fakeMousePressTimer"></transition>
                    </task_system_state>

                    <task_system_state tag="HoldLever" interruptible="YES">
                        <action_marker _unmoveable="1" tag="Actions"></action_marker>
			<action tag="p" type="play_sound" sound="louderPressSound"></action>
                        <action type="assignment" tag="leverResult = 1" variable="leverResult" value="1"></action>
                        <action type="assignment" tag="set pressTimestampMs" variable="pressTimestampMs" value="now()/1000"></action>

			<action type="assignment" tag="Encode LeverPressStart" variable="strobedDigitalWord" value="3"></action>

                        <action type="assignment" tag="Assign tRandReqHoldTimeMs" variable="tRandReqHoldTimeMs" value="rand(0,randReqHoldMaxMs)"></action>
                        <action type="assignment" tag="Assign tTotalReqHoldTimeMs" variable="tTotalReqHoldTimeMs" value="fixedReqHoldTimeMs + tRandReqHoldTimeMs"></action>

                        <action type="if" tag="if fakeMouse" condition="!doLever">
                            <action type="assignment" tag="Assign tFakeMouseReactMs" variable="tFakeMouseReactMs" value="rand(0, fakeMouseMaxReactMs)"></action>
                            <action type="start_timer" tag="Start Fake Mouse Timer" timer="fakeMouseTimer" timebase="" duration="tFakeMouseReactMs" duration_units="ms"></action>
                            <action tag="Report FakeMouseTimer" full_name="Report Press" type="report" message="fake mouse to react in $tFakeMouseReactMs ms"></action>
                        </action>
                        <action type="if" tag="if ! fakeMouse" condition="doLever">
                            <action type="start_timer" tag="Start fakeMouseTimer infinite" timer="fakeMouseTimer" timebase="" duration="100000" duration_units="ms"></action>
                        </action>
                        <action type="start_timer" tag="Start LeverHold Timer" timer="leverHoldTimer" timebase="" duration="tTotalReqHoldTimeMs" duration_units="ms"></action>
                        <action tag="Report LeverDown" full_name="ReportDigital" type="report" message="LeverDown (need to hold for $tTotalReqHoldTimeMs + tooFastTime ms)"></action>
                        <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                        <transition type="conditional" tag="If Lever Up, Go To EarlyRelease" condition="FIO1 == 0 &amp;&amp; doLever == 1" target="EarlyRelease"></transition>
                        <transition type="timer_expired" tag="If fakeMouseTimer expired, go to EarlyRelease" target="EarlyRelease" timer="fakeMouseTimer"></transition>
                        <transition type="timer_expired" tag="If leverHoldTimer Expired, Go To StimOn" target="StimOn" timer="leverHoldTimer"></transition>
                    </task_system_state>

                    <task_system_state tag="StimOn" interruptible="YES">
                        <action_marker _unmoveable="1" tag="Actions"></action_marker>
                        <action type="assignment" tag="Set StimulusOn" variable="stimulusOn" value="1"></action>
                        <action tag="Report StimOn" full_name="ReportDigital" type="report" message="StimOn (still holding; signaling release ok)"></action>
                        <action type="start_timer" tag="Start Too Fast Timer" timer="tooFastTimer" timebase="" duration="tooFastTimeMs" duration_units="ms"></action>
                        <action type="start_timer" tag="Start React Timer" timer="reactTimeTimer" timebase="" duration="reactTimeMs" duration_units="ms"></action>

                        <action type="if" tag="-" condition="doVisualStim">
			  <action tag="Queue Stimulus" type="queue_stimulus" stimulus="driftStimulus"></action>
			  <action tag="Queue Stimulus" type="queue_stimulus" stimulus="topRect"></action>    
			  <action type="play_dynamic_stimulus" stimulus="driftStimulus" tag="start"></action>

                          <action tag="Update Display" type="update_stimulus_display"></action>
                          <action type="assignment" tag="Encode VisStimOn" variable="strobedDigitalWord" value="4"></action>
                          <action type="assignment" tag="-" variable="tStimTurnedOn" value="1"></action>
                        </action>
                        <action type="if" tag="-" condition="doLaserStim">
                          <action type="assignment" tag="-" variable="laserTriggerFIO" value="1"></action> 
                          <action type="assignment" tag="Encode LaserStimOn" variable="strobedDigitalWord" value="5"></action>
                        </action>

                        <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                        <transition type="direct" tag="Always Go to CheckTooFastTime" target="CheckTooFastTime"></transition>
                    </task_system_state>

                    <task_system_state tag="CheckTooFastTime" interruptible="YES">
                        <action_marker _unmoveable="1" tag="Actions"></action_marker>
                        <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                        <transition type="timer_expired" tag="if tooFastTimer expired, go to React" target="React" timer="tooFastTimer"></transition>
                        <transition type="conditional" tag="If LeverUp, go to EarlyRelease" condition="FIO1 == 0 &amp;&amp; doLever == 1" target="EarlyRelease"></transition>
                        <transition type="timer_expired" tag="If fakeMouseTimer expired, go to EarlyRelease" target="EarlyRelease" timer="fakeMouseTimer"></transition>
                    </task_system_state>

                    <task_system_state tag="React" interruptible="YES">
                        <action_marker _unmoveable="1" tag="Actions"></action_marker>

			<!-- turn off stimulus if longer than minAgain -->			
                        <action type="if" tag="-" condition="doTurnOffStimAtRampBottom == 1">
			  <action type="if" tag="-" condition="tStimTurnedOn == 1">  <!-- so we only turn it off once here -->
			    <action type="if" tag="-" condition="(((now()/1000) - pressTimestampMs) - tTotalReqHoldTimeMs) > rampDownRewardTimeMs">
			      <action tag="-" type="dequeue_stimulus" stimulus="driftStimulus"></action>
			      <action tag="-" type="dequeue_stimulus" stimulus="topRect"></action>
			      <action tag="-" type="update_stimulus_display"></action>
			      <action type="assignment" tag="-" variable="tStimTurnedOn" value="0"></action>
			    </action>
			  </action>
			</action>

                        <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                        <transition type="conditional" tag="If Lever Up, Go To Reward" condition="FIO1 == 0 &amp;&amp; doLever == 1" target="Reward"></transition>
                        <transition type="timer_expired" tag="If fakeMouse expired, Transition to Reward" target="Reward" timer="fakeMouseTimer"></transition>
                        <transition type="timer_expired" tag="If React Time Expired, Go To Missed" target="Missed" timer="reactTimeTimer"></transition>
                        <transition type="direct" tag="-" target="React"></transition> <!-- spin on this state to turn off stim if necessary -->
                    </task_system_state>

                    <task_system_state tag="EarlyRelease" interruptible="YES">
                        <action_marker _unmoveable="1" tag="Actions"></action_marker>
                        <action type="assignment" tag="leverResult = 0" variable="leverResult" value="0"></action>

                        <action type="assignment" tag="Encode LeverReleaseEarly" variable="strobedDigitalWord" value="8"></action>

                        <action type="assignment" tag="-" variable="actualHoldTimeMs" value=" (now()/1000) - pressTimestampMs"></action>
                        <action type="report" tag="Report" message="actualHoldTimeMs = $actualHoldTimeMs"></action>
                        <action tag="ReportEarlyRelease" full_name="ReportDigital" type="report" message="** Early Release (FIO1 = $FIO1 )"></action>
                        <action type="assignment" tag="failure++" variable="failure" value="failure+1"></action>
                        <action type="assignment" tag="consecCorrects = 0" variable="consecCorrects" value="0"></action>
			
			<action tag="Play incorrectSound" type="play_sound" sound="incorrectSound"></action>

			<!-- give an early reward if nonzero -->
			<action type="if" tag="-" condition="earlyRewardUs > 0">
			  <action type="assignment" tag="Give reward" variable="juice" value="earlyRewardUs"></action>
			</action>

                        <action type="if" tag="if doLeverSolenoid/Early" condition="doLeverSolenoidAllTrials || doLeverSolenoidOnEarly">
                            <action type="assignment" tag="lever Solenoid on" variable="FIO2" value="1"></action>
                            <action type="assignment" tag="Encode LeverSolenoidOn" variable="strobedDigitalWord" value="12"></action>
                        </action>
                        <action tag="Dequeue Stimulus 0" type="dequeue_stimulus" stimulus="driftStimulus"></action>
			<action tag="-" type="dequeue_stimulus" stimulus="topRect"></action>
                        <action tag="Update Stimulus 2" type="update_stimulus_display"></action>
                        <action type="start_timer" tag="Start earlyTimeoutTimer" timer="earlyTimeoutTimer" timebase="" duration="earlyTimeoutMs" duration_units="ms"></action>
                        <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                        <transition type="timer_expired" tag="If earlyTimeoutTimer expired go to EndTrial" target="EndTrial" timer="earlyTimeoutTimer"></transition>
                    </task_system_state>

                    <task_system_state tag="Reward" interruptible="YES">
                        <action_marker _unmoveable="1" tag="Actions"></action_marker>
                        <action type="assignment" tag="leverResult = 0" variable="leverResult" value="0"></action>

                        <action type="assignment" tag="Encode LeverReleaseCorrect" variable="strobedDigitalWord" value="9"></action>

                        <action type="assignment" tag="-" variable="actualHoldTimeMs" value=" (now()/1000) - pressTimestampMs"></action>
                        <action type="report" tag="Report" message="actualHoldTimeMs = $actualHoldTimeMs"></action>
                        <action tag="Report Reward" full_name="ReportDigital" type="report" message="** Success"></action>
                        <action type="assignment" tag="success++" variable="success" value="success+1"></action>

		        <!-- assign reward size based on elapsed rand if rampdown == 0 -->
                        <action type="if" tag="if doa" condition="doRampDownReward == 0">
			  <action type="assignment" tag="Compute tRewardAddPerMsHoldUs" variable="tRewardAddPerMsHoldUs" 
				  value="(maxRewardUs - minRewardUs) / ( randReqHoldMaxMs )"></action>
			  <action type="assignment" tag="Assign tTotalRewardTimeUs" variable="tTotalRewardTimeUs" 
				  value="minRewardUs + ( tRewardAddPerMsHoldUs * tRandReqHoldTimeMs )"></action>
			</action>

			<!-- do ramp down reward if rampdown == 1; reset tTotalRewardTimeUs from above -->
                        <action type="if" tag="-" condition="doRampDownReward == 1">
			  <action type="assignment" tag="Compute tRewardAddPerMsHoldUs" variable="tRewardAddPerMsHoldUs" 
				  value="- (maxRewardUs - minRewardUs) / ( rampDownRewardTimeMs )"></action>
			  <!-- scale based on hold time -->
			  <action type="assignment" tag="-" variable="tActualHoldRelMs"
				  value="actualHoldTimeMs - tTotalReqHoldTimeMs"></action>
			  <action type="assignment" tag="-" variable="tTotalRewardTimeUs" 
				    value="maxRewardUs + (tActualHoldRelMs * tRewardAddPerMsHoldUs)"></action> <!--actually a subtraction see above -->
			  <!-- hack - force to min if too long-->
			  <action type="if" tag="-" condition="tActualHoldRelMs > rampDownRewardTimeMs">
			    <action type="assignment" tag="-" variable="tTotalRewardTimeUs" 
				    value="minRewardUs"></action>
			  </action>
			</action>

			<!-- scale based on consec corrects -->
                        <action type="if" tag="if consecCorrects &lt; max" condition="consecCorrects &lt; maxConsecCorrects">
                            <action type="assignment" tag="consecCorrects++" variable="consecCorrects" value="consecCorrects+1"></action>
                        </action>
                        <action type="assignment" tag="set tNRewards" variable="tNRewards" value="consecCorrects"></action>

                        <action tag="Dequeue Stimulus 2" type="dequeue_stimulus" stimulus="driftStimulus"></action>
			<action tag="-" type="dequeue_stimulus" stimulus="topRect"></action>
                        <action tag="Update Stimulus 5" type="update_stimulus_display"></action>
                        <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                        <transition type="direct" tag="Always Go to GiveReward" target="GiveReward"></transition>
                    </task_system_state>

                    <task_system_state tag="GiveReward" interruptible="YES">
                        <action_marker _unmoveable="1" tag="Actions"></action_marker>
                        <action type="assignment" tag="tNRewards--" variable="tNRewards" value="tNRewards-1"></action>
                        <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                        <transition type="conditional" tag="if rewards remain, go to SingleReward (note must be -1)" condition="tNRewards > -1" target="SingleReward"></transition>
                        <transition type="direct" tag="Always Go to PRP" target="PostRewardPause"></transition>
                    </task_system_state>

                    <task_system_state tag="PostRewardPause" interruptible="YES">
                        <action type="start_timer" tag="StartTimer" timer="postRewardTimer" timebase="" duration="postRewardMs" duration_units="ms"></action>
                        <action_marker _unmoveable="1" tag="Actions"></action_marker>
                        <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                        <transition type="timer_expired" tag="If timer expired, go to EndTrial" target="EndTrial" timer="postRewardTimer"></transition>
                    </task_system_state>

                    <task_system_state tag="SingleReward" interruptible="YES">
                        <action_marker _unmoveable="1" tag="Actions"></action_marker>
                        <action type="if" tag="if Jackpot" condition="tIsJackpot">
                            <action type="assignment" tag="Reward = jackpot" variable="tTotalRewardTimeUs" value="jackpotRewardSizeUs"></action>
                            <action tag="Report" full_name="ReportDigital" type="report" message="** Jackpot reward of $jackpotRewardSizeUs us"></action>
                        </action>
                        <action type="assignment" tag="interRewardInterval minimum to juiceTime" variable="tInterRewardIntervalMs" value="interRewardIntervalMs + ( tTotalRewardTimeUs / 1000 )"></action>
                        <action type="start_timer" tag="Start interRewardIntervalTimer" timer="interRewardIntervalTimer" timebase="" duration="tInterRewardIntervalMs" duration_units="ms"></action>
                        <action type="assignment" tag="Start reward" variable="juice" value="tTotalRewardTimeUs"></action>

                        <action type="assignment" tag="Encode Reward" variable="strobedDigitalWord" value="10"></action>
                        <action type="report" tag="Report" message="juice = $juice"></action>
                        <action tag="Play reward sound" type="play_sound" sound="rewardSound"></action>
                        <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                        <transition type="timer_expired" tag="If interRewardIntervalTimer expired, go to GiveReward" target="GiveReward" timer="interRewardIntervalTimer"></transition>
                    </task_system_state>

                    <task_system_state tag="Missed" interruptible="YES">
                        <action_marker _unmoveable="1" tag="Actions"></action_marker>
                        <action type="assignment" tag="leverResult = 0" variable="leverResult" value="0"></action>
                        <action type="assignment" tag="Encode LeverNoReleaseMiss" variable="strobedDigitalWord" value="11"></action>
                        <action type="assignment" tag="-" variable="actualHoldTimeMs" value=" (now()/1000) - pressTimestampMs"></action>
                        <action type="report" tag="Report" message="actualHoldTimeMs = $actualHoldTimeMs"></action>
                        <action type="assignment" tag="ignore++" variable="ignore" value="ignore + 1"></action>
                        <action type="assignment" tag="consecCorrects = 0" variable="consecCorrects" value="0"></action>
                        <action tag="Report 4" full_name="ReportDigital" type="report" message="** Ignored react stimulus"></action>
                        <action tag="Play incorrectSound 2" type="play_sound" sound="incorrectSound"></action>
			
			<!-- give a missed reward if nonzero -->
                        <action type="if" tag="if do reward" condition="missedRewardUs > 0">
			  <action type="assignment" tag="Give reward" variable="juice" value="missedRewardUs"></action>
			</action>

                        <action type="start_timer" tag="start timer" timer="missedTimeoutTimer" timebase="" duration="missedTimeoutMs" duration_units="ms"></action>
                        <action type="if" tag="if doLeverSolenoid/ErrorsOnly" condition="doLeverSolenoidAllTrials || doLeverSolenoidOnMiss">
                            <action type="assignment" tag="lever Solenoid on" variable="FIO2" value="1"></action>
                            <action type="assignment" tag="Encode LeverSolenoidOn" variable="strobedDigitalWord" value="12"></action>
                        </action>
                        <action tag="Dequeue Stimulus 1" type="dequeue_stimulus" stimulus="driftStimulus"></action>
			<action tag="-" type="dequeue_stimulus" stimulus="topRect"></action>
                        <action tag="Update Stimulus 4" type="update_stimulus_display"></action>
                        <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                        <transition type="timer_expired" tag="-" target="EndTrial" timer="missedTimeoutTimer"></transition>
                    </task_system_state>

                    <task_system_state tag="EndTrial" interruptible="YES">
                        <action_marker _unmoveable="1" tag="Actions"></action_marker>
			<action type="assignment" tag="-" variable="laserTriggerFIO" value="0"></action> <!-- disable trigger no matter if it went high or not -->

                        <action tag="Stop IO Device" type="stop_device_IO" device="LabJackU6"></action>
                        <action tag="Dequeue Stimulus 0" type="dequeue_stimulus" stimulus="driftStimulus"></action>
                        <action tag="Update Stimulus 2" type="update_stimulus_display"></action>
                        <action type="assignment" tag="End Matlab Sync" variable="sync" value="0"></action>

                        <action type="assignment" tag="Encode END" variable="strobedDigitalWord" value="85"></action>
                        <action type="assignment" tag="Encode END" variable="strobedDigitalWord" value="85"></action>
                        <action type="assignment" tag="Encode END" variable="strobedDigitalWord" value="85"></action>

                        <!-- trigger serial param dump to cyberkinetics -->
                        <action type="assignment" tag="Send serial params" variable="sendSerialParams" value="1"></action>
                        <action type="assignment" tag="Send serial params" variable="sendSerialParams" value="0"></action>

                        <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                        <transition type="yield" tag="return to parent task system"></transition>
                    </task_system_state>
                </task_system>
            </range_replicator>
            </trial>
            </trial>
            </block>
        </protocol>
    </experiment>
</monkeyml>

