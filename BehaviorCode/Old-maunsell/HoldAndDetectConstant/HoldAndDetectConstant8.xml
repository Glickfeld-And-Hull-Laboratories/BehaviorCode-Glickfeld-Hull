<?xml version="1.0"?>
<monkeyml version="1.0">
  <io_devices tag="IO Devices">
    <iodevice tag="LabJackU6" priority="" type="LabJackU6" 
      pulse_duration="juice" pulse_on="juice" 
      lever1="FIO1" 
      lever1_solenoid="MIO0"
      trial_laser_powerMw="tTrialLaserPowerMw"
      laser_trigger="laserTrigger"
      optic_device="optic_device"
      strobed_digital_word="strobedDigitalWord"/>
      <iodevice tag="FakeMonkey" priority="" type="fake_monkey" id="" alt="" spike_rate="10"/>
      <iodevice type="serverside_conduit" tag="Server-side Event Conduit" resource_name="server_conduit"/>
  </io_devices>
  <variables tag="Variables">
      <folder tag="Behavioral Control">
        <variable tag="subjectNum" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"/>
        <variable tag="experimentXmlTrialId" scope="global" logging="when_changed" default_value="8" type="integer" persistant="1"/> <!-- n.b. it is forcibly set each trial below -->

        <variable tag="optic_device" scope="global" logging="when_changed" default_value="led" type="string" persistant="1"/>
        <variable tag="doAnalogLever" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Task Type"/>

        <variable tag="doVisualStim" scope="global" logging="when_changed" default_value="1" type="integer" persistant="1" groups="Task Type"/>
        <variable tag="doLaserStim" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Laser Variables"/>
        <variable tag="doOriDetect" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Task Type"/>
        <variable tag="doContrastDetect" scope="global" logging="when_changed" default_value="1" type="integer" persistant="1" groups="Task Type"/>
        <variable tag="doSpeedDetect" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Task Type"/>
        <variable tag="doITIStim" scope="global" logging="when_changed" default_value="1" type="integer" persistant="1" groups="Task Type"/>
        <variable tag="itiContrast" scope="global" logging="when_changed" default_value="1" type="float" persistant="1" groups="Task Type"/>
        <variable tag="doNoStimulusChange" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="Task Type"/>
        <variable tag="doAllCorrects" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="Task Type"/>

        <variable tag="doLeverSolenoidAllTrials" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Solenoid"/>
        <variable tag="doLeverSolenoidOnMiss" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Solenoid"/>
        <variable tag="doLeverSolenoidOnEarly" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Solenoid"/>

        <variable tag="tooFastTimeMs" scope="global" logging="when_changed" default_value="100" type="integer" persistant="1" groups="Trial Structure"/>
        <variable tag="randReqHoldMaxMs" scope="global" logging="when_changed" default_value="300" type="integer" persistant="1" groups="Trial Structure"/>
        <variable tag="fixedReqHoldTimeMs" scope="global" logging="when_changed" default_value="400" type="integer" persistant="1" groups="Trial Structure"/>
        <variable tag="doGeomHoldDist" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Trial Structure"/>        
        <variable tag="geomHoldMeanMs" scope="global" logging="when_changed" default_value="1" type="integer" persistant="1" groups="Trial Structure"/>        
        <variable tag="reactTimeMs" scope="global" logging="when_changed" default_value="1000" type="integer" persistant="1" groups="Trial Structure"/>
        <variable tag="itiTimeMs" scope="global" logging="when_changed" default_value="750" type="integer" persistant="1" groups="Trial Structure"/>
        <variable tag="doExtendItiOnShortPrevTrial" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Trial Structure"/>

        <variable tag="doSolenoidOnTimeout" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="Timeouts"/>
        <variable tag="earlyTimeoutMs" scope="global" logging="when_changed" default_value="200" type="integer" persistant="1" groups="Timeouts"/>
        <variable tag="missedTimeoutMs" scope="global" logging="when_changed" default_value="2000" type="integer" persistant="1" groups="Timeouts"/>
        <variable tag="nConsecErrorsCauseTimeout" scope="global" logging="when_changed" default_value="10" type="integer" persistant="1" groups="Timeouts"/>
        <variable tag="consecErrorTimeoutS" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Timeouts"/>

        <variable tag="postRewardMs" scope="global" logging="when_changed" default_value="500" type="integer" persistant="1" groups="Reward"/>
        <variable tag="minRewardUs" scope="global" logging="when_changed" default_value="20000" type="integer" persistant="1" groups="Reward"/>
        <variable tag="maxRewardUs" scope="global" logging="when_changed" default_value="20000" type="integer" persistant="1" groups="Reward"/>
        <variable tag="interRewardIntervalMs" scope="global" logging="when_changed" default_value="200" type="integer" persistant="1" groups="Reward"/>
        <variable tag="maxConsecCorrects" scope="global" logging="when_changed" default_value="1" type="integer" persistant="1" groups="Reward"/>
        <variable tag="rewardEveryNCorrect" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Reward"/>

    </folder>
    <folder tag="Stimuli">
        <variable tag="baseGratingDirectionDeg" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Stimulus Parameters"/>
        <variable tag="baseGratingContrast" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Stimulus Parameters"/>
        <variable tag="baseGratingSpeedDPS" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Stimulus Parameters"/>
        <variable tag="gratingElevationDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Stimulus Parameters"/>
        <variable tag="gratingAzimuthDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Stimulus Parameters"/>
        <variable tag="gratingHeightDeg" scope="global" logging="when_changed" default_value="200" type="integer" persistant="1" groups="Stimulus Parameters"/>
        <variable tag="gratingWidthDeg" scope="global" logging="when_changed" default_value="200" type="integer" persistant="1" groups="Stimulus Parameters"/>
        <variable tag="gratingSpatialFreqCPD" scope="global" logging="when_changed" default_value="0.05" type="float" persistant="1" groups="Stimulus Parameters"/>
        <variable tag="gratingDurationMs" scope="global" logging="when_changed" default_value="800" type="integer" persistant="1" groups="Stimulus Parameters"/>
        <variable tag="gratingStartingPhaseDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Stimulus Parameters"/>

        <variable tag="gratingMaxContrastStep" scope="global" logging="when_changed" default_value="1" type="float" persistant="1" groups="Stimulus Parameters"/>
        <variable tag="gratingContrastStepsPerOctave" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Stimulus Parameters"/>
        <variable tag="gratingMaxDirectionStepDeg" scope="global" logging="when_changed" default_value="10" type="float" persistant="1" groups="Stimulus Parameters"/>
        <variable tag="gratingDirectionStepsPerOctave" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Stimulus Parameters"/>
        <variable tag="gratingMaxSpeedStepDPS" scope="global" logging="when_changed" default_value="10" type="float" persistant="1" groups="Stimulus Parameters"/>
        <variable tag="gratingSpeedStepsPerOctave" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Stimulus Parameters"/>

        <variable tag="trPer80Level1" scope="global" logging="when_changed" default_value="10" type="integer" persistant="1" groups="Stimulus Parameters"/>
        <variable tag="trPer80Level2" scope="global" logging="when_changed" default_value="10" type="integer" persistant="1" groups="Stimulus Parameters"/>
        <variable tag="trPer80Level3" scope="global" logging="when_changed" default_value="10" type="integer" persistant="1" groups="Stimulus Parameters"/>
        <variable tag="trPer80Level4" scope="global" logging="when_changed" default_value="10" type="integer" persistant="1" groups="Stimulus Parameters"/>
        <variable tag="trPer80Level5" scope="global" logging="when_changed" default_value="10" type="integer" persistant="1" groups="Stimulus Parameters"/>
        <variable tag="trPer80Level6" scope="global" logging="when_changed" default_value="10" type="integer" persistant="1" groups="Stimulus Parameters"/>
        <variable tag="trPer80Level7" scope="global" logging="when_changed" default_value="10" type="integer" persistant="1" groups="Stimulus Parameters"/>
        <variable tag="trPer80Level8" scope="global" logging="when_changed" default_value="10" type="integer" persistant="1" groups="Stimulus Parameters"/>

        <variable tag="soundPressAmplitude" scope="global" logging="when_changed" default_value="1" type="float" persistant="1" groups="Sound"/>
        <variable tag="soundBasePressAmplitude" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Sounds"/>
        <variable tag="soundCueAmplitude" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Sounds"/>
        <variable tag="soundTargetAmplitude" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Sounds"/>
        <variable tag="soundTrialStartAmplitude" scope="global" logging="when_changed" default_value="1" type="float" persistant="1" groups="Sound"/>

        <!-- block 2 control -->
        <variable tag="doBlock2" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Block2"/>

        <variable tag="doBlock2SeparateReward" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Block2 Reward"/>
        <variable tag="block2MinRewardUs" scope="global" logging="when_changed" default_value="20000" type="integer" persistant="1" groups="Block2 Reward"/>
        <variable tag="block2MaxRewardUs" scope="global" logging="when_changed" default_value="20000" type="integer" persistant="1" groups="Block2 Reward"/>

        <variable tag="block2DoGratingAppearance" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Block2 Stimulus"/>
        <variable tag="block2BaseGratingContrast" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Block2 Stimulus"/>
        <variable tag="block2BaseGratingDirectionDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Block2 Stimulus"/>
        <variable tag="block2BaseGratingSpeedDPS" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Block2 Stimulus"/>
        <variable tag="block2GratingElevationDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Block2 Stimulus"/>
        <variable tag="block2GratingAzimuthDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Block2 Stimulus"/>
        <variable tag="block2GratingHeightDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Block2 Stimulus"/>
        <variable tag="block2GratingWidthDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Block2 Stimulus"/>
        <variable tag="block2GratingSpatialFreqCPD" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Block2 Stimulus"/>
        <variable tag="block2GratingDurationMs" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Block2 Stimulus"/>

        <variable tag="block2GratingMaxContrastStep" scope="global" logging="when_changed" default_value="1" type="float" persistant="1" groups="Block2 Stimulus"/>
        <variable tag="block2GratingContrastStepsPerOctave" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Block2 Stimulus"/>
        <variable tag="block2GratingMaxDirectionStepDeg" scope="global" logging="when_changed" default_value="10" type="float" persistant="1" groups="Block2 Stimulus"/>
        <variable tag="block2GratingDirectionStepsPerOctave" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Block2 Stimulus"/>
        <variable tag="block2GratingMaxSpeedStepDPS" scope="global" logging="when_changed" default_value="10" type="float" persistant="1" groups="Block2 Stimulus"/>
        <variable tag="block2GratingSpeedStepsPerOctave" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Block2 Stimulus"/>

        <variable tag="doBlock2SeparateOdds" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Block2 Stimulus"/>
        <variable tag="block2TrPer80Level1" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Block2 Stimulus"/>
        <variable tag="block2TrPer80Level2" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Block2 Stimulus"/>
        <variable tag="block2TrPer80Level3" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Block2 Stimulus"/>
        <variable tag="block2TrPer80Level4" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Block2 Stimulus"/>
        <variable tag="block2TrPer80Level5" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Block2 Stimulus"/>
        <variable tag="block2TrPer80Level6" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Block2 Stimulus"/>
        <variable tag="block2TrPer80Level7" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Block2 Stimulus"/>
        <variable tag="block2TrPer80Level8" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Block2 Stimulus"/>

        <variable tag="block2DoTrialLaser" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Block2 Laser"/>
        <variable tag="block2TrialLaserPowerMw" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Block2 Laser"/>
        <variable tag="block2TrialLaserOnTimeMs" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Block2 Laser"/>
        <variable tag="block2TrialLaserOffTimeMs" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Block2 Laser"/>
        <variable tag="block2DoRampLength" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Block2 Advanced Laser"/>
        <variable tag="block2RampLengthMs2" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Block2 Advanced Laser"/>
        <variable tag="block2RampLengthPowerMaxMw2" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Block2 Advanced Laser"/>
        <variable tag="block2DoRampVTrain" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Block2 Advanced Laser"/>
        <variable tag="block2RvtTrainPowerMaxMw" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Block2 Advanced Laser"/>
        <variable tag="block2RvtTrainStepsPerOctave" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Block2 Advanced Laser"/>
        <variable tag="block2RvtRampBaselinePowerMw" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Block2 Advanced Laser"/>
        <variable tag="block2RvtTrainBaselinePowerMw" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Block2 Advanced Laser"/>
        <variable tag="doBlock2SecondLaser" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Block2 doBlock2SecondLaser Laser"/> 


        <!-- stimulus control parameters -->
        <variable tag="laserPeakMaxMw" scope="global" logging="when_changed" default_value="20" type="integer" persistant="1" groups="Advanced Laser Variables"/>
        <variable tag="laserPeakStepsPerOctave" scope="global" logging="when_changed" default_value="2" type="integer" persistant="1" groups="Advanced Laser Variables"/>
        <variable tag="laserOffPowerMw" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Advanced Laser Variables"/>
        <variable tag="laserTransitionRampUpDownMs" scope="global" logging="when_changed" default_value="2" type="integer" persistant="1" groups="Advanced Laser Variables"/>
        <variable tag="laserTransitionDoExpRamp" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Advanced Laser Variables"/>
        <variable tag="laserBaselinePowerMw" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Advanced Laser Variables"/>  <!-- 0: do not do baseline -->
        <variable tag="laserBaselinePostStimTimeMs" scope="global" logging="when_changed" default_value="500" type="float" persistant="1" groups="Advanced Laser Variables"/> 

        <variable tag="laserDoLinearRamp" scope="global" logging="when_changed" default_value="1" type="integer" persistant="1" groups="Advanced Laser Variables"/>
        <variable tag="laserRampLengthMs" scope="global" logging="when_changed" default_value="100" type="integer" persistant="1" groups="Advanced Laser Variables"/>
        <variable tag="laserRampExtraConstantLengthMs" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Advanced Laser Variables"/>
        <variable tag="laserRampDoExpRamp" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Advanced Laser Variables"/>
        <variable tag="laserDoPulseTrain" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Advanced Laser Variables"/>
        <variable tag="laserPulseLengthMs" scope="global" logging="when_changed" default_value="5" type="integer" persistant="1" groups="Advanced Laser Variables"/>
        <variable tag="laserPulsePeriodMs" scope="global" logging="when_changed" default_value="20" type="integer" persistant="1" groups="Advanced Laser Variables"/>
        <variable tag="laserTrainLengthMs" scope="global" logging="when_changed" default_value="100" type="integer" persistant="1" groups="Advanced Laser Variables"/>
        <variable tag="laserTrainRandomNPulses" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Advanced Laser Variables"/>
        <variable tag="laserTrainRandomType" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1" groups="Advanced Laser Variables"/> 

        <variable tag="trialLaserPowerMw" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Laser Variables"/>
        <variable tag="trialLaserOnTimeMs" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Laser Variables"/>
        <variable tag="trialLaserOffTimeMs" scope="global" logging="when_changed" default_value="0" type="float" persistant="1" groups="Laser Variables"/>

    </folder>
    <folder tag="Fake Mouse">
        <variable tag="doLever" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1" groups="Fake Mouse"/>
        <variable tag="fakeMouseMaxPressMs" scope="global" logging="when_changed" default_value="300" type="integer" persistant="1" groups="Fake Mouse"/>
        <variable tag="fakeMouseMaxReactMs" scope="global" logging="when_changed" default_value="5000" type="integer" persistant="1" groups="Fake Mouse"/>
    </folder>
    <folder tag="Task Status">
        <variable tag="failure" scope="global" logging="when_changed" default_value="0" type="integer"/>
        <variable tag="leverResult" scope="global" logging="when_changed" default_value="0" type="boolean"/>
        <variable tag="stimulusOn" scope="global" logging="when_changed" default_value="0" type="boolean"/>
        <variable tag="success" scope="global" logging="when_changed" default_value="0" type="integer"/>
        <variable tag="ignore" scope="global" logging="when_changed" default_value="0" type="integer"/>
        <variable tag="trialStart" scope="global" logging="when_changed" default_value="0" type="boolean"/>
        <variable tag="pressTimestampMs" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="actualHoldTimeMs" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>'

    </folder>
    <folder tag="Online Display">
        <variable tag="sync" scope="global" logging="when_changed" default_value="0" type="integer"/>
    </folder>
    <folder tag="Hardware variables">
        <variable tag="FIO1" full_name="FIO1" default_value="0" scope="GLOBAL" type="INTEGER" editable="never" logging="when_changed"/>
        <variable tag="MIO0" full_name="MIO0" default_value="0" scope="GLOBAL" type="boolean" editable="never" logging="when_changed"/>
        <variable tag="laserTrigger" full_name="laserTrigger" default_value="0" scope="GLOBAL" type="boolean" logging="when_changed" persistant="0"/>
        <variable tag="quadrature" full_name="quadrature" default_value="0" scope="GLOBAL" type="integer" editable="never" logging="when_changed" groups="Lever"/>
      <variable tag="leverThreshold" full_name="leverThreshold" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"  groups="Lever"/>
        <variable tag="strobedDigitalWord" full_name="strobedDigitalWord" default_value="0" scope="GLOBAL" type="integer" logging="when_changed" persistant="0"/>
        <variable tag="juice" full_name="juice" scope="GLOBAL" logging="when_changed" default_value="0" type="integer" groups="Reward"/>
        <variable tag="sendLaserParams" full_name="sendLaserParams" scope="GLOBAL" logging="when_changed" default_value="0" type="integer" persistant="0"/>
        <variable tag="sendSerialParams" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
    </folder>
    <folder tag="Internal Variables">
        <variable tag="tTrialStartMWTimestampMs" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
        <variable tag="tDoAllCorrects" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="0"/>
        <variable tag="tTotalReqHoldTimeMs" scope="global" logging="when_changed" default_value="0" type="integer"/>
        <variable tag="tTotalRewardTimeUs" scope="global" logging="when_changed" default_value="0" type="integer"/>
        <variable tag="tRandReqHoldTimeMs" scope="global" logging="when_changed" default_value="0" type="integer"/>
        <variable tag="tFakeMouseReactMs" scope="global" logging="when_changed" default_value="0" type="integer"/>
        <variable tag="tFakeMousePressMs" scope="global" logging="when_changed" default_value="0" type="integer"/>
        <variable tag="tStartTrialWaitForPressTimeMs" scope="global" logging="when_changed" default_value="0" type="integer"/>
        <variable tag="consecCorrects" scope="global" logging="when_changed" default_value="0" type="integer"/>
        <variable tag="tConsecErrors" scope="global" logging="when_changed" default_value="0" persistent="0" type="integer"/>
        <variable tag="tempNCorrect" scope="global" logging="when_changed" default_value="0" persistent="0" type="integer"/>
        <variable tag="tConsecTimeoutStartTime" scope="global" logging="when_changed" default_value="0" persistent="0" type="integer"/>
        <variable tag="tNRewards" scope="global" logging="when_changed" default_value="0" type="integer"/>
        <variable tag="tInterRewardIntervalMs" scope="global" logging="when_changed" default_value="0" type="integer"/>
        <variable tag="tRewardAddPerMsHoldUs" scope="global" logging="when_changed" default_value="0" type="integer"/>
        <variable tag="tStimTurnedOn" scope="global" logging="when_changed" default_value="0" type="integer"/>
        <variable tag="tItiWaitTimeMs" scope="global" logging="when_changed" default_value="0" type="integer"/>
        <variable tag="tThisTrialStartTimeMs" scope="global" logging="when_changed" default_value="0" type="integer"/>
        <variable tag="tLastTrialStartTimeMs" scope="global" logging="when_changed" default_value="0" type="integer"/>
        <variable tag="lastActualHoldTimeMs" scope="global" logging="when_changed" default_value="0" type="integer"/>
        <variable tag="tempMs" scope="global" logging="when_changed" default_value="0" type="integer"/>
        <variable tag="tTempStimOdds" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
        <variable tag="tStimulusNumber" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
        <variable tag="tSvStimNumber" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
        <variable tag="tLaserPowerMw" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tLaserDoLinearRamp" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
        <variable tag="tLaserDoPulseTrain" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
        <variable tag="tLaserRampLengthMs" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
        <variable tag="tLaserPeakMaxMw" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
        <variable tag="tLaserBaselinePowerMw" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tBaseGratingContrast" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="setBaseGratingContrast" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tBaseGratingDirectionDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tBaseGratingSpeedDPS" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tGratingMaxContrastStep" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tGratingContrastStepsPerOctave" scope="global" logging="when_changed" default_value="1" type="float" persistant="0"/>
        <variable tag="tGratingMaxDirectionStepDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tGratingDirectionStepsPerOctave" scope="global" logging="when_changed" default_value="1" type="float" persistant="0"/>
        <variable tag="tGratingMaxSpeedStepDPS" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tGratingSpeedStepsPerOctave" scope="global" logging="when_changed" default_value="1" type="float" persistant="0"/>
        <variable tag="tLaserPeakStepsPerOctave" scope="global" logging="when_changed" default_value="1" type="float" persistant="0"/>

        <variable tag="tGratingDirectionDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tGratingContrast" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tGratingElevationDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tGratingAzimuthDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tGratingHeightDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tGratingWidthDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tGratingSpatialFreqCPD" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tGratingSpeedDPS" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tGratingDurationMs" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
        <variable tag="tGratingStartingPhaseDeg" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
        <variable tag="tDoNoStimulusChange" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>

        <variable tag="tTrialLaserPowerMw" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tTrialLaserPowerMw_trigger" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tTrialLaserOnTimeMs" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tTrialLaserOffTimeMs" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"/>
        <variable tag="tBlock2TrialNumber" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>

        <variable tag="tNStimAccepted" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"/>
        <variable type="selection" tag="svStimNumber" values="0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79" 
          selection="random_without_replacement" nsamples="80" sampling_method="samples"/>
      </folder>
  </variables>
  <sounds tag="Sounds">
    <sound tag="louderPressSound" type="wav_file" path="../wavs/louderFlatterPress.wav" amplitude="soundPressAmplitude"></sound>
    <sound tag="waitingForLeverSound" type="wav_file" path="../wavs/trialStart-F10e-short.wav" amplitude="soundTrialStartAmplitude"></sound>
    <sound tag="correctSound" type="wav_file" path="../wavs/shortCorrect.wav"></sound>
    <sound tag="incorrectSound" type="wav_file" path="../wavs/incorrectMouse.wav"></sound>
    <sound tag="rewardSound" type="wav_file" path="../wavs/shortCorrect.wav"></sound>
    <sound tag="basePressSound" type="wav_file" path="/Users/hullglick/Repositories/BehaviorCode-Glickfeld-Hull/BehaviorCode/NewSkeletonCode/wavs/6000Hz_.2s.wav" amplitude="soundBasePressAmplitude"></sound>
    <sound tag="cueSound" type="wav_file" path="/Users/hullglick/Repositories/BehaviorCode-Glickfeld-Hull/BehaviorCode/NewSkeletonCode/wavs/10000Hz_.2s.wav" amplitude="soundCueAmplitude"></sound>
    <sound tag="targetSound" type="wav_file" path="/Users/hullglick/Repositories/BehaviorCode-Glickfeld-Hull/BehaviorCode/NewSkeletonCode/wavs/10000Hz_.2s.wav" amplitude="soundTargetAmplitude"></sound>
</sounds>
<stimuli tag="Stimuli">
    <stimulus type="blank_screen" tag="background" color="0.5,0.5,0.5"></stimulus>
    <stimulus type="drifting_grating" tag="base_grating"  direction="0" starting_phase="gratingStartingPhaseDeg" 
      spatial_frequency="tGratingSpatialFreqCPD" 
      speed="tBaseGratingSpeedDPS" 
      grating_type="sinusoid" mask="gaussian" std_dev="0.3" mean="0.1" 
      x_size="tGratingWidthDeg" y_size="tGratingHeightDeg" 
      x_position="tGratingAzimuthDeg" y_position="tGratingElevationDeg" 
      rotation="tBaseGratingDirectionDeg" 
      alpha_multiplier="setBaseGratingContrast"></stimulus>
      <stimulus type="drifting_grating" tag="target_grating"  direction="0" starting_phase="tGratingStartingPhaseDeg" 
        spatial_frequency="tGratingSpatialFreqCPD" 
        speed="tGratingSpeedDPS" 
        grating_type="sinusoid" mask="gaussian" std_dev="0.3" mean="0.1" 
        x_size="tGratingWidthDeg" y_size="tGratingHeightDeg" 
        x_position="tGratingAzimuthDeg" y_position="tGratingElevationDeg" 
        rotation="tGratingDirectionDeg" 
        alpha_multiplier="tGratingContrast"></stimulus>
    </stimuli>    
    <experiment tag="Experiment" full_name="">
        <protocol tag="JuiceOnHoldProtocol" full_name="" selection="sequential" nsamples="1" sampling_method="cycles" description="" interruptible="YES">

          <!-- init actions before running trials after any press of start-->
          <action type="queue_stimulus" stimulus="background"></action>
          <action type="if" condition="doVisualStim">
            <action type="if" condition="doITIStim">
              <action type="assignment" tag="set base stim contrast" variable="setBaseGratingContrast" value="itiContrast"></action>
              <action tag="Queue Stimulus" type="live_queue_stimulus" stimulus="base_grating"></action>    
              <action type="play_dynamic_stimulus" stimulus="base_grating" tag="start"></action>
          </action>
      </action>
      <action type="update_stimulus_display" tag="-"></action>
      <action type="assignment" tag="consecCorrects = 0" variable="consecCorrects" value="0"></action>
      <action type="assignment" tag="tempNCorrect = 0" variable="tempNCorrect" value="0"></action>
      <action type="assignment" variable="tConsecErrors" value="0"></action>
      <action type="assignment" tag="juice = 0" variable="juice" value="0"></action>

      <!-- init actions run only on first trial after loading experiment -->
      <action type="if" condition="success+ignore+failure == 0">
        <action type="report" message="**** First trial since experiment load - initializing"></action>

        <action type="assignment" variable="tLastTrialStartTimeMs" value="-1"></action>
        <action type="assignment" variable="tThisTrialStartTimeMs" value="-1"></action>
        <action type="assignment" variable="lastActualHoldTimeMs" value="0"></action>

        <!-- reset selection var -->
        <action type="reset_selection" selection="svStimNumber"></action>
        <action type="assignment" variable="tNStimAccepted" value="0"></action> 
    </action>

    <trial tag="Trial 01" nsamples="2500" sampling_method="cycles" selection="sequential">
        <task_system tag="TS" full_name="TS" interruptable="YES" description="" interruptible="YES" 
           _error="Task Systems must contain >=1 transition that yields to parent">
           <task_system_state tag="Intertrial" interruptible="YES">
              <action_marker _unmoveable="1" tag="Actions"></action_marker>

              <action tag="Start IO Device" type="start_device_IO" device="LabJackU6"></action>
     

            <action type="assignment" variable="tTrialStartMWTimestampMs" value="now()/1000"></action>  <!-- integer valued ms timestamp -->

            <action type="assignment" tag="Encode START" variable="strobedDigitalWord" value="170"></action>
            <action type="assignment" tag="Encode START" variable="strobedDigitalWord" value="170"></action>
            <action type="assignment" tag="Encode START" variable="strobedDigitalWord" value="170"></action>

            <!--Transmit the trial timestamp so strobed code sequences are unique -->
            <action type="assert" condition="tTrialStartMWTimestampMs &lt;= 2147483648" 
                message="tTrialStartMWTimestampMs is too large - should happen only after several days of running!?"
                stop_on_failure="1"/>  
                <!-- prevent overflow outside 2**31ms ~ 10 days - I don't know how to get unsigned casts in the XML -->
                <!-- encode trialStartTimestamp in bytes: 4 bytes: millions of seconds, 1000s, s, ms -->
                <action type="assignment" tag="Encode TimestampStart" variable="strobedDigitalWord" value="200"/>
                <action type="assignment" variable="strobedDigitalWord" value="tTrialStartMWTimestampMs/1000/1000000"/>  <!-- mega s -->
                <action type="assignment" variable="strobedDigitalWord" value="(tTrialStartMWTimestampMs- (tTrialStartMWTimestampMs/1000000000)*1000000000) /1000000"/> <!-- mega to kilo s -->
                <action type="assignment" variable="strobedDigitalWord" value="(tTrialStartMWTimestampMs- (tTrialStartMWTimestampMs/1000000)*1000000) /1000"/> <!-- 0-999s -->
                <action type="assignment" variable="strobedDigitalWord" value="(tTrialStartMWTimestampMs - (tTrialStartMWTimestampMs/1000)*1000)"/>  <!-- ms -->
                <action type="assignment" tag="Encode TimestampEnd" variable="strobedDigitalWord" value="201"/>




                <action type="assignment" tag="Sync Matlab" variable="sync" value="1"></action>
                <action type="assignment" tag="Set trialStart" variable="trialStart" value="1"></action>
                <action type="assignment" tag="juice = 0" variable="juice" value="0"></action>
                <action type="assignment" tag="leverResult = 0" variable="leverResult" value="0"></action>
                <action type="assignment" variable="laserTrigger" value="0"></action>
                <action type="assignment" variable="lastActualHoldTimeMs" value="actualHoldTimeMs"></action>
                <action type="assignment" variable="experimentXmlTrialId" value="8"></action>
                <action type="assignment" variable="tStimTurnedOn" value="0"></action>
                <action type="assignment" variable="tDoNoStimulusChange" value="doNoStimulusChange"></action>
                <action type="assignment" variable="tDoAllCorrects" value="doAllCorrects"></action>

                <!-- choose correct stimulus number based on odds; block2 tr number does not get assigned if ! doBlock2 -->
                <action type="assignment" variable="tSvStimNumber" value="svStimNumber"/>  <!-- choose a value from selection var, 0-origin -->
                <action type="assignment" variable="tTempStimOdds" value="0"/>  <!-- this variable exists only for code clarity below -->

                <!-- level 1 -->                         
                <action type="if" condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+trPer80Level1))"> 
                  <action type="assignment" variable="tStimulusNumber" value="0"/> 
                  <action type="if" condition="doBlock2 &amp;&amp; !doBlock2SeparateOdds">
                    <action type="assignment" variable="tBlock2TrialNumber" value="(int)((tSvStimNumber-tTempStimOdds) &lt;= (((int)trPer80Level1-1)/2))"/>
                </action>
                <action type="if" condition="doBlock2 &amp;&amp; doBlock2SeparateOdds">
                    <action type="assignment" variable="tBlock2TrialNumber" value="0"/>         
                </action>
            </action>
            <action type="assignment" variable="tTempStimOdds" value="tTempStimOdds + trPer80Level1"/>
            <!-- level 1b: b2 sep odds on -->                         
            <action type="if" condition="doBlock2 &amp;&amp; doBlock2SeparateOdds">
              <action type="if" condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+block2TrPer80Level1))"> 
                <action type="assignment" variable="tStimulusNumber" value="0"/> 
                <action type="assignment" variable="tBlock2TrialNumber" value="1"/>         
            </action>
            <action type="assignment" variable="tTempStimOdds" value="tTempStimOdds + block2TrPer80Level1"/>
        </action>



        <!-- level 2 -->                         
        <action type="if" condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+trPer80Level2))"> 
          <action type="assignment" variable="tStimulusNumber" value="1"/> 
          <action type="if" condition="doBlock2 &amp;&amp; !doBlock2SeparateOdds">
            <action type="assignment" variable="tBlock2TrialNumber" value="(int)((tSvStimNumber-tTempStimOdds) &lt;= (((int)trPer80Level2-1)/2))"/>
        </action>
        <action type="if" condition="doBlock2 &amp;&amp; doBlock2SeparateOdds">
            <action type="assignment" variable="tBlock2TrialNumber" value="0"/>         
        </action>
    </action>
    <action type="assignment" variable="tTempStimOdds" value="tTempStimOdds + trPer80Level2"/>
    <!-- level 2b: b2 sep odds on -->                         
    <action type="if" condition="doBlock2 &amp;&amp; doBlock2SeparateOdds">
      <action type="if" condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+block2TrPer80Level2))"> 
        <action type="assignment" variable="tStimulusNumber" value="1"/> 
        <action type="assignment" variable="tBlock2TrialNumber" value="1"/>         
    </action>
    <action type="assignment" variable="tTempStimOdds" value="tTempStimOdds + block2TrPer80Level2"/>
</action>


<!-- level3 -->                         
<action type="if" condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+trPer80Level3))"> 
  <action type="assignment" variable="tStimulusNumber" value="2"/> 
  <action type="if" condition="doBlock2 &amp;&amp; !doBlock2SeparateOdds">
    <action type="assignment" variable="tBlock2TrialNumber" value="(int)((tSvStimNumber-tTempStimOdds) &lt;= (((int)trPer80Level3-1)/2))"/>
</action>
<action type="if" condition="doBlock2 &amp;&amp; doBlock2SeparateOdds">
    <action type="assignment" variable="tBlock2TrialNumber" value="0"/>         
</action>
</action>
<action type="assignment" variable="tTempStimOdds" value="tTempStimOdds + trPer80Level3"/>
<!-- level3b: b2 sep odds on -->                         
<action type="if" condition="doBlock2 &amp;&amp; doBlock2SeparateOdds">
  <action type="if" condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+block2TrPer80Level3))"> 
    <action type="assignment" variable="tStimulusNumber" value="2"/> 
    <action type="assignment" variable="tBlock2TrialNumber" value="1"/>         
</action>
<action type="assignment" variable="tTempStimOdds" value="tTempStimOdds + block2TrPer80Level3"/>
</action>


<!-- level4 -->                         
<action type="if" condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+trPer80Level4))"> 
  <action type="assignment" variable="tStimulusNumber" value="3"/> 
  <action type="if" condition="doBlock2 &amp;&amp; !doBlock2SeparateOdds">
    <action type="assignment" variable="tBlock2TrialNumber" value="(int)((tSvStimNumber-tTempStimOdds) &lt;= (((int)trPer80Level4-1)/2))"/>
</action>
<action type="if" condition="doBlock2 &amp;&amp; doBlock2SeparateOdds">
    <action type="assignment" variable="tBlock2TrialNumber" value="0"/>         
</action>
</action>
<action type="assignment" variable="tTempStimOdds" value="tTempStimOdds + trPer80Level4"/>
<!-- level4b: b2 sep odds on -->                         
<action type="if" condition="doBlock2 &amp;&amp; doBlock2SeparateOdds">
  <action type="if" condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+block2TrPer80Level4))"> 
    <action type="assignment" variable="tStimulusNumber" value="3"/> 
    <action type="assignment" variable="tBlock2TrialNumber" value="1"/>         
</action>
<action type="assignment" variable="tTempStimOdds" value="tTempStimOdds + block2TrPer80Level4"/>
</action>


<!-- level5 -->                         
<action type="if" condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+trPer80Level5))"> 
  <action type="assignment" variable="tStimulusNumber" value="4"/> 
  <action type="if" condition="doBlock2 &amp;&amp; !doBlock2SeparateOdds">
    <action type="assignment" variable="tBlock2TrialNumber" value="(int)((tSvStimNumber-tTempStimOdds) &lt;= (((int)trPer80Level5-1)/2))"/>
</action>
<action type="if" condition="doBlock2 &amp;&amp; doBlock2SeparateOdds">
    <action type="assignment" variable="tBlock2TrialNumber" value="0"/>         
</action>
</action>
<action type="assignment" variable="tTempStimOdds" value="tTempStimOdds + trPer80Level5"/>
<!-- level5b: b2 sep odds on -->                         
<action type="if" condition="doBlock2 &amp;&amp; doBlock2SeparateOdds">
  <action type="if" condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+block2TrPer80Level5))"> 
    <action type="assignment" variable="tStimulusNumber" value="4"/> 
    <action type="assignment" variable="tBlock2TrialNumber" value="1"/>         
</action>
<action type="assignment" variable="tTempStimOdds" value="tTempStimOdds + block2TrPer80Level5"/>
</action>


<!-- level6 -->                         
<action type="if" condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+trPer80Level6))"> 
  <action type="assignment" variable="tStimulusNumber" value="5"/> 
  <action type="if" condition="doBlock2 &amp;&amp; !doBlock2SeparateOdds">
    <action type="assignment" variable="tBlock2TrialNumber" value="(int)((tSvStimNumber-tTempStimOdds) &lt;= (((int)trPer80Level6-1)/2))"/>
</action>
<action type="if" condition="doBlock2 &amp;&amp; doBlock2SeparateOdds">
    <action type="assignment" variable="tBlock2TrialNumber" value="0"/>         
</action>
</action>
<action type="assignment" variable="tTempStimOdds" value="tTempStimOdds + trPer80Level6"/>
<!-- level6b: b2 sep odds on -->                         
<action type="if" condition="doBlock2 &amp;&amp; doBlock2SeparateOdds">
  <action type="if" condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+block2TrPer80Level6))"> 
    <action type="assignment" variable="tStimulusNumber" value="5"/> 
    <action type="assignment" variable="tBlock2TrialNumber" value="1"/>         
</action>
<action type="assignment" variable="tTempStimOdds" value="tTempStimOdds + block2TrPer80Level6"/>
</action>


<!-- level7 -->                         
<action type="if" condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+trPer80Level7))"> 
  <action type="assignment" variable="tStimulusNumber" value="6"/> 
  <action type="if" condition="doBlock2 &amp;&amp; !doBlock2SeparateOdds">
    <action type="assignment" variable="tBlock2TrialNumber" value="(int)((tSvStimNumber-tTempStimOdds) &lt;= (((int)trPer80Level7-1)/2))"/>
</action>
<action type="if" condition="doBlock2 &amp;&amp; doBlock2SeparateOdds">
    <action type="assignment" variable="tBlock2TrialNumber" value="0"/>         
</action>
</action>
<action type="assignment" variable="tTempStimOdds" value="tTempStimOdds + trPer80Level7"/>
<!-- level7b: b2 sep odds on -->                         
<action type="if" condition="doBlock2 &amp;&amp; doBlock2SeparateOdds">
  <action type="if" condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+block2TrPer80Level7))"> 
    <action type="assignment" variable="tStimulusNumber" value="6"/> 
    <action type="assignment" variable="tBlock2TrialNumber" value="1"/>         
</action>
<action type="assignment" variable="tTempStimOdds" value="tTempStimOdds + block2TrPer80Level7"/>
</action>


<!-- level8 -->                         
<action type="if" condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+trPer80Level8))"> 
  <action type="assignment" variable="tStimulusNumber" value="7"/> 
  <action type="if" condition="doBlock2 &amp;&amp; !doBlock2SeparateOdds">
    <action type="assignment" variable="tBlock2TrialNumber" value="(int)((tSvStimNumber-tTempStimOdds) &lt;= (((int)trPer80Level8-1)/2))"/>
</action>
<action type="if" condition="doBlock2 &amp;&amp; doBlock2SeparateOdds">
    <action type="assignment" variable="tBlock2TrialNumber" value="0"/>         
</action>
</action>
<action type="assignment" variable="tTempStimOdds" value="tTempStimOdds + trPer80Level8"/>
<!-- level8b: b2 sep odds on -->                         
<action type="if" condition="doBlock2 &amp;&amp; doBlock2SeparateOdds">
  <action type="if" condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+block2TrPer80Level8))"> 
    <action type="assignment" variable="tStimulusNumber" value="7"/> 
    <action type="assignment" variable="tBlock2TrialNumber" value="1"/>         
</action>
<action type="assignment" variable="tTempStimOdds" value="tTempStimOdds + block2TrPer80Level8"/>
</action>





<!-- error checking                -->
<action type="assert" stop_on_failure="1"  
  condition="tTempStimOdds == 80"
  message="stim odds must sum to 80!  (sum now is $tTempStimOdds )"/>
  <!-- stop_on_failure=0: allow slop so it can be changed while running -->

  <action type="if" condition="doBlock2 &amp;&amp; !doBlock2SeparateOdds">
    <action type="assert" condition="trPer80Level1-(((int)trPer80Level1)/2)*2 == 0" stop_on_failure="1"
      message="When doBlock2 and !doBlock2SeparateOdds, all odds must be div. by 2"/>
      <action type="assert" condition="trPer80Level2-(((int)trPer80Level2)/2)*2 == 0" stop_on_failure="1"
        message="When doBlock2 and !doBlock2SeparateOdds, all odds must be div. by 2"/>
        <action type="assert" condition="trPer80Level3-(((int)trPer80Level3)/2)*2 == 0" stop_on_failure="1"
          message="When doBlock2 and !doBlock2SeparateOdds, all odds must be div. by 2"/>
          <action type="assert" condition="trPer80Level4-(((int)trPer80Level4)/2)*2 == 0" stop_on_failure="1"
            message="When doBlock2 and !doBlock2SeparateOdds, all odds must be div. by 2"/>
            <action type="assert" condition="trPer80Level5-(((int)trPer80Level5)/2)*2 == 0" stop_on_failure="1"
              message="When doBlock2 and !doBlock2SeparateOdds, all odds must be div. by 2"/>
              <action type="assert" condition="trPer80Level6-(((int)trPer80Level6)/2)*2 == 0" stop_on_failure="1"
                message="When doBlock2 and !doBlock2SeparateOdds, all odds must be div. by 2"/>
                <action type="assert" condition="trPer80Level7-(((int)trPer80Level7)/2)*2 == 0" stop_on_failure="1"
                  message="When doBlock2 and !doBlock2SeparateOdds, all odds must be div. by 2"/>
                  <action type="assert" condition="trPer80Level8-(((int)trPer80Level8)/2)*2 == 0" stop_on_failure="1"
                    message="When doBlock2 and !doBlock2SeparateOdds, all odds must be div. by 2"/>
                </action>



                <!-- Choose block 2 trial type -->
                <action type="if" condition="doBlock2">
                    <action type="assert" stop_on_failure="1"
                      condition="(block2DoGratingAppearance+block2DoRampLength+block2DoRampVTrain+block2DoTrialLaser) == 1"
                      message="must select exactly one of block2Do variables!"/>

              <!-- trial numbers assigned above in switch statement.  Note equal probability 
              - if more complicated odds wanted; add a set of block2 level odds -->

              <!-- grating appearance for block 2 -->                         
              <action type="if" condition="block2DoGratingAppearance">
                <action type="assert" condition="doVisualStim == 1" stop_on_failure="1"
                  message="doVisualStim must be 1 for block2DoGratingAppearance == 1"/>

                  <!-- same for both types of block2 trials -->    

                  <action type="if" condition="tBlock2TrialNumber == 0">
                    <action type="assignment" variable="tBaseGratingDirectionDeg" value="baseGratingDirectionDeg"></action>
                    <action type="assignment" variable="tBaseGratingContrast" value="baseGratingContrast"></action>
                    <action type="assignment" variable="tBaseGratingSpeedDPS" value="baseGratingSpeedDPS"></action>
                    <action type="assignment" variable="tGratingMaxContrastStep" value="gratingMaxContrastStep"></action>
                    <action type="assignment" variable="tGratingContrastStepsPerOctave" value="gratingContrastStepsPerOctave"></action>
                    <action type="assignment" variable="tGratingMaxDirectionStepDeg" value="gratingMaxDirectionStepDeg"></action>
                    <action type="assignment" variable="tGratingDirectionStepsPerOctave" value="gratingDirectionStepsPerOctave"></action>   
                    <action type="assignment" variable="tGratingMaxSpeedStepDPS" value="gratingMaxSpeedStepDPS"></action>
                    <action type="assignment" variable="tGratingSpeedStepsPerOctave" value="gratingSpeedStepsPerOctave"></action>                       
                    <action type="assignment" variable="tGratingElevationDeg" value="gratingElevationDeg"></action>                         
                    <action type="assignment" variable="tGratingAzimuthDeg" value="gratingAzimuthDeg"></action>                             
                    <action type="assignment" variable="tGratingHeightDeg" value="gratingHeightDeg"></action>                       
                    <action type="assignment" variable="tGratingWidthDeg" value="gratingWidthDeg"></action>                         
                    <action type="assignment" variable="tGratingSpatialFreqCPD" value="gratingSpatialFreqCPD"></action>                             
                    <action type="assignment" variable="tGratingDurationMs" value="gratingDurationMs"/>
                </action>

                <action type="if" condition="tBlock2TrialNumber == 1">
                    <action type="assignment" variable="tBaseGratingDirectionDeg" value="block2BaseGratingDirectionDeg"></action>
                    <action type="assignment" variable="tBaseGratingContrast" value="block2BaseGratingContrast"></action>
                    <action type="assignment" variable="tBaseGratingSpeedDPS" value="block2BaseGratingSpeedDPS"></action>
                    <action type="assignment" variable="tGratingMaxContrastStep" value="block2GratingMaxContrastStep"></action>
                    <action type="assignment" variable="tGratingContrastStepsPerOctave" value="block2GratingContrastStepsPerOctave"></action>
                    <action type="assignment" variable="tGratingMaxDirectionStepDeg" value="block2GratingMaxDirectionStepDeg"></action>
                    <action type="assignment" variable="tGratingDirectionStepsPerOctave" value="block2GratingDirectionStepsPerOctave"></action>
                    <action type="assignment" variable="tGratingMaxSpeedStepDPS" value="block2GratingMaxSpeedStepDPS"></action>
                    <action type="assignment" variable="tGratingSpeedStepsPerOctave" value="block2GratingSpeedStepsPerOctave"></action>                         
                    <action type="assignment" variable="tGratingElevationDeg" value="block2GratingElevationDeg"></action>                           
                    <action type="assignment" variable="tGratingAzimuthDeg" value="block2GratingAzimuthDeg"></action>                       
                    <action type="assignment" variable="tGratingHeightDeg" value="block2GratingHeightDeg"></action>                         
                    <action type="assignment" variable="tGratingWidthDeg" value="block2GratingWidthDeg"></action>                           
                    <action type="assignment" variable="tGratingSpatialFreqCPD" value="block2GratingSpatialFreqCPD"></action>                       
                    <action type="assignment" variable="tGratingDurationMs" value="block2GratingDurationMs"/>
                </action>


            </action>

            <!-- ramp length for block 2 -->
            <action type="if" condition="block2DoRampLength">
              <action type="assert" condition="doLaserStim == 1" stop_on_failure="1"
                message="doLaserStim must be 1 for block2DoRampLength == 1"/>
                <action type="assignment" variable="tLaserBaselinePowerMw" value="laserBaselinePowerMw"></action>

                <action type="if" condition="tBlock2TrialNumber == 0">
                  <action type="assignment" variable="tLaserRampLengthMs" value="laserRampLengthMs"></action>                             
                  <action type="assignment" variable="tLaserPeakMaxMw" value="laserPeakMaxMw"></action>
              </action>
              <action type="if" condition="tBlock2TrialNumber == 1">
                  <action type="assignment" variable="tLaserRampLengthMs" value="block2RampLengthMs2"></action>                           
                  <action type="assignment" variable="tLaserPeakMaxMw" value="block2RampLengthPowerMaxMw2"></action>                              
              </action>
          </action>

          <!-- ramp v train for block 2 -->
          <action type="if" condition="block2DoRampVTrain">
            <action type="assert" condition="doLaserStim == 1" stop_on_failure="1"
              message="doLaserStim must be 1 for block2DoRampLength == 1"/>
              <action type="assert" condition="laserDoLinearRamp+laserDoPulseTrain == 0" stop_on_failure="1"
                message="when block2 controls ramp v. train, set laserDoLinearRamp/PulseTrain both to 0"/>
                <action type="if" condition="tBlock2TrialNumber == 0"> <!-- ramp -->
                  <action type="assignment" variable="tLaserDoLinearRamp" value="1"></action>                             
                  <action type="assignment" variable="tLaserRampLengthMs" value="laserRampLengthMs"></action>                             
                  <action type="assignment" variable="tLaserDoPulseTrain" value="0"></action>                             
                  <action type="assignment" variable="tLaserPeakMaxMw" value="laserPeakMaxMw"></action>
                  <action type="assignment" variable="tLaserPeakStepsPerOctave" value="laserPeakStepsPerOctave"></action>
                  <action type="assignment" variable="tLaserBaselinePowerMw" value="block2RvtRampBaselinePowerMw"></action>
              </action>
              <action type="if" condition="tBlock2TrialNumber == 1"> <!-- train -->
                  <action type="assignment" variable="tLaserDoLinearRamp" value="0"></action>                             
                  <action type="assignment" variable="tLaserRampLengthMs" value="laserRampLengthMs"></action>                             
                  <action type="assignment" variable="tLaserDoPulseTrain" value="1"></action>                             
                  <action type="assignment" variable="tLaserPeakMaxMw" value="block2RvtTrainPowerMaxMw"></action>
                  <action type="assignment" variable="tLaserPeakStepsPerOctave" value="block2RvtTrainStepsPerOctave"></action>
                  <action type="assignment" variable="tLaserBaselinePowerMw" value="block2RvtTrainBaselinePowerMw"></action>
              </action>

              <!-- in both cases: for paired vision -->
              <action type="if" condition="doVisualStim == 1"> 
                  <action type="assignment" variable="tBaseGratingDirectionDeg" value="baseGratingDirectionDeg"></action>                         
                  <action type="assignment" variable="tBaseGratingContrast" value="baseGratingContrast"></action>
                  <action type="assignment" variable="tBaseGratingSpeedDPS" value="baseGratingSpeedDPS"></action>
                  <action type="assignment" variable="tGratingElevationDeg" value="gratingElevationDeg"></action>                         
                  <action type="assignment" variable="tGratingAzimuthDeg" value="gratingAzimuthDeg"></action>                             
                  <action type="assignment" variable="tGratingHeightDeg" value="gratingHeightDeg"></action>                       
                  <action type="assignment" variable="tGratingWidthDeg" value="gratingWidthDeg"></action>                         
                  <action type="assignment" variable="tGratingSpatialFreqCPD" value="gratingSpatialFreqCPD"></action>                                                     
                  <action type="assignment" variable="tGratingDurationMs" value="gratingDurationMs"></action>                             
                  <action type="assignment" variable="tGratingMaxContrastStep" value="gratingMaxContrastStep"></action>
                  <action type="assignment" variable="tGratingContrastStepsPerOctave" value="gratingContrastStepsPerOctave"></action>
                  <action type="assignment" variable="tGratingMaxDirectionStepDeg" value="gratingMaxDirectionStepDeg"></action>
                  <action type="assignment" variable="tGratingDirectionStepsPerOctave" value="gratingDirectionStepsPerOctave"></action>
                  <action type="assignment" variable="tGratingMaxSpeedStepDPS" value="gratingMaxSpeedStepDPS"></action>
                  <action type="assignment" variable="tGratingSpeedStepsPerOctave" value="gratingSpeedStepsPerOctave"></action>
              </action>
          </action>

          <!-- using trial laser for block 2 -->
          <action type="if" condition="block2DoTrialLaser">
            <action type="assert" condition="!doLaserStim" stop_on_failure="1"
              message="When using trialLaser, doLaserStim must be off"/>

              <action type="assignment" variable="tGratingDurationMs" value="gratingDurationMs"/>

            <action type="if" condition="tBlock2TrialNumber == 0"> <!-- off -->
               
              <action type="assignment" variable="tTrialLaserPowerMw_trigger" value="trialLaserPowerMw"></action>              
              
              <!-- Turn on laser driver at the beginning -->
              <action type="if" condition="optic_device == 'laser' ">  
                <action type="assignment" variable="tTrialLaserPowerMw" value="trialLaserPowerMw"></action>
              </action>

              <action type="assignment" variable="tTrialLaserOnTimeMs" value="trialLaserOnTimeMs"></action>
              <action type="assignment" variable="tTrialLaserOffTimeMs" value="trialLaserOffTimeMs"></action>
              <action type="assignment" variable="tGratingMaxContrastStep" value="gratingMaxContrastStep"></action>
              <action type="assignment" variable="tGratingContrastStepsPerOctave" value="gratingContrastStepsPerOctave"></action>
              <action type="assignment" variable="tGratingMaxDirectionStepDeg" value="gratingMaxDirectionStepDeg"></action>
              <action type="assignment" variable="tGratingDirectionStepsPerOctave" value="gratingDirectionStepsPerOctave"></action>
              <action type="assignment" variable="tGratingMaxSpeedStepDPS" value="gratingMaxSpeedStepDPS"></action>
              <action type="assignment" variable="tGratingSpeedStepsPerOctave" value="gratingSpeedStepsPerOctave"></action>
          </action>

          <action type="if" condition="tBlock2TrialNumber == 1"> <!-- on -->
            
            <action type="assignment" variable="tTrialLaserPowerMw_trigger" value="block2TrialLaserPowerMw"></action>
            
            <!-- Turn on laser driver at the beginning -->
            <action type="if" condition="optic_device == 'laser' ">  
                <action type="assignment" variable="tTrialLaserPowerMw" value="block2TrialLaserPowerMw"></action>
            </action>

            <action type="assignment" variable="tTrialLaserOnTimeMs" value="block2TrialLaserOnTimeMs"></action>
            <action type="assignment" variable="tTrialLaserOffTimeMs" value="block2TrialLaserOffTimeMs"></action>
            <action type="assignment" variable="tGratingMaxContrastStep" value="block2GratingMaxContrastStep"></action>
            <action type="assignment" variable="tGratingContrastStepsPerOctave" value="block2GratingContrastStepsPerOctave"></action>
            <action type="assignment" variable="tGratingMaxDirectionStepDeg" value="block2GratingMaxDirectionStepDeg"></action>
            <action type="assignment" variable="tGratingDirectionStepsPerOctave" value="block2GratingDirectionStepsPerOctave"></action>
            <action type="assignment" variable="tGratingMaxSpeedStepDPS" value="block2GratingMaxSpeedStepDPS"></action>
            <action type="assignment" variable="tGratingSpeedStepsPerOctave" value="block2GratingSpeedStepsPerOctave"></action>
        </action>

        <!-- in both cases -->
        <action type="assignment" variable="tBaseGratingDirectionDeg" value="baseGratingDirectionDeg"></action>     
        <action type="assignment" variable="tBaseGratingContrast" value="baseGratingContrast"></action>
        <action type="assignment" variable="tBaseGratingSpeedDPS" value="baseGratingSpeedDPS"></action>                                                      
        <action type="assignment" variable="tGratingElevationDeg" value="gratingElevationDeg"></action>                           
        <action type="assignment" variable="tGratingAzimuthDeg" value="gratingAzimuthDeg"></action>                       
        <action type="assignment" variable="tGratingHeightDeg" value="gratingHeightDeg"></action>                         
        <action type="assignment" variable="tGratingWidthDeg" value="gratingWidthDeg"></action>                           
        <action type="assignment" variable="tGratingSpatialFreqCPD" value="gratingSpatialFreqCPD"></action>                       
        <action type="assignment" variable="tGratingDurationMs" value="gratingDurationMs"></action>                       
    </action>

</action> <!-- end doBlock2 -->

<!-- if no block 2 randomization, just set all affected vars to fixed values -->
<action type="if" condition="! doBlock2">
    <action type="assignment" variable="tBaseGratingDirectionDeg" value="baseGratingDirectionDeg"></action>
    <action type="assignment" variable="tBaseGratingContrast" value="baseGratingContrast"></action>
    <action type="assignment" variable="tBaseGratingSpeedDPS" value="baseGratingSpeedDPS"></action>
    <action type="assignment" variable="tGratingElevationDeg" value="gratingElevationDeg"></action>                             
    <action type="assignment" variable="tGratingAzimuthDeg" value="gratingAzimuthDeg"></action>                         
    <action type="assignment" variable="tGratingHeightDeg" value="gratingHeightDeg"></action>                           
    <action type="assignment" variable="tGratingWidthDeg" value="gratingWidthDeg"></action>                             
    <action type="assignment" variable="tGratingSpatialFreqCPD" value="gratingSpatialFreqCPD"></action>                         
    <action type="assignment" variable="tGratingDurationMs" value="gratingDurationMs"></action>                         

    <action type="assignment" variable="tLaserRampLengthMs" value="laserRampLengthMs"></action>
    <action type="assignment" variable="tLaserPeakMaxMw" value="laserPeakMaxMw"></action>
    <action type="assignment" variable="tLaserPeakStepsPerOctave" value="laserPeakStepsPerOctave"></action>
    <action type="assignment" variable="tGratingMaxContrastStep" value="gratingMaxContrastStep"></action>
    <action type="assignment" variable="tGratingContrastStepsPerOctave" value="gratingContrastStepsPerOctave"></action>
    <action type="assignment" variable="tGratingMaxDirectionStepDeg" value="gratingMaxDirectionStepDeg"></action>
    <action type="assignment" variable="tGratingDirectionStepsPerOctave" value="gratingDirectionStepsPerOctave"></action>
    <action type="assignment" variable="tGratingMaxSpeedStepDPS" value="gratingMaxSpeedStepDPS"></action>
    <action type="assignment" variable="tGratingSpeedStepsPerOctave" value="gratingSpeedStepsPerOctave"></action>
    <action type="assignment" variable="tLaserDoLinearRamp" value="laserDoLinearRamp"></action>
    <action type="assignment" variable="tLaserDoPulseTrain" value="laserDoPulseTrain"></action>
    <action type="assignment" variable="tLaserBaselinePowerMw" value="laserBaselinePowerMw"></action>

    <action type="assignment" variable="tTrialLaserPowerMw_trigger" value="trialLaserPowerMw"></action>
    <action type="if" condition="optic_device == 'laser' ">
        <action type="assignment" variable="tTrialLaserPowerMw" value="trialLaserPowerMw"></action>
    </action>
    <action type="assignment" variable="tTrialLaserOnTimeMs" value="trialLaserOnTimeMs"></action>
    <action type="assignment" variable="tTrialLaserOffTimeMs" value="trialLaserOffTimeMs"></action>

    <!-- !doBlock2 error checking -->
    <action type="assert" stop_on_failure="1"
      condition="!doLaserStim || (laserDoLinearRamp || laserDoPulseTrain)" 
      message="When doLaserStim, ramp or train must be set"/>

  </action> <!-- !doBlock2 -->


  <!-- choose hold time this trial -->
  <action type="if" condition="!doGeomHoldDist">
      <!-- default, uniform -->
      <action type="assignment" variable="tRandReqHoldTimeMs" value="rand(0,randReqHoldMaxMs)"></action>
  </action>
  <action type="if" condition="doGeomHoldDist">
      <action type="assignment" variable="tRandReqHoldTimeMs" value="geom_rand(1.0/geomHoldMeanMs, randReqHoldMaxMs)"></action>
  </action>

  <action type="assignment" variable="tTotalReqHoldTimeMs" value="fixedReqHoldTimeMs + tRandReqHoldTimeMs"></action>

  <!-- choose laser power -->
  <action type="if" condition="doLaserStim &amp;&amp; tLaserPeakMaxMw !=0">

      <action type="assignment" variable="tLaserPowerMw" 
        value="tLaserPeakMaxMw / pow(2, 1.0*tStimulusNumber/tLaserPeakStepsPerOctave)"></action> 

        <!-- adjust from baseline -->
        <action type="if" condition="tLaserBaselinePowerMw > 0">
          <action type="assignment" variable="tLaserPowerMw" 
            value="tLaserPowerMw + tLaserBaselinePowerMw"/>
        </action>

        <action type="report" message="Laser power this trial is $tLaserPowerMw"></action>

    </action>

    <action type="if" condition="!doLaserStim">
      <action type="assignment" variable="tLaserPowerMw" value="0"/>
  </action>

  <!-- choose vis stim ori/dir/speed -->
  <action type="if" condition="doVisualStim"> 
      <action type="if" condition="doOriDetect">
        <action type="assignment" variable="tGratingDirectionDeg" 
          value="tBaseGratingDirectionDeg + (tGratingMaxDirectionStepDeg / (pow(2, tStimulusNumber/tGratingDirectionStepsPerOctave)))"></action> 
          <action type="assignment" variable="tGratingContrast" value="tBaseGratingContrast"/>
          <action type="assignment" variable="tGratingSpeedDPS" value="tBaseGratingSpeedDPS"/>
          <action type="assignment" variable="tGratingStartingPhaseDeg" value="gratingStartingPhaseDeg"/>
          <action type="report" message="Grating direction this trial is $tGratingDirectionDeg"></action>
      </action>
      <action type="if" condition="doContrastDetect">
          <action type="assignment" variable="tGratingContrast" 
            value="tBaseGratingContrast + (tGratingMaxContrastStep / (pow(2, 1.0*tStimulusNumber/tGratingContrastStepsPerOctave)))"></action> 
            <action type="assignment" variable="tGratingDirectionDeg" value="tBaseGratingDirectionDeg"/>
            <action type="assignment" variable="tGratingSpeedDPS" value="tBaseGratingSpeedDPS"/>
            <action type="assignment" variable="tGratingStartingPhaseDeg" value="gratingStartingPhaseDeg"/>
            <action type="report" message="Grating contrast this trial is $tGratingContrast"></action>
        </action>
        <action type="if" condition="doSpeedDetect">
            <action type="assignment" variable="tGratingSpeedDPS" 
              value="tBaseGratingSpeedDPS + (tGratingMaxSpeedStepDPS / (pow(2, tStimulusNumber/tGratingSpeedStepsPerOctave)))"></action> 
              <action type="assignment" variable="tGratingContrast" value="tBaseGratingContrast"/>
              <action type="assignment" variable="tGratingDirectionDeg" value="tBaseGratingDirectionDeg"/>
              <action type="assignment" variable="tGratingStartingPhaseDeg" value="((tTotalReqHoldTimeMs / 1000) * tBaseGratingSpeedDPS * tGratingSpatialFreqCPD * 360)"/> 
              <action type="report" message="Grating speed this trial is $tGratingSpeedDPS ; Grating phase this trial is $tGratingStartingPhaseDeg"></action>
          </action>
      </action>
      <action type="if" condition="!doVisualStim">
        <action type="assignment" variable="tGratingContrast" value="0"></action>
        <action type="assignment" variable="tGratingDirectionDeg" value="0"></action>
        <action type="assignment" variable="tGratingSpeedDPS" value="0"></action>
    </action>
    <action type="assert" condition="tGratingContrast >= 0" stop_on_failure="1" 
        message="No negative contrasts allowed"/>
        <action type="assert" condition="abs(tBaseGratingDirectionDeg-tGratingDirectionDeg) &lt;= 360" stop_on_failure="1" 
          message="Maximum direction step is 360 degrees"/>
          <action type="assert" condition="tGratingSpeedDPS >= 0" stop_on_failure="1" 
            message="No negative speeds allowed"/>

            <!-- send laser params to controller -->
            <action type="if" condition="doLaserStim">
              <action type="assignment" tag="Send laser params to controller" variable="sendLaserParams" value="1"></action>
              <action type="assignment" tag="Send laser params to controller" variable="sendLaserParams" value="0"></action>
          </action>

          <!-- lock down the min stimulus value to a fixed number if variable not negative -->

          <!-- initialize trial start/end times -->
          <action type="if" condition="tThisTrialStartTimeMs == -1">  
              <!--first trial, leave lasttime as -1 -->
              <action type="assignment" variable="tLastTrialStartTimeMs" value="-1"></action>
          </action>
          <action type="if" condition="tThisTrialStartTimeMs != -1">  <!--else-->
              <!--later trials, copy this into last before setting this again below -->
              <action type="assignment" variable="tLastTrialStartTimeMs" value="tThisTrialStartTimeMs"></action>
          </action>
          <action type="assignment" variable="tThisTrialStartTimeMs" value="now()/1000"></action>

          <!-- debug -->
          <action type="report" message="tNStimAccepted == $tNStimAccepted, svStimN is $svStimNumber, tb2TrN is $tBlock2TrialNumber "/>


          <!-- compute ITI time -->
          <!-- initialize with a const value -->
          <action type="assignment" 
              variable="tItiWaitTimeMs" 
              value="itiTimeMs"></action>

              <!-- Increase ITI time by 5s if the laser power is changed and by 15s if the very first time-->
              <action type="if" condition="(success+ignore+failure == 0) &amp;&amp; (optic_device != 'led')">
                
                <action type="assignment" variable="tItiWaitTimeMs" value="tItiWaitTimeMs + 10000"></action>
                
            </action>

            <!-- extend based on previous hold and max stim time, if asked for -->
            <action type="if" condition="doExtendItiOnShortPrevTrial == 1"> 
                <action type="assignment" variable="tempMs"  
                  value="(fixedReqHoldTimeMs+randReqHoldMaxMs)-lastActualHoldTimeMs"></action> 
                  <action type="if" condition="tempMs > 0">
                    <!--add to ITI-->
                    <action type="assignment" tag="-"
                      variable="tItiWaitTimeMs" value="tItiWaitTimeMs+tempMs"></action>
                  </action>
              </action>


            <action type="start_timer" tag="Start interTrialTimer" timer="interTrialTimer" 
                timebase="" duration="tItiWaitTimeMs" duration_units="ms"></action>
                <action type="assignment" tag="Clear stimulusOn" variable="stimulusOn" value="0"></action>
                <action type="assignment" tag="Encode ItiStart" variable="strobedDigitalWord" value="6"></action>
                <action type="if" condition="doLeverSolenoidAllTrials">
                  <!-- Turn on solenoid for ITI only if doLS is true, not if doLSErrorsOnly -->
                  <action type="assignment" tag="lever Solenoid on" variable="MIO0" value="1"></action>
                  <action type="assignment" tag="Encode LeverSolenoidOn" variable="strobedDigitalWord" value="12"></action>
              </action>
              <action type="if" condition="!doLeverSolenoidAllTrials">
                  <action type="assignment" variable="MIO0" value="0"></action>
                  <action type="assignment" tag="Encode LeverSolenoidOff" variable="strobedDigitalWord" value="13"></action>
              </action>
              <action type="report" message="In ITI, waiting for $tItiWaitTimeMs ms, then waiting for press"></action>                        

              <!-- if trialLaser, send params to controller -->
              <action type="if" condition="tTrialLaserPowerMw_trigger > 0">
                  <action type="assignment" tag="Send laser params to controller" variable="sendLaserParams" value="1"></action>
                  <action type="assignment" tag="Send laser params to controller" variable="sendLaserParams" value="0"></action>
              <!--<action type="assert" condition="tLaserPowerMw == 0" stop_on_failure="1" 
              message="bug: tLaserPowerMw and tTrialLaserPowerMw > 0"/> -->
              <action type="assert" stop_on_failure="1"
                condition="(tTrialLaserOnTimeMs == 0 &amp;&amp; tTrialLaserOffTimeMs == 0) || (tTrialLaserOnTimeMs > 0 &amp;&amp; tTrialLaserOffTimeMs > 0)"
                message="For constant trial laser, set on and off time to 0.  Otherwise on/off time must both be set"/>
            </action>


            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="timer_expired" tag="If Expired, Go To StartTrial" target="StartTrial" timer="interTrialTimer"></transition>
        </task_system_state>

        <task_system_state tag="StartTrial" full_name="" description="" interruptible="YES">
          <action type="if" tag="if doLeverSolenoid/ErrorsOnly" condition="doLeverSolenoidAllTrials || doLeverSolenoidOnMiss || doLeverSolenoidOnEarly">
            <!-- Lower solenoid at beginning of trial for any solenoid -->
            <action type="assignment" tag="lever Solenoid off" variable="MIO0" value="0"></action>
            <action type="assignment" tag="Encode LeverSolenoidOff" variable="strobedDigitalWord" value="13"></action>
        </action>
        <action type="assignment" variable="tStartTrialWaitForPressTimeMs" value="now()/1000.0"></action>

        <action type="assignment" tag="Encode StartTrialWaitForPress" variable="strobedDigitalWord" value="7"></action>
        <action tag="Play waitingForLeverSound" type="play_sound" sound="waitingForLeverSound"></action>

        <!-- fake mouse calculations -->
        <action type="if" tag="if fakeMouse" condition="!doLever">
            <action type="assignment" variable="tFakeMousePressMs" value="rand(0, fakeMouseMaxPressMs)"></action>
        </action>

        <transition type="conditional" tag="If Lever Down, Go To Hold Lever" condition="doLever &amp;&amp; doAnalogLever == 0 &amp;&amp; FIO1 == 1 &amp;&amp; doAllCorrects==0" target="HoldLever"></transition>
        <transition type="conditional" tag="If Lever Down, Go To Hold Lever" condition="doLever &amp;&amp; doAnalogLever &amp;&amp; (quadrature &gt; leverThreshold) &amp;&amp; doAllCorrects==0" target="HoldLever"></transition>
        <transition type="conditional" tag="If fakeMouse elapsed, go to HoldLever" 
            condition="!doLever &amp;&amp; doAllCorrects==0 &amp;&amp; ( (now()/1000.0)-tStartTrialWaitForPressTimeMs) > tFakeMousePressMs" target="HoldLever"></transition>
            <transition type="conditional" tag="If waiting here too long (120s), go to HoldLever" 
              condition="doLever &amp;&amp; ( (now()/1000.0)-tStartTrialWaitForPressTimeMs) > 120*1000" target="HoldLever"></transition>
              <transition type="conditional" tag="If waiting here too long (120s), go to HoldLever" 
                condition="doAllCorrects==1" target="HoldLever"></transition>
            </task_system_state>

            <task_system_state tag="HoldLever" interruptible="YES">
                <action_marker _unmoveable="1" tag="Actions"></action_marker>
                <action tag="p" type="play_sound" sound="louderPressSound"></action>
                <action type="play_sound" sound="basePressSound"/>
                <action type="play_sound" sound="cueSound"/>
                <action type="assignment" tag="leverResult = 1" variable="leverResult" value="1"></action>
                <action type="assignment" tag="set pressTimestampMs" variable="pressTimestampMs" value="now()/1000"></action>

                <action type="assignment" tag="Encode LeverPressStart" variable="strobedDigitalWord" value="3"></action>

                <action type="if" condition="doVisualStim">
                  <action type="assignment" tag="set base stim contrast" variable="setBaseGratingContrast" value="tBaseGratingContrast"></action>  
                  <action tag="Queue Stimulus" type="live_queue_stimulus" stimulus="base_grating"></action>    
                  <action type="play_dynamic_stimulus" stimulus="base_grating" tag="start"></action>
              </action>
              <action type="update_stimulus_display" tag="-"></action>

              <!-- turn on trial laser if requested -->
              <action type="if" condition="tTrialLaserPowerMw_trigger > 0 &amp;&amp; (optic_device == 'led')">
                  <action type="assignment" variable="tTrialLaserPowerMw" value="tTrialLaserPowerMw_trigger"></action>
                  <action type="report" message="********* SENDING LED TRIGGER *********"/>
                  <action type="assignment" tag="Encode LaserStimOn" variable="strobedDigitalWord" value="5"></action>
              </action>

              <action type="if" condition="tTrialLaserPowerMw_trigger > 0 &amp;&amp; (optic_device != 'led')">
                  <action type="assignment" variable="laserTrigger" value="1"></action> 
                  <action type="report" message="********* SENDING LASER TRIGGER and laser power is $tTrialLaserPowerMw_trigger *********"/>
                  <action type="assignment" tag="Encode LaserStimOn" variable="strobedDigitalWord" value="5"></action>
              </action>

              <action type="if" tag="if fakeMouse" condition="!doLever &amp;&amp; doAllCorrects==0">
                  <action type="assignment" tag="Assign tFakeMouseReactMs" variable="tFakeMouseReactMs" value="rand(0, fakeMouseMaxReactMs)"></action>
                  <action type="start_timer" tag="Start Fake Mouse Timer" timer="fakeMouseTimer" timebase="" duration="tFakeMouseReactMs" duration_units="ms"></action>
                  <action tag="Report FakeMouseTimer" full_name="Report Press" type="report" message="fake mouse to react in $tFakeMouseReactMs ms"></action>
              </action>
              <action type="if" tag="fakeMouse workaround for doAllCorrects" condition="doAllCorrects==1">
                  <action type="start_timer" tag="Start Fake Mouse Timer" timer="fakeMouseTimer" timebase="" duration="100000" duration_units="ms"></action>
                  <action tag="Report FakeMouseTimer" full_name="Report Press" type="report" message="**DoAllCorrects starting lever press**"></action>
              </action>

              <action type="if" tag="if ! fakeMouse" condition="doLever">
                  <action type="start_timer" tag="Start fakeMouseTimer infinite" timer="fakeMouseTimer" timebase="" duration="100000" duration_units="ms"></action>
              </action>
              <action type="start_timer" tag="Start LeverHold Timer" timer="leverHoldTimer" timebase="" duration="tTotalReqHoldTimeMs" duration_units="ms"></action>
              <action tag="Report LeverDown" full_name="ReportDigital" type="report" message="LeverDown (need to hold for $tTotalReqHoldTimeMs + tooFastTime ms)"></action>
              <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
              <transition type="conditional" tag="If Lever Up, Go To EarlyRelease" condition="doAnalogLever==0 &amp;&amp; FIO1 == 0 &amp;&amp; doLever == 1 &amp;&amp; doAllCorrects==0" target="EarlyRelease"></transition>
              <transition type="conditional" tag="If Lever Up, Go To EarlyRelease" condition="doAnalogLever &amp;&amp; quadrature &lt; leverThreshold &amp;&amp; doLever == 1 &amp;&amp; doAllCorrects==0" target="EarlyRelease"></transition>
              <transition type="timer_expired" tag="If fakeMouseTimer expired, go to EarlyRelease" target="EarlyRelease" timer="fakeMouseTimer"></transition>
              <transition type="timer_expired" tag="If leverHoldTimer Expired, Go To StimOn" target="StimOn" timer="leverHoldTimer"></transition>
          </task_system_state>

          <task_system_state tag="StimOn" interruptible="YES">
            <action_marker _unmoveable="1" tag="Actions"></action_marker>

            <action type="start_timer" tag="Start Too Fast Timer" timer="tooFastTimer" timebase="" duration="tooFastTimeMs" duration_units="ms"></action>
            <action type="start_timer" tag="Start React Timer" timer="reactTimeTimer" timebase="" duration="reactTimeMs" duration_units="ms"></action>



            <action type="assignment" tag="Set StimulusOn" variable="stimulusOn" value="1"></action>
            <action tag="Report StimOn" full_name="ReportDigital" type="report" message="StimOn (still holding; signaling release ok)"></action>

            <!-- vis stim on -->
            <action type="if" condition="doVisualStim &amp;&amp; doNoStimulusChange==0">
              <action tag="Dequeue Stimulus" type="dequeue_stimulus" stimulus="base_grating"></action>
              <action tag="Queue Stimulus" type="queue_stimulus" stimulus="target_grating"></action>
              <action type="play_dynamic_stimulus" stimulus="target_grating" tag="start"></action>
              <action tag="Update Display" type="update_stimulus_display"></action>

              <action type="assignment" tag="Encode VisStimOn" variable="strobedDigitalWord" value="4"></action>
          </action>
          <action type="play_sound" sound="targetSound"/>

          <!-- laser stim on -->
          <action type="if" condition="doLaserStim">
              <action type="assignment" variable="laserTrigger" value="1"></action> 
              <action type="assignment" tag="Encode LaserStimOn" variable="strobedDigitalWord" value="5"></action>
          </action>

          <!-- update display, finalize variables -->
          <action type="assignment" variable="tStimTurnedOn" value="1"></action>


          <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
          <transition type="direct" tag="Always Go to CheckTooFastTime" target="CheckTooFastTime"></transition>
      </task_system_state>

      <task_system_state tag="CheckTooFastTime" interruptible="YES">

        <!-- turn off stimulus if longer than gratingDurationMs -->                     
        <action type="if" condition="tStimTurnedOn == 1">  <!-- so we only turn it off once here -->
          <action type="if" condition="(((now()/1000) - pressTimestampMs) - tTotalReqHoldTimeMs) > tGratingDurationMs">
            <action type="dequeue_stimulus" stimulus="target_grating"></action>
            <action type="update_stimulus_display"></action>
            <action type="if" condition="doITIStim==1">
              <action type="assignment" tag="set base stim contrast" variable="setBaseGratingContrast" value="itiContrast"></action>    
              <action tag="Queue Stimulus" type="live_queue_stimulus" stimulus="base_grating"></action>
              <action type="play_dynamic_stimulus" stimulus="base_grating" tag="start"></action>
          </action>  
          <action type="update_stimulus_display"></action>
          <action type="assignment" variable="tStimTurnedOn" value="0"></action>
      </action>
  </action>

  <transition type="timer_expired" tag="if tooFastTimer expired, go to React" target="React" timer="tooFastTimer"></transition>
  <transition type="conditional" tag="If LeverUp, go to EarlyRelease" condition="doAnalogLever==0 &amp;&amp; FIO1 == 0 &amp;&amp; doLever == 1 &amp;&amp; doAllCorrects==0" target="EarlyRelease"></transition>
  <transition type="conditional" tag="If LeverUp, go to EarlyRelease" condition="doAnalogLever &amp;&amp; (quadrature &lt; leverThreshold) &amp;&amp; doLever == 1 &amp;&amp; doAllCorrects==0" target="EarlyRelease"></transition>
  <transition type="timer_expired" tag="If fakeMouseTimer expired, go to EarlyRelease" target="EarlyRelease" timer="fakeMouseTimer"></transition>
  <transition type="direct" target="CheckTooFastTime"></transition>
</task_system_state>

<task_system_state tag="React" interruptible="YES">
    <action_marker _unmoveable="1" tag="Actions"></action_marker>

    <!-- turn off stimulus if longer than gratingDurationMs -->                     
    <action type="if" condition="tStimTurnedOn == 1">  <!-- so we only turn it off once here -->
      <action type="if" condition="(((now()/1000) - pressTimestampMs) - tTotalReqHoldTimeMs) > tGratingDurationMs">
        <action type="dequeue_stimulus" stimulus="target_grating"></action>
        <action type="if" condition="doITIStim">
          <action type="assignment" tag="set base stim contrast" variable="setBaseGratingContrast" value="itiContrast"></action>
          <action tag="Queue Stimulus" type="live_queue_stimulus" stimulus="base_grating"></action>    
          <action type="play_dynamic_stimulus" stimulus="base_grating" tag="start"></action>                            
      </action>
      <action type="update_stimulus_display"></action>
      <action type="assignment" variable="tStimTurnedOn" value="0"></action>
  </action>
</action>


<transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
<transition type="conditional" tag="If Lever Up, Go To Reward" condition="doAnalogLever==0 &amp;&amp; FIO1 == 0 &amp;&amp; doLever == 1 " target="Reward"></transition>
<transition type="conditional" tag="If Lever Up, Go To Reward" condition="doAnalogLever &amp;&amp; (quadrature &lt; leverThreshold) &amp;&amp; doLever == 1 " target="Reward"></transition>
<transition type="conditional" tag="If DoAllCorrects, Go To Reward" condition="doAllCorrects==1" target="Reward"></transition>
<transition type="timer_expired" tag="If fakeMouse expired, Transition to Reward" target="Reward" timer="fakeMouseTimer"></transition>
<transition type="timer_expired" tag="If React Time Expired, Go To Missed" target="Missed" timer="reactTimeTimer"></transition>
<transition type="direct" target="React"></transition> <!-- spin on this state to turn off stim if necessary -->
</task_system_state>

<task_system_state tag="EarlyRelease" interruptible="YES">
    <action_marker _unmoveable="1" tag="Actions"></action_marker>
    <action type="assignment" tag="leverResult = 0" variable="leverResult" value="0"></action>
    <action type="assignment" variable="laserTrigger" value="0"></action>
    <action type="if" condition="optic_device == 'led'">
        <action type="assignment" variable="tTrialLaserPowerMw" value="0"></action>
    </action>
    <action type="assignment" tag="Encode LeverReleaseEarly" variable="strobedDigitalWord" value="8"></action>

    <action type="assignment" variable="actualHoldTimeMs" value=" (now()/1000) - pressTimestampMs"></action>
    <action type="report" tag="Report" message="actualHoldTimeMs = $actualHoldTimeMs"></action>
    <action tag="ReportEarlyRelease" full_name="ReportDigital" type="report" message="** Early Release (FIO1 = $FIO1 )"></action>
    <!-- update running variables -->
    <action type="assignment" tag="failure++" variable="failure" value="failure+1"></action>
    <action type="assignment" tag="consecCorrects = 0" variable="consecCorrects" value="0"></action>
    <action type="assignment" variable="tConsecErrors" value="tConsecErrors+1"></action>

    <action tag="Play incorrectSound" type="play_sound" sound="incorrectSound"></action>

    <!-- reject stim selection -->
    <action type="reject_selections" selection="svStimNumber"></action>

    <action type="if" tag="if doLeverSolenoid/Early" condition="doLeverSolenoidAllTrials || doLeverSolenoidOnEarly">
      <action type="assignment" tag="lever Solenoid on" variable="MIO0" value="1"></action>
      <action type="assignment" tag="Encode LeverSolenoidOn" variable="strobedDigitalWord" value="12"></action>
  </action>
  <action tag="Dequeue Stimulus 0" type="dequeue_stimulus" stimulus="target_grating"></action>
  <action tag="Update Display" type="update_stimulus_display"></action>
  <action type="if" condition="doITIStim==1">
      <action type="assignment" tag="set base stim contrast" variable="setBaseGratingContrast" value="itiContrast"></action>
      <action tag="Queue Stimulus" type="live_queue_stimulus" stimulus="base_grating"></action>    
      <action type="play_dynamic_stimulus" stimulus="base_grating" tag="start"></action>
      <action tag="Update Display" type="update_stimulus_display"></action>
  </action> 
  <action type="if" condition="doITIStim==0">
      <action tag="Dequeue Stimulus" type="dequeue_stimulus" stimulus="base_grating"></action>    
      <action tag="Update Display" type="update_stimulus_display"></action>
  </action>  
  <action tag="Update Display" type="update_stimulus_display"></action>
  <action type="start_timer" tag="Start earlyTimeoutTimer" timer="earlyTimeoutTimer" timebase="" duration="earlyTimeoutMs" duration_units="ms"></action>
  <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
  <transition type="timer_expired" target="PossibleEndTimeout" timer="earlyTimeoutTimer"></transition>
</task_system_state>

<task_system_state tag="Reward" interruptible="YES">
    <action_marker _unmoveable="1" tag="Actions"></action_marker>
    <action type="assignment" tag="leverResult = 0" variable="leverResult" value="0"></action>
    <action type="assignment" variable="laserTrigger" value="0"></action>
    <action type="if" condition="optic_device == 'led'">
        <action type="assignment" variable="tTrialLaserPowerMw" value="0"></action>
    </action>
    <action type="assignment" tag="Encode LeverReleaseCorrect" variable="strobedDigitalWord" value="9"></action>

    <!-- accept stim selection -->
    <action type="accept_selections" selection="svStimNumber"></action>
    <action type="assignment" variable="tNStimAccepted" value="tNStimAccepted + 1"></action>

    <!-- update selection variable -->
    <action type="if" condition="tNStimAccepted >= 80">
      <action type="reset_selection" selection="svStimNumber"/>
      <action type="assignment" variable="tNStimAccepted" value="0"></action>
  </action>
  <action type="if" condition="tNStimAccepted &lt; 80">
      <action type="next_selection" selection="svStimNumber"/>
  </action>

  <action type="assignment" variable="actualHoldTimeMs" value=" (now()/1000) - pressTimestampMs"></action>
  <action type="report" tag="Report" message="actualHoldTimeMs = $actualHoldTimeMs"></action>
  <action tag="Report Reward" full_name="ReportDigital" type="report" message="** Success"></action>
  <!-- update running variables -->
  <action type="assignment" tag="success++" variable="success" value="success+1"></action>
  <action type="assignment" variable="tConsecErrors" value="0"></action>

  <action type="assignment" tag="Assign reward" variable="tTotalRewardTimeUs" value="minRewardUs + ( tRewardAddPerMsHoldUs * tRandReqHoldTimeMs )"></action>
  <action type="assignment" tag="summing corrects" variable="tempNCorrect" value="tempNCorrect+1"></action>


  <!-- assign reward size based on elapsed rand if rampdown == 0 -->
  <action type="if" condition="doBlock2 == 1">
      <action type="if" condition="doBlock2SeparateReward == 0">
        <action type="assignment" tag="Compute tRewardAddPerMsHoldUs" variable="tRewardAddPerMsHoldUs" 
          value="(maxRewardUs - minRewardUs) / ( randReqHoldMaxMs )"></action>
          <action type="assignment" tag="Assign tTotalRewardTimeUs" variable="tTotalRewardTimeUs" 
            value="minRewardUs + ( tRewardAddPerMsHoldUs * tRandReqHoldTimeMs )"></action>
        </action>
        <action type="if" condition="doBlock2SeparateReward == 1">
            <action type="if" condition="tBlock2TrialNumber == 0">
              <action type="assignment" tag="Compute tRewardAddPerMsHoldUs" variable="tRewardAddPerMsHoldUs" 
                value="(maxRewardUs - minRewardUs) / ( randReqHoldMaxMs )"></action>
                <action type="assignment" tag="Assign tTotalRewardTimeUs" variable="tTotalRewardTimeUs" 
                  value="minRewardUs + ( tRewardAddPerMsHoldUs * tRandReqHoldTimeMs )"></action>
              </action>
              <action type="if" condition="tBlock2TrialNumber == 1">
                  <action type="assignment" tag="Compute tRewardAddPerMsHoldUs" variable="tRewardAddPerMsHoldUs" 
                    value="(block2MaxRewardUs - block2MinRewardUs) / ( randReqHoldMaxMs )"></action>
                    <action type="assignment" tag="Assign tTotalRewardTimeUs" variable="tTotalRewardTimeUs" 
                      value="block2MinRewardUs + ( tRewardAddPerMsHoldUs * tRandReqHoldTimeMs )"></action>
                  </action>
              </action>
          </action>


          <!-- give reward on every N corrects -->
          <action type="if" condition= "tempNCorrect &lt; rewardEveryNCorrect">
           <action type="assignment" tag="Assign tTotalRewardTimeUs" variable="tTotalRewardTimeUs" value="0"></action>
       </action>
       <action type="if" condition="tempNCorrect == rewardEveryNCorrect">
           <action type="assignment" tag="rezero tempNCorrect" variable="tempNCorrect" value="0"></action>
       </action>

       <!-- scale based on consec corrects -->
       <action type="if" tag="if consecCorrects &lt; max" condition="consecCorrects &lt; maxConsecCorrects">
        <action type="assignment" tag="consecCorrects++" variable="consecCorrects" value="consecCorrects+1"></action>
    </action>
    <action type="assignment" tag="set tNRewards" variable="tNRewards" value="consecCorrects"></action>

    <action tag="Dequeue Stimulus 2" type="dequeue_stimulus" stimulus="target_grating"></action>
    <action type="if" condition="doITIStim==1">
        <action type="assignment" tag="set base stim contrast" variable="setBaseGratingContrast" value="itiContrast"></action>    
        <action tag="Queue Stimulus" type="live_queue_stimulus" stimulus="base_grating"></action>    
        <action type="play_dynamic_stimulus" stimulus="base_grating" tag="start"></action>
    </action>  
    <action tag="Update Display" type="update_stimulus_display"></action>
    <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
    <transition type="direct" tag="Always Go to GiveReward" target="GiveReward"></transition>
</task_system_state>

<task_system_state tag="GiveReward" interruptible="YES">
  <action_marker _unmoveable="1" tag="Actions"></action_marker>
  <action type="assignment" tag="tNRewards--" variable="tNRewards" value="tNRewards-1"></action>
  <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
  <transition type="conditional" tag="if rewards remain, go to SingleReward (note must be -1)" condition="tNRewards > -1" target="SingleReward"></transition>
  <transition type="direct" tag="Always Go to PRP" target="PostRewardPause"></transition>
</task_system_state>

<task_system_state tag="PostRewardPause" interruptible="YES">
  <action type="start_timer" tag="StartTimer" timer="postRewardTimer" timebase="" duration="postRewardMs" duration_units="ms"></action> 
  <action_marker _unmoveable="1" tag="Actions"></action_marker>
  <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
  <transition type="timer_expired" target="PossibleEndTimeout" timer="postRewardTimer"></transition>
</task_system_state>

<task_system_state tag="SingleReward" interruptible="YES">
  <action_marker _unmoveable="1" tag="Actions"></action_marker>
  <action type="assignment" tag="interRewardInterval minimum to juiceTime" variable="tInterRewardIntervalMs" value="interRewardIntervalMs + ( tTotalRewardTimeUs / 1000 )"></action>
  <action type="start_timer" tag="Start interRewardIntervalTimer" timer="interRewardIntervalTimer" timebase="" duration="tInterRewardIntervalMs" duration_units="ms"></action>
  <action type="assignment" tag="Start reward" variable="juice" value="tTotalRewardTimeUs"></action>
  <action type="assignment" tag="Encode Reward" variable="strobedDigitalWord" value="10"></action>
  <action tag="Play reward sound" type="play_sound" sound="rewardSound"></action>
  <action type="if" condition= "tempNCorrect == 0">
    <action type="report" tag="Report" message="juice = $juice"></action> 
</action>
<action type="if" condition= "tempNCorrect &gt; 0">
 <action type="if" condition= "tempNCorrect &lt; rewardEveryNCorrect">
    <action type="report" tag="Report" message="juice = $juice, $tempNCorrect correct: need $rewardEveryNCorrect"></action> 
</action>
</action>
<transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
<transition type="timer_expired" tag="If interRewardIntervalTimer expired, go to GiveReward" target="GiveReward" timer="interRewardIntervalTimer"></transition>
</task_system_state>

<task_system_state tag="Missed" interruptible="YES">
    <action_marker _unmoveable="1" tag="Actions"></action_marker>
    <action type="assignment" variable="laserTrigger" value="0"></action>
    <action type="if" condition="optic_device == 'led'">
        <action type="assignment" variable="tTrialLaserPowerMw" value="0"></action>
    </action>
    <action type="assignment" tag="leverResult = 0" variable="leverResult" value="0"></action>
    <action type="assignment" tag="Encode LeverNoReleaseMiss" variable="strobedDigitalWord" value="11"></action>
    <action type="assignment" variable="actualHoldTimeMs" value=" (now()/1000) - pressTimestampMs"></action>
    <action type="report" tag="Report" message="actualHoldTimeMs = $actualHoldTimeMs"></action>
    <action type="assignment" tag="ignore++" variable="ignore" value="ignore + 1"></action>
    <action type="assignment" tag="consecCorrects = 0" variable="consecCorrects" value="0"></action>
    <action type="assignment" variable="tConsecErrors" value="tConsecErrors+1"></action>
    <action tag="Report 4" full_name="ReportDigital" type="report" message="** Ignored react stimulus"></action>
    <action tag="Play incorrectSound 2" type="play_sound" sound="incorrectSound"></action>

    <!-- accept stim selection -->
    <action type="accept_selections" selection="svStimNumber"></action>
    <action type="assignment" variable="tNStimAccepted" value="tNStimAccepted + 1"></action>

    <!-- update selection variable -->
    <action type="if" condition="tNStimAccepted >= 80">
      <action type="reset_selection" selection="svStimNumber"/>
      <action type="assignment" variable="tNStimAccepted" value="0"></action>
  </action>
  <action type="if" condition="tNStimAccepted &lt; 80">
      <action type="next_selection" selection="svStimNumber"/>
  </action>

  <action type="start_timer" tag="start timer" timer="missedTimeoutTimer" timebase="" duration="missedTimeoutMs" duration_units="ms"></action>
  <action type="if" tag="if doLeverSolenoid/ErrorsOnly" condition="doLeverSolenoidAllTrials || doLeverSolenoidOnMiss">
      <action type="assignment" tag="lever Solenoid on" variable="MIO0" value="1"></action>
      <action type="assignment" tag="Encode LeverSolenoidOn" variable="strobedDigitalWord" value="12"></action>
  </action>
  <action tag="Dequeue Stimulus 1" type="dequeue_stimulus" stimulus="target_grating"></action>
  <action type="if" condition="doITIStim==1">
      <action type="assignment" tag="set base stim contrast" variable="tBaseGratingContrast" value="itiContrast"></action>
      <action tag="Queue Stimulus" type="live_queue_stimulus" stimulus="base_grating"></action>    
      <action type="play_dynamic_stimulus" stimulus="base_grating" tag="start"></action>
  </action>
  <action tag="Update Display" type="update_stimulus_display"></action>
  <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
  <transition type="timer_expired" target="PossibleEndTimeout" timer="missedTimeoutTimer"></transition>
</task_system_state>


<task_system_state tag="PossibleEndTimeout" interruptible="YES">    
            <!-- do timeout if too many recent errors:
            use a state rather than a wait action because states are interruptible -->
            <action type="if" condition="tConsecErrors >= nConsecErrorsCauseTimeout">
              <action type="report" message="***!!*** $consecErrorTimeoutS s timeout after $tConsecErrors consecutive errors"></action>
              <action type="start_timer" timer="consecErrorTimer" timebase="" duration="consecErrorTimeoutS" duration_units="s"></action>
              <action type="if" condition="doSolenoidOnTimeout==1">
                <action type="assignment" tag="lever Solenoid on" variable="MIO0" value="1"></action>
              </action>
          </action>

          <transition type="conditional" tag="- bypass timer checking if no timeout requested" 
              condition="tConsecErrors &lt; nConsecErrorsCauseTimeout" target="EndTrial"></transition>
              <transition type="timer_expired" target="EndTrial" timer="consecErrorTimer"></transition>
          </task_system_state>


          <task_system_state tag="EndTrial" interruptible="YES">
              <action_marker _unmoveable="1" tag="Actions"></action_marker>

              <action type="assignment" variable="laserTrigger" value="0"></action> <!-- disable trigger no matter if it went high or not -->
              <action type="if" condition="optic_device == 'led'">
                <action type="assignment" variable="tTrialLaserPowerMw" value="0"></action>
            </action>
            <action tag="Stop IO Device" type="stop_device_IO" device="LabJackU6"></action>
            <action tag="Dequeue Stimulus 0" type="dequeue_stimulus" stimulus="target_grating"></action>
            <action tag="Update Stimulus" type="update_stimulus_display"></action>
            <action type="if" condition="doITIStim == 0">
                <action tag="Dequeue Stimulus 0" type="dequeue_stimulus" stimulus="base_grating"></action>
                <action tag="Update Stimulus" type="update_stimulus_display"></action>
            </action>

            <action type="assignment" tag="End Matlab Sync" variable="sync" value="0"></action>

            <!-- allow two trials after each timeout is over -->
            <action type="if" condition="tConsecErrors == nConsecErrorsCauseTimeout">
                <action type="assignment" variable="tConsecErrors" value="nConsecErrorsCauseTimeout-2"/>  
            </action>

            <action type="assignment" tag="Encode END" variable="strobedDigitalWord" value="85"></action>
            <action type="assignment" tag="Encode END" variable="strobedDigitalWord" value="85"></action>
            <action type="assignment" tag="Encode END" variable="strobedDigitalWord" value="85"></action>

            <!-- trigger serial param dump to cyberkinetics -->
            <action type="assignment" tag="Send serial params" variable="sendSerialParams" value="1"></action>
            <action type="assignment" tag="Send serial params" variable="sendSerialParams" value="0"></action>

            <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
            <transition type="yield" tag="return to parent task system"></transition>
        </task_system_state>

    </task_system>
</trial>
<action type="dequeue_stimulus" stimulus="base_grating"></action>
<action tag="Update Stimulus" type="update_stimulus_display"></action>
</protocol>
</experiment>
</monkeyml>

