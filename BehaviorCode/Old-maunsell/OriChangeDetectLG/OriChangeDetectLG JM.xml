<?xml version="1.0"?>
<monkeyml version="1.0">
    <io_devices tag="IO Devices">
        <iodevice tag="LabJackU6" priority="" type="LabJackU6" pulse_duration="juice" pulse_on="juice" lever1="FIO1" lever2="" lever1_solenoid="FIO2" lever2_solenoid="" laser_trigger="laserTriggerFIO" strobed_digital_word="strobedDigitalWord"></iodevice>
        <iodevice tag="FakeMonkey" priority="" type="fake_monkey" id="" alt="" spike_rate="10"></iodevice>
        <iodevice type="serverside_conduit" tag="Server-side Event Conduit" resource_name="server_conduit"></iodevice>
    </io_devices>
    <variables tag="Variables">
        <folder tag="Behavioral Control">
            <variable tag="subjectNum" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="experimentXmlTrialId" scope="global" logging="when_changed" default_value="8" type="integer" persistant="1"></variable>
            <variable tag="doLeverSolenoidAllTrials" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="doLeverSolenoidOnMiss" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="doLeverSolenoidOnEarly" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="tooFastTimeMs" scope="global" logging="when_changed" default_value="100" type="integer" persistant="1"></variable>
            <variable tag="randReqHoldMaxMs" scope="global" logging="when_changed" default_value="300" type="integer" persistant="1"></variable>
            <variable tag="fixedReqHoldTimeMs" scope="global" logging="when_changed" default_value="400" type="integer" persistant="1"></variable>
            <variable tag="doGeomHoldDist" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="geomHoldMeanMs" scope="global" logging="when_changed" default_value="1" type="integer" persistant="1"></variable>
            <variable tag="reactTimeMs" scope="global" logging="when_changed" default_value="1000" type="integer" persistant="1"></variable>
            <variable tag="earlyTimeoutMs" scope="global" logging="when_changed" default_value="200" type="integer" persistant="1"></variable>
            <variable tag="missedTimeoutMs" scope="global" logging="when_changed" default_value="2000" type="integer" persistant="1"></variable>
            <variable tag="itiTimeMs" scope="global" logging="when_changed" default_value="750" type="integer" persistant="1"></variable>
            <variable tag="itiExtraRandTimeMs" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="doExtendItiOnShortPrevTrial" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="postRewardMs" scope="global" logging="when_changed" default_value="500" type="integer" persistant="1"></variable>
            <variable tag="minRewardUs" scope="global" logging="when_changed" default_value="20000" type="integer" persistant="1"></variable>
            <variable tag="maxRewardUs" scope="global" logging="when_changed" default_value="20000" type="integer" persistant="1"></variable>
            <variable tag="interRewardIntervalMs" scope="global" logging="when_changed" default_value="200" type="integer" persistant="1"></variable>
            <variable tag="maxConsecCorrects" scope="global" logging="when_changed" default_value="1" type="integer" persistant="1"></variable>
            <variable tag="nConsecErrorsCauseTimeout" scope="global" logging="when_changed" default_value="10" type="integer" persistant="1"></variable>
            <variable tag="consecErrorTimeoutS" scope="global" logging="when_changed" default_value="120" type="integer" persistant="1"></variable>
            <variable tag="doLongBonus" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="longBonusExtraHoldTimeMs" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="longBonusExtraRewardUs" scope="global" logging="when_changed" default_value="120000" type="integer" persistant="1"></variable>
        </folder>
        <folder tag="Stimuli">
            <variable tag="gratingContrast" scope="global" logging="when_changed" default_value="1" type="integer"></variable>
            <variable tag="gratingElevationDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="1"></variable>
            <variable tag="gratingAzimuthDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="1"></variable>
            <variable tag="gratingHeightDeg" scope="global" logging="when_changed" default_value="200" type="integer" persistant="1"></variable>
            <variable tag="gratingWidthDeg" scope="global" logging="when_changed" default_value="200" type="integer" persistant="1"></variable>
            <variable tag="gratingSpatialFreqCPD" scope="global" logging="when_changed" default_value="0.05" type="float" persistant="1"></variable>
            <variable tag="gratingSpeedDPS" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="gratingDurationMs" scope="global" logging="when_changed" default_value="800" type="integer" persistant="1"></variable>
            <variable tag="doVisualStim" scope="global" logging="when_changed" default_value="1" type="integer" persistant="1"></variable>
            <variable tag="doLaserStim" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="trPer80Level1" scope="global" logging="when_changed" default_value="10" type="integer" persistant="1"></variable>
            <variable tag="trPer80Level2" scope="global" logging="when_changed" default_value="10" type="integer" persistant="1"></variable>
            <variable tag="trPer80Level3" scope="global" logging="when_changed" default_value="10" type="integer" persistant="1"></variable>
            <variable tag="trPer80Level4" scope="global" logging="when_changed" default_value="10" type="integer" persistant="1"></variable>
            <variable tag="trPer80Level5" scope="global" logging="when_changed" default_value="10" type="integer" persistant="1"></variable>
            <variable tag="trPer80Level6" scope="global" logging="when_changed" default_value="10" type="integer" persistant="1"></variable>
            <variable tag="trPer80Level7" scope="global" logging="when_changed" default_value="10" type="integer" persistant="1"></variable>
            <variable tag="trPer80Level8" scope="global" logging="when_changed" default_value="10" type="integer" persistant="1"></variable>
            <variable tag="doBlock2" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="block2DoRampLength" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="block2RampLengthMs2" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="block2RampLengthPowerMaxMw2" scope="global" logging="when_changed" default_value="0" type="float" persistant="1"></variable>
            <variable tag="block2DoGratingAppearance" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="block2GratingContrast" scope="global" logging="when_changed" default_value="0" type="float" persistant="1"></variable>
            <variable tag="block2GratingElevationDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="1"></variable>
            <variable tag="block2GratingAzimuthDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="1"></variable>
            <variable tag="block2GratingHeightDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="1"></variable>
            <variable tag="block2GratingWidthDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="1"></variable>
            <variable tag="block2GratingSpatialFreqCPD" scope="global" logging="when_changed" default_value="0" type="float" persistant="1"></variable>
            <variable tag="block2GratingSpeedDPS" scope="global" logging="when_changed" default_value="0" type="float" persistant="1"></variable>
            <variable tag="block2GratingDurationMs" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="block2GratingBaseDirection" scope="global" logging="when_changed" default_value="0" type="float" persistant="1"></variable>
            <variable tag="block2GratingDirectionStepDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="1"></variable>
            <variable tag="block2DoRampVTrain" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="block2RvtTrainPowerMaxMw" scope="global" logging="when_changed" default_value="0" type="float" persistant="1"></variable>
            <variable tag="block2RvtTrainStepsPerOctave" scope="global" logging="when_changed" default_value="0" type="float" persistant="1"></variable>
            <variable tag="block2DoTrialLaser" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="block2TrialLaserPowerMw" scope="global" logging="when_changed" default_value="0" type="float" persistant="1"></variable>
            <variable tag="block2TrialLaserOnTimeMs" scope="global" logging="when_changed" default_value="0" type="float" persistant="1"></variable>
            <variable tag="block2TrialLaserOffTimeMs" scope="global" logging="when_changed" default_value="0" type="float" persistant="1"></variable>
            <variable tag="block2TrialLaserGratingContrast" scope="global" logging="when_changed" default_value="0" type="float" persistant="1"></variable>
            <variable tag="block2TrialLaserBaseDirection" scope="global" logging="when_changed" default_value="0" type="float" persistant="1"></variable>
            <variable tag="block2TrialLaserDirectionStepDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="1"></variable>
            <variable tag="gratingBaseDirection" scope="global" logging="when_changed" default_value="1" type="float" persistant="1"></variable>
            <variable tag="gratingDirectionStepDeg" scope="global" logging="when_changed" default_value="2" type="float" persistant="1"></variable>
            <variable tag="laserPeakMaxMw" scope="global" logging="when_changed" default_value="20" type="integer" persistant="1"></variable>
            <variable tag="laserPeakStepsPerOctave" scope="global" logging="when_changed" default_value="2" type="integer" persistant="1"></variable>
            <variable tag="laserOffPowerMw" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="laserTransitionRampUpDownMs" scope="global" logging="when_changed" default_value="2" type="integer" persistant="1"></variable>
            <variable tag="laserTransitionDoExpRamp" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="laserDoLinearRamp" scope="global" logging="when_changed" default_value="1" type="integer" persistant="1"></variable>
            <variable tag="laserRampLengthMs" scope="global" logging="when_changed" default_value="100" type="integer" persistant="1"></variable>
            <variable tag="laserRampExtraConstantLengthMs" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="laserRampDoExpRamp" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="laserDoPulseTrain" scope="global" logging="when_changed" default_value="0" type="integer" persistant="1"></variable>
            <variable tag="laserPulseLengthMs" scope="global" logging="when_changed" default_value="5" type="integer" persistant="1"></variable>
            <variable tag="laserPulsePeriodMs" scope="global" logging="when_changed" default_value="20" type="integer" persistant="1"></variable>
            <variable tag="laserTrainLengthMs" scope="global" logging="when_changed" default_value="100" type="integer" persistant="1"></variable>
            <variable tag="trialLaserPowerMw" scope="global" logging="when_changed" default_value="0" type="float" persistant="1"></variable>
            <variable tag="trialLaserOnTimeMs" scope="global" logging="when_changed" default_value="0" type="float" persistant="1"></variable>
            <variable tag="trialLaserOffTimeMs" scope="global" logging="when_changed" default_value="0" type="float" persistant="1"></variable>
            <variable tag="forceMinStimStepTo" scope="global" logging="when_changed" default_value="-1" type="float" persistant="1"></variable>
        </folder>
        <folder tag="Fake Mouse">
            <variable tag="doLever" scope="global" logging="when_changed" default_value="0" type="boolean" persistant="1"></variable>
            <variable tag="fakeMouseMaxPressMs" scope="global" logging="when_changed" default_value="300" type="integer" persistant="1"></variable>
            <variable tag="fakeMouseMaxReactMs" scope="global" logging="when_changed" default_value="5000" type="integer" persistant="1"></variable>
        </folder>
        <folder tag="Task Status">
            <variable tag="failure" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="leverResult" scope="global" logging="when_changed" default_value="0" type="boolean"></variable>
            <variable tag="stimulusOn" scope="global" logging="when_changed" default_value="0" type="boolean"></variable>
            <variable tag="success" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="ignore" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="trialStart" scope="global" logging="when_changed" default_value="0" type="boolean"></variable>
            <variable tag="pressTimestampMs" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"></variable>
            <variable tag="actualHoldTimeMs" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"></variable>
        </folder>
        <folder tag="Online Display">
            <variable tag="sync" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
        </folder>
        <folder tag="Hardware variables">
            <variable tag="FIO1" full_name="FIO1" default_value="0" scope="GLOBAL" type="INTEGER" editable="never" logging="when_changed"></variable>
            <variable tag="FIO2" full_name="FIO2" default_value="0" scope="GLOBAL" type="boolean" editable="never" logging="when_changed"></variable>
            <variable tag="laserTriggerFIO" full_name="laserTriggerFIO" default_value="0" scope="GLOBAL" type="boolean" logging="when_changed" persistant="0"></variable>
            <variable tag="strobedDigitalWord" full_name="strobedDigitalWord" default_value="0" scope="GLOBAL" type="integer" logging="when_changed" persistant="0"></variable>
            <variable tag="juice" full_name="juice" scope="GLOBAL" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="sendLaserParams" full_name="sendLaserParams" scope="GLOBAL" logging="when_changed" default_value="0" type="integer" persistant="0"></variable>
            <variable tag="sendSerialParams" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"></variable>
        </folder>
        <folder tag="Internal Variables">
            <variable tag="tTrialStartMWTimestampMs" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"></variable>
            <variable tag="tTotalReqHoldTimeMs" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="tTotalRewardTimeUs" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="tRandReqHoldTimeMs" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="tFakeMouseReactMs" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="tFakeMousePressMs" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="tStartTrialWaitForPressTimeMs" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="consecCorrects" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="tConsecErrors" scope="global" logging="when_changed" default_value="0" persistent="0" type="integer"></variable>
            <variable tag="tConsecTimeoutStartTime" scope="global" logging="when_changed" default_value="0" persistent="0" type="integer"></variable>
            <variable tag="tNRewards" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="tInterRewardIntervalMs" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="tRewardAddPerMsHoldUs" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="tGotLongBonusThisTrial" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="tStimTurnedOn" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="tItiWaitTimeMs" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="tThisTrialStartTimeMs" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="tLastTrialStartTimeMs" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="lastActualHoldTimeMs" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="tempMs" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
            <variable tag="tTempStimOdds" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"></variable>
            <variable tag="tStimulusNumber" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"></variable>
            <variable tag="tSvStimNumber" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"></variable>
            <variable tag="tLaserPowerMw" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"></variable>
            <variable tag="tLaserDoLinearRamp" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"></variable>
            <variable tag="tLaserDoPulseTrain" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"></variable>
            <variable tag="tLaserRampLengthMs" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"></variable>
            <variable tag="tLaserPeakMaxMw" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"></variable>
            <variable tag="tGratingBaseDirection" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"></variable>
            <variable tag="tGratingDirectionStepDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"></variable>
            <variable tag="tLaserPeakStepsPerOctave" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"></variable>
            <variable tag="tGratingAlphaMultiplier" scope="global" logging="when_changed" default_value="1" type="float" persistant="0"></variable>
            <variable tag="tGratingDirectionDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"></variable>
            <variable tag="tGratingElevationDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"></variable>
            <variable tag="tGratingAzimuthDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"></variable>
            <variable tag="tGratingHeightDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"></variable>
            <variable tag="tGratingWidthDeg" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"></variable>
            <variable tag="tGratingSpatialFreqCPD" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"></variable>
            <variable tag="tGratingSpeedDPS" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"></variable>
            <variable tag="tGratingDurationMs" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"></variable>
            <variable tag="tTrialLaserPowerMw" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"></variable>
            <variable tag="tTrialLaserOnTimeMs" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"></variable>
            <variable tag="tTrialLaserOffTimeMs" scope="global" logging="when_changed" default_value="0" type="float" persistant="0"></variable>
            <variable tag="tBlock2TrialNumber" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"></variable>
            <variable tag="tNStimAccepted" scope="global" logging="when_changed" default_value="0" type="integer" persistant="0"></variable>
            <variable type="selection" tag="svStimNumber" values="0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79" selection="random_without_replacement" nsamples="80" sampling_method="samples"></variable>
        </folder>
    </variables>
    <sounds tag="Sounds">
        <sound tag="louderPressSound" type="wav_file" path="../wavs/louderFlatterPress.wav"></sound>
        <sound tag="waitingForLeverSound" type="wav_file" path="../wavs/trialStart-F10e-short.wav"></sound>
        <sound tag="correctSound" type="wav_file" path="../wavs/shortCorrect.wav"></sound>
        <sound tag="incorrectSound" type="wav_file" path="../wavs/incorrectMouse.wav"></sound>
        <sound tag="holdSound" type="wav_file" path="../wavs/quietHold.wav"></sound>
        <sound tag="rewardSound" type="wav_file" path="../wavs/shortCorrect.wav"></sound>
    </sounds>
    <stimuli tag="Stimuli">
        <stimulus type="blank_screen" tag="background" color="0.5,0.5,0.5"></stimulus>
        <stimulus type="drifting_grating" tag="base_grating" direction="0" starting_phase="0" spatial_frequency="tGratingSpatialFreqCPD" speed="tGratingSpeedDPS" grating_type="sinusoid" mask="gaussian" std_dev="0.3" mean="0.1" x_size="tGratingWidthDeg" y_size="tGratingHeightDeg" x_position="tGratingAzimuthDeg" y_position="tGratingElevationDeg" rotation="tGratingBaseDirection" alpha_multiplier="tGratingAlphaMultiplier"></stimulus>
        <stimulus type="drifting_grating" tag="target_grating" direction="0" starting_phase="0" spatial_frequency="tGratingSpatialFreqCPD" speed="tGratingSpeedDPS" grating_type="sinusoid" mask="gaussian" std_dev="0.3" mean="0.1" x_size="tGratingWidthDeg" y_size="tGratingHeightDeg" x_position="tGratingAzimuthDeg" y_position="tGratingElevationDeg" rotation="tGratingDirectionDeg" alpha_multiplier="tGratingAlphaMultiplier"></stimulus>
    </stimuli>
    <experiment tag="Experiment" full_name="a">
        <protocol tag="JuiceOnHoldProtocol" full_name="b" selection="sequential" nsamples="1" sampling_method="cycles" description="" interruptible="YES">
            <action type="queue_stimulus" tag="queue background stimulus" stimulus="background"></action>
            <action type="if" tag="if doVisualStim" condition="doVisualStim">
                <action tag="queue base_grating" type="live_queue_stimulus" stimulus="base_grating"></action>
                <action type="play_dynamic_stimulus" stimulus="base_grating" tag="start base_grating"></action>
            </action>
            <action type="update_stimulus_display" tag="update stimulus display"></action>
            <action type="assignment" tag="consecCorrects = 0" variable="consecCorrects" value="0"></action>
            <action type="assignment" tag="tconsecCorrect = 0" variable="tConsecErrors" value="0"></action>
            <action type="assignment" tag="juice = 0" variable="juice" value="0"></action>
            <action type="if" tag="zero counteres" condition="success+ignore+failure == 0">
                <action type="report" tag="report initializing variables" message="**** First trial since experiment load - initializing"></action>
                <action type="assignment" tag="set tLastTrialStartTimeMs" variable="tLastTrialStartTimeMs" value="-1"></action>
                <action type="assignment" tag="tThisTrialStartTimeMs" variable="tThisTrialStartTimeMs" value="-1"></action>
                <action type="assignment" tag="lastActualHoldTimeMs" variable="lastActualHoldTimeMs" value="0"></action>
                <action tag="svStimNumber" type="reset_selection" selection="svStimNumber"></action>
                <action type="assignment" tag="tNStimAccepted" variable="tNStimAccepted" value="0"></action>
            </action>
            <trial tag="Trial 01" nsamples="10000" sampling_method="cycles" selection="sequential">
                <task_system tag="Task System" full_name="TS" interruptable="YES" description="" interruptible="YES" _error="Task Systems must contain >=1 transition that yields to parent">
                    <task_system_state tag="Intertrial" interruptible="YES">
                        <action_marker _unmoveable="1" tag="Actions"></action_marker>
                        <action tag="Start IO Device" type="start_device_IO" device="LabJackU6"></action>
                        <action type="assignment" variable="tTrialStartMWTimestampMs" value="now()/1000" tag="set tTrialStartMWTimestampMs"></action>
                        <action type="assignment" tag="encode START" variable="strobedDigitalWord" value="170"></action>
                        <action type="assignment" tag="encode START" variable="strobedDigitalWord" value="170"></action>
                        <action type="assignment" tag="encode START" variable="strobedDigitalWord" value="170"></action>
                        <action type="assert" condition="tTrialStartMWTimestampMs &lt;= 2147483648" message="tTrialStartMWTimestampMs is too large - should happen only after several days of running!?" stop_on_failure="1" tag="assert tTrialStartMWTimestampMs &lt;= 2147483648"></action>
                        <action type="assignment" tag="encode TIMESTAMPSTART" variable="strobedDigitalWord" value="200"></action>
                        <action type="assignment" variable="strobedDigitalWord" value="tTrialStartMWTimestampMs/1000/1000000" tag="encode"></action>
                        <action type="assignment" variable="strobedDigitalWord" value="(tTrialStartMWTimestampMs- (tTrialStartMWTimestampMs/1000000000)*1000000000) /1000000" tag="encode"></action>
                        <action type="assignment" variable="strobedDigitalWord" value="(tTrialStartMWTimestampMs- (tTrialStartMWTimestampMs/1000000)*1000000) /1000" tag="encode"></action>
                        <action type="assignment" variable="strobedDigitalWord" value="(tTrialStartMWTimestampMs - (tTrialStartMWTimestampMs/1000)*1000)" tag="encode"></action>
                        <action type="assignment" tag="encode TIMESTAMPEND" variable="strobedDigitalWord" value="201"></action>
                        <action type="assignment" tag="Sync Matlab" variable="sync" value="1"></action>
                        <action type="assignment" tag="Set trialStart" variable="trialStart" value="1"></action>
                        <action type="assignment" tag="juice = 0" variable="juice" value="0"></action>
                        <action type="assignment" tag="leverResult = 0" variable="leverResult" value="0"></action>
                        <action type="assignment" tag="laserTriggerFIO = 0" variable="laserTriggerFIO" value="0"></action>
                        <action type="assignment" tag="set lastActualHoldTimeMs" variable="lastActualHoldTimeMs" value="actualHoldTimeMs"></action>
                        <action type="assignment" tag="set experimentXmlTrialId" variable="experimentXmlTrialId" value="8"></action>
                        <action type="assignment" variable="tGotLongBonusThisTrial" value="0" tag="set tGotLongBonusThisTrial"></action>
                        <action type="assignment" tag="set tStimTurnedOn" variable="tStimTurnedOn" value="0"></action>
                        <action type="assignment" tag="set tSvStimNumber" variable="tSvStimNumber" value="svStimNumber"></action>
                        <action type="assignment" tag="set tTempStimOdds" variable="tTempStimOdds" value="0"></action>
                        <action type="if" tag="if tSvStimNumber > ..." condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+trPer80Level1))">
                            <action type="assignment" tag="set tStimulusNumber" variable="tStimulusNumber" value="0"></action>
                            <action type="if" tag="if doBlock2" condition="doBlock2">
                                <action type="assignment" tag="set tBlock2TrialNumber" variable="tBlock2TrialNumber" value="(int)((tSvStimNumber-tTempStimOdds) &lt;= (((int)trPer80Level1-1)/2))"></action>
                            </action>
                        </action>
                        <action type="assignment" tag="set tTempStimOdds" variable="tTempStimOdds" value="tTempStimOdds + trPer80Level1"></action>
                        <action type="if" tag="-" condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+trPer80Level2))">
                            <action type="assignment" tag="-" variable="tStimulusNumber" value="1"></action>
                            <action type="if" tag="-" condition="doBlock2">
                                <action type="assignment" tag="-" variable="tBlock2TrialNumber" value="(int)((tSvStimNumber-tTempStimOdds) &lt;= (((int)trPer80Level2-1)/2))"></action>
                            </action>
                        </action>
                        <action type="assignment" tag="-" variable="tTempStimOdds" value="tTempStimOdds + trPer80Level2"></action>
                        <action type="if" tag="-" condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+trPer80Level3))">
                            <action type="assignment" tag="-" variable="tStimulusNumber" value="2"></action>
                            <action type="if" tag="-" condition="doBlock2">
                                <action type="assignment" tag="-" variable="tBlock2TrialNumber" value="(int)((tSvStimNumber-tTempStimOdds) &lt;= (((int)trPer80Level3-1)/2))"></action>
                            </action>
                        </action>
                        <action type="assignment" tag="-" variable="tTempStimOdds" value="tTempStimOdds + trPer80Level3"></action>
                        <action type="if" tag="-" condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+trPer80Level4))">
                            <action type="assignment" tag="-" variable="tStimulusNumber" value="3"></action>
                            <action type="if" tag="-" condition="doBlock2">
                                <action type="assignment" tag="-" variable="tBlock2TrialNumber" value="(int)((tSvStimNumber-tTempStimOdds) &lt;= (((int)trPer80Level4-1)/2))"></action>
                            </action>
                        </action>
                        <action type="assignment" tag="-" variable="tTempStimOdds" value="tTempStimOdds + trPer80Level4"></action>
                        <action type="if" tag="-" condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+trPer80Level5))">
                            <action type="assignment" tag="-" variable="tStimulusNumber" value="4"></action>
                            <action type="if" tag="-" condition="doBlock2">
                                <action type="assignment" tag="-" variable="tBlock2TrialNumber" value="(int)((tSvStimNumber-tTempStimOdds) &lt;= (((int)trPer80Level5-1)/2))"></action>
                            </action>
                        </action>
                        <action type="assignment" tag="-" variable="tTempStimOdds" value="tTempStimOdds + trPer80Level5"></action>
                        <action type="if" tag="-" condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+trPer80Level6))">
                            <action type="assignment" tag="-" variable="tStimulusNumber" value="5"></action>
                            <action type="if" tag="-" condition="doBlock2">
                                <action type="assignment" tag="-" variable="tBlock2TrialNumber" value="(int)((tSvStimNumber-tTempStimOdds) &lt;= (((int)trPer80Level6-1)/2))"></action>
                            </action>
                        </action>
                        <action type="assignment" tag="-" variable="tTempStimOdds" value="tTempStimOdds + trPer80Level6"></action>
                        <action type="if" tag="-" condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+trPer80Level7))">
                            <action type="assignment" tag="-" variable="tStimulusNumber" value="6"></action>
                            <action type="if" tag="-" condition="doBlock2">
                                <action type="assignment" tag="-" variable="tBlock2TrialNumber" value="(int)((tSvStimNumber-tTempStimOdds) &lt;= (((int)trPer80Level7-1)/2))"></action>
                            </action>
                        </action>
                        <action type="assignment" tag="-" variable="tTempStimOdds" value="tTempStimOdds + trPer80Level7"></action>
                        <action type="if" tag="-" condition="tSvStimNumber >= tTempStimOdds &amp;&amp; (tSvStimNumber &lt; (tTempStimOdds+trPer80Level8))">
                            <action type="assignment" tag="-" variable="tStimulusNumber" value="7"></action>
                            <action type="if" tag="-" condition="doBlock2">
                                <action type="assignment" tag="-" variable="tBlock2TrialNumber" value="(int)((tSvStimNumber-tTempStimOdds) &lt;= (((int)trPer80Level8-1)/2))"></action>
                            </action>
                        </action>
                        <action type="assignment" tag="-" variable="tTempStimOdds" value="tTempStimOdds + trPer80Level8"></action>
                        <action type="assert" stop_on_failure="1" condition="tTempStimOdds == 80" message="stim odds must sum to 80! (sum now is $tTempStimOdds )"></action>
                        <action type="if" condition="doBlock2">
                            <action type="assert" condition="trPer80Level1-(((int)trPer80Level1)/2)*2 == 0" stop_on_failure="1" message="When doBlock2, all odds must be div. by 2"></action>
                            <action type="assert" condition="trPer80Level2-(((int)trPer80Level2)/2)*2 == 0" stop_on_failure="1" message="When doBlock2, all odds must be div. by 2"></action>
                            <action type="assert" condition="trPer80Level3-(((int)trPer80Level3)/2)*2 == 0" stop_on_failure="1" message="When doBlock2, all odds must be div. by 2"></action>
                            <action type="assert" condition="trPer80Level4-(((int)trPer80Level4)/2)*2 == 0" stop_on_failure="1" message="When doBlock2, all odds must be div. by 2"></action>
                            <action type="assert" condition="trPer80Level5-(((int)trPer80Level5)/2)*2 == 0" stop_on_failure="1" message="When doBlock2, all odds must be div. by 2"></action>
                            <action type="assert" condition="trPer80Level6-(((int)trPer80Level6)/2)*2 == 0" stop_on_failure="1" message="When doBlock2, all odds must be div. by 2"></action>
                            <action type="assert" condition="trPer80Level7-(((int)trPer80Level7)/2)*2 == 0" stop_on_failure="1" message="When doBlock2, all odds must be div. by 2"></action>
                            <action type="assert" condition="trPer80Level8-(((int)trPer80Level8)/2)*2 == 0" stop_on_failure="1" message="When doBlock2, all odds must be div. by 2"></action>
                        </action>
                        <action type="if" condition="doLongBonus">
                            <action type="assert" condition="longBonusExtraHoldTimeMs > (tooFastTimeMs+20)" stop_on_failure="1" message="When doLongBonus, tooFastTime must be short"></action>
                        </action>
                        <action type="if" condition="doBlock2">
                            <action type="assert" stop_on_failure="1" condition="(block2DoGratingAppearance+block2DoRampLength+block2DoRampVTrain+block2DoTrialLaser) == 1" message="must select exactly one of block2Do variables!"></action>
                            <action type="if" condition="block2DoGratingAppearance">
                                <action type="assert" condition="doVisualStim == 1" stop_on_failure="1" message="doVisualStim must be 1 for block2DoGratingAppearance == 1"></action>
                                <action type="assignment" variable="tTrialLaserPowerMw" value="trialLaserPowerMw"></action>
                                <action type="if" condition="tBlock2TrialNumber == 0">
                                    <action type="assignment" variable="tGratingAlphaMultiplier" value="gratingContrast"></action>
                                    <action type="assignment" variable="tGratingElevationDeg" value="gratingElevationDeg"></action>
                                    <action type="assignment" variable="tGratingAzimuthDeg" value="gratingAzimuthDeg"></action>
                                    <action type="assignment" variable="tGratingHeightDeg" value="gratingHeightDeg"></action>
                                    <action type="assignment" variable="tGratingWidthDeg" value="gratingWidthDeg"></action>
                                    <action type="assignment" variable="tGratingSpatialFreqCPD" value="gratingSpatialFreqCPD"></action>
                                    <action type="assignment" variable="tGratingSpeedDPS" value="gratingSpeedDPS"></action>
                                    <action type="assignment" variable="tGratingDurationMs" value="gratingDurationMs"></action>
                                    <action type="assignment" tag="-" variable="tGratingBaseDirection" value="gratingBaseDirection"></action>
                                    <action type="assignment" tag="-" variable="tGratingDirectionStepDeg" value="gratingDirectionStepDeg"></action>
                                </action>
                                <action type="if" condition="tBlock2TrialNumber == 1">
                                    <action type="assignment" variable="tGratingAlphaMultiplier" value="block2GratingContrast"></action>
                                    <action type="assignment" variable="tGratingElevationDeg" value="block2GratingElevationDeg"></action>
                                    <action type="assignment" variable="tGratingAzimuthDeg" value="block2GratingAzimuthDeg"></action>
                                    <action type="assignment" variable="tGratingHeightDeg" value="block2GratingHeightDeg"></action>
                                    <action type="assignment" variable="tGratingWidthDeg" value="block2GratingWidthDeg"></action>
                                    <action type="assignment" variable="tGratingSpatialFreqCPD" value="block2GratingSpatialFreqCPD"></action>
                                    <action type="assignment" variable="tGratingSpeedDPS" value="block2GratingSpeedDPS"></action>
                                    <action type="assignment" variable="tGratingDurationMs" value="block2GratingDurationMs"></action>
                                    <action type="assignment" variable="tGratingBaseDirection" value="block2GratingBaseDirection"></action>
                                    <action type="assignment" variable="tGratingDirectionStepDeg" value="block2GratingDirectionStepDeg"></action>
                                </action>
                            </action>
                            <action type="if" tag="-" condition="block2DoRampLength">
                                <action type="assert" tag="-" condition="doLaserStim == 1" stop_on_failure="1" message="doLaserStim must be 1 for block2DoRampLength == 1"></action>
                                <action type="if" tag="-" condition="tBlock2TrialNumber == 0">
                                    <action type="assignment" tag="-" variable="tLaserRampLengthMs" value="laserRampLengthMs"></action>
                                    <action type="assignment" tag="-" variable="tLaserPeakMaxMw" value="laserPeakMaxMw"></action>
                                </action>
                                <action type="if" tag="-" condition="tBlock2TrialNumber == 1">
                                    <action type="assignment" tag="-" variable="tLaserRampLengthMs" value="block2RampLengthMs2"></action>
                                    <action type="assignment" tag="-" variable="tLaserPeakMaxMw" value="block2RampLengthPowerMaxMw2"></action>
                                </action>
                            </action>
                            <action type="if" tag="-" condition="block2DoRampVTrain">
                                <action type="assert" tag="-" condition="doLaserStim == 1" stop_on_failure="1" message="doLaserStim must be 1 for block2DoRampLength == 1"></action>
                                <action type="assert" tag="-" condition="laserDoLinearRamp+laserDoPulseTrain == 0" stop_on_failure="1" message="when block2 controls ramp v. train, set laserDoLinearRamp/PulseTrain both to 0"></action>
                                <action type="if" tag="-" condition="tBlock2TrialNumber == 0">
                                    <action type="assignment" tag="-" variable="tLaserDoLinearRamp" value="1"></action>
                                    <action type="assignment" tag="-" variable="tLaserRampLengthMs" value="laserRampLengthMs"></action>
                                    <action type="assignment" tag="-" variable="tLaserDoPulseTrain" value="0"></action>
                                    <action type="assignment" tag="-" variable="tLaserPeakMaxMw" value="laserPeakMaxMw"></action>
                                    <action type="assignment" tag="-" variable="tLaserPeakStepsPerOctave" value="laserPeakStepsPerOctave"></action>
                                </action>
                                <action type="if" tag="-" condition="tBlock2TrialNumber == 1">
                                    <action type="assignment" tag="-" variable="tLaserDoLinearRamp" value="0"></action>
                                    <action type="assignment" tag="-" variable="tLaserRampLengthMs" value="laserRampLengthMs"></action>
                                    <action type="assignment" tag="-" variable="tLaserDoPulseTrain" value="1"></action>
                                    <action type="assignment" tag="-" variable="tLaserPeakMaxMw" value="block2RvtTrainPowerMaxMw"></action>
                                    <action type="assignment" tag="-" variable="tLaserPeakStepsPerOctave" value="block2RvtTrainStepsPerOctave"></action>
                                </action>
                            </action>
                            <action type="if" condition="block2DoTrialLaser">
                                <action type="assert" condition="!doLaserStim" stop_on_failure="1" message="When using trialLaser, doLaserStim must be off"></action>
                                <action type="assignment" tag="-" variable="tGratingDurationMs" value="gratingDurationMs"></action>
                                <action type="if" condition="tBlock2TrialNumber == 0">
                                    <action type="assignment" tag="-" variable="tTrialLaserPowerMw" value="trialLaserPowerMw"></action>
                                    <action type="assignment" variable="tTrialLaserOnTimeMs" value="trialLaserOnTimeMs"></action>
                                    <action type="assignment" variable="tTrialLaserOffTimeMs" value="trialLaserOffTimeMs"></action>
                                    <action type="assignment" tag="-" variable="tGratingBaseDirection" value="gratingBaseDirection"></action>
                                    <action type="assignment" tag="-" variable="tGratingDirectionStepDeg" value="gratingDirectionStepDeg"></action>
                                </action>
                                <action type="if" condition="tBlock2TrialNumber == 1">
                                    <action type="assignment" tag="-" variable="tTrialLaserPowerMw" value="block2TrialLaserPowerMw"></action>
                                    <action type="assignment" variable="tTrialLaserOnTimeMs" value="block2TrialLaserOnTimeMs"></action>
                                    <action type="assignment" variable="tTrialLaserOffTimeMs" value="block2TrialLaserOffTimeMs"></action>
                                    <action type="assignment" tag="-" variable="tGratingAlphaMultiplier" value="block2TrialLaserGratingContrast"></action>
                                    <action type="assignment" tag="-" variable="tGratingBaseDirection" value="block2TrialLaserBaseDirection"></action>
                                    <action type="assignment" tag="-" variable="tGratingDirectionStepDeg" value="block2TrialLaserDirectionStepDeg"></action>
                                </action>
                                <action type="assignment" variable="tGratingAlphaMultiplier" value="gratingContrast"></action>
                                <action type="assignment" variable="tGratingElevationDeg" value="gratingElevationDeg"></action>
                                <action type="assignment" variable="tGratingAzimuthDeg" value="gratingAzimuthDeg"></action>
                                <action type="assignment" variable="tGratingHeightDeg" value="gratingHeightDeg"></action>
                                <action type="assignment" variable="tGratingWidthDeg" value="gratingWidthDeg"></action>
                                <action type="assignment" variable="tGratingSpatialFreqCPD" value="gratingSpatialFreqCPD"></action>
                                <action type="assignment" variable="tGratingSpeedDPS" value="gratingSpeedDPS"></action>
                                <action type="assignment" variable="tGratingDurationMs" value="gratingDurationMs"></action>
                            </action>
                        </action>
                        <action type="if" tag="-" condition="! doBlock2">
                            <action type="assignment" variable="tGratingAlphaMultiplier" value="gratingContrast"></action>
                            <action type="assignment" variable="tGratingElevationDeg" value="gratingElevationDeg"></action>
                            <action type="assignment" variable="tGratingAzimuthDeg" value="gratingAzimuthDeg"></action>
                            <action type="assignment" variable="tGratingHeightDeg" value="gratingHeightDeg"></action>
                            <action type="assignment" variable="tGratingWidthDeg" value="gratingWidthDeg"></action>
                            <action type="assignment" variable="tGratingSpatialFreqCPD" value="gratingSpatialFreqCPD"></action>
                            <action type="assignment" variable="tGratingSpeedDPS" value="gratingSpeedDPS"></action>
                            <action type="assignment" variable="tGratingDurationMs" value="gratingDurationMs"></action>
                            <action type="assignment" variable="tLaserRampLengthMs" value="laserRampLengthMs"></action>
                            <action type="assignment" variable="tLaserPeakMaxMw" value="laserPeakMaxMw"></action>
                            <action type="assignment" variable="tLaserPeakStepsPerOctave" value="laserPeakStepsPerOctave"></action>
                            <action type="assignment" variable="tGratingBaseDirection" value="gratingBaseDirection"></action>
                            <action type="assignment" variable="tGratingDirectionStepDeg" value="gratingDirectionStepDeg"></action>
                            <action type="assignment" variable="tLaserDoLinearRamp" value="laserDoLinearRamp"></action>
                            <action type="assignment" variable="tLaserDoPulseTrain" value="laserDoPulseTrain"></action>
                            <action type="assignment" variable="tTrialLaserPowerMw" value="trialLaserPowerMw"></action>
                            <action type="assignment" variable="tTrialLaserOnTimeMs" value="trialLaserOnTimeMs"></action>
                            <action type="assignment" variable="tTrialLaserOffTimeMs" value="trialLaserOffTimeMs"></action>
                            <action type="assert" stop_on_failure="1" condition="!doLaserStim || (laserDoLinearRamp || laserDoPulseTrain)" message="When doLaserStim, ramp or train must be set"></action>
                        </action>
                        <action type="if" condition="!doGeomHoldDist">
                            <action type="assignment" variable="tRandReqHoldTimeMs" value="rand(0,randReqHoldMaxMs)"></action>
                        </action>
                        <action type="if" condition="doGeomHoldDist">
                            <action type="assignment" variable="tRandReqHoldTimeMs" value="geom_rand(1.0/geomHoldMeanMs, randReqHoldMaxMs)"></action>
                        </action>
                        <action type="assignment" variable="tTotalReqHoldTimeMs" value="fixedReqHoldTimeMs + tRandReqHoldTimeMs"></action>
                        <action type="if" tag="-" condition="doLaserStim">
                            <action type="assignment" tag="-" variable="tLaserPowerMw" value="tLaserPeakMaxMw / pow(2, 1.0*tStimulusNumber/tLaserPeakStepsPerOctave)"></action>
                            <action type="report" tag="-" message="Laser power this trial is $tLaserPowerMw"></action>
                            <action type="assert" condition="tTrialLaserPowerMw == 0" stop_on_failure="1" message="bug: tLaserPowerMw and tTrialLaserPowerMw != 0"></action>
                        </action>
                        <action type="if" tag="-" condition="!doLaserStim">
                            <action type="assignment" tag="-" variable="tLaserPowerMw" value="0"></action>
                        </action>
                        <action type="if" tag="-" condition="doVisualStim">
                            <action type="assignment" tag="-" variable="tGratingDirectionDeg" value="tGratingBaseDirection + tStimulusNumber * tGratingDirectionStepDeg"></action>
                            <action type="report" tag="-" message="Grating direction this trial is $tGratingDirectionDeg"></action>
                        </action>
                        <action type="if" tag="-" condition="!doVisualStim">
                            <action type="assignment" tag="-" variable="tGratingDirectionDeg" value="0"></action>
                        </action>
                        <action type="if" tag="-" condition="doLaserStim">
                            <action type="assignment" tag="Send laser params to controller" variable="sendLaserParams" value="1"></action>
                            <action type="assignment" tag="Send laser params to controller" variable="sendLaserParams" value="0"></action>
                        </action>
                        <action type="if" tag="-" condition="forceMinStimStepTo >= 0">
                            <action type="if" tag="-" condition="tStimulusNumber+1 == 8">
                                <action type="if" tag="-" condition="doVisualStim">
                                    <action type="assignment" tag="-" variable="tGratingDirectionDeg" value="forceMinStimStepTo"></action>
                                </action>
                                <action type="if" tag="-" condition="doLaserStim">
                                    <action type="assignment" tag="-" variable="tLaserPowerMw" value="forceMinStimStepTo"></action>
                                </action>
                            </action>
                        </action>
						<action type="if" tag="-" condition="tThisTrialStartTimeMs == -1">  
							<action type="assignment" tag="-" variable="tLastTrialStartTimeMs" value="-1"></action>
						</action>
                        <action type="if" tag="-" condition="tThisTrialStartTimeMs != -1">
                            <action type="assignment" tag="-" variable="tLastTrialStartTimeMs" value="tThisTrialStartTimeMs"></action>
                        </action>
                        <action type="assignment" tag="-" variable="tThisTrialStartTimeMs" value="now()/1000"></action>
                        <action type="report" message="tNStimAccepted == $tNStimAccepted, svStimN is $svStimNumber, tb2TrN is $tBlock2TrialNumber"></action>
                        <action type="assignment" variable="tItiWaitTimeMs" value="itiTimeMs"></action>
                        <action type="if" condition="itiExtraRandTimeMs > 0">
                            <action type="assignment" variable="tItiWaitTimeMs" value="tItiWaitTimeMs + rand(0, itiExtraRandTimeMs)"></action>
                        </action>
                        <action type="if" tag="-" condition="doExtendItiOnShortPrevTrial == 1">
                            <action type="assignment" tag="-" variable="tempMs" value="(fixedReqHoldTimeMs+randReqHoldMaxMs)-lastActualHoldTimeMs"></action>
                            <action type="if" tag="-" condition="tempMs > 0">
                                <action type="assignment" tag="-" variable="tItiWaitTimeMs" value="tItiWaitTimeMs+tempMs"></action>
                            </action>
                        </action>
                        <action type="start_timer" tag="Start interTrialTimer" timer="interTrialTimer" timebase="" duration="tItiWaitTimeMs" duration_units="ms"></action>
                        <action type="assignment" tag="Clear stimulusOn" variable="stimulusOn" value="0"></action>
                        <action type="assignment" tag="Encode ItiStart" variable="strobedDigitalWord" value="6"></action>
                        <action type="if" condition="doLeverSolenoidAllTrials">
                            <action type="assignment" tag="lever Solenoid on" variable="FIO2" value="1"></action>
                            <action type="assignment" tag="Encode LeverSolenoidOn" variable="strobedDigitalWord" value="12"></action>
                        </action>
                        <action type="if" condition="!doLeverSolenoidAllTrials">
                            <action type="assignment" variable="FIO2" value="0"></action>
                            <action type="assignment" tag="Encode LeverSolenoidOff" variable="strobedDigitalWord" value="13"></action>
                        </action>
                        <action type="report" tag="-" message="In ITI, waiting for $tItiWaitTimeMs ms, then waiting for press"></action>
                        <action type="if" condition="tTrialLaserPowerMw > 0">
                            <action type="assignment" tag="Send laser params to controller" variable="sendLaserParams" value="1"></action>
                            <action type="assignment" tag="Send laser params to controller" variable="sendLaserParams" value="0"></action>
                            <action type="assert" condition="tLaserPowerMw == 0" stop_on_failure="1" message="bug: tLaserPowerMw and tTrialLaserPowerMw > 0"></action>
                            <action type="assert" stop_on_failure="1" condition="(tTrialLaserOnTimeMs == 0 &amp;&amp; tTrialLaserOffTimeMs == 0) || (tTrialLaserOnTimeMs > 0 &amp;&amp; tTrialLaserOffTimeMs > 0)" message="For constant trial laser, set on and off time to 0. Otherwise on/off time must both be set"></action>
                        </action>
                        <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                        <transition type="timer_expired" tag="If Expired, Go To StartTrial" target="StartTrial" timer="interTrialTimer"></transition>
                    </task_system_state>
                    <task_system_state tag="StartTrial" full_name="" description="" interruptible="YES">
                        <action type="if" tag="if doLeverSolenoid/ErrorsOnly" condition="doLeverSolenoidAllTrials || doLeverSolenoidOnMiss || doLeverSolenoidOnEarly">
                            <action type="assignment" tag="lever Solenoid off" variable="FIO2" value="0"></action>
                            <action type="assignment" tag="Encode LeverSolenoidOff" variable="strobedDigitalWord" value="13"></action>
                        </action>
                        <action type="assignment" tag="set tStartTrialWaitForPressTimeMs" variable="tStartTrialWaitForPressTimeMs" value="now()/1000.0"></action>
                        <action type="assignment" tag="Encode StartTrialWaitForPress" variable="strobedDigitalWord" value="7"></action>
                        <action tag="Play waitingForLeverSound" type="play_sound" sound="waitingForLeverSound"></action>
                        <action type="if" tag="if fakeMouse" condition="!doLever">
                            <action type="assignment" tag="set tFakeMousePressMs" variable="tFakeMousePressMs" value="rand(0, fakeMouseMaxPressMs)"></action>
                        </action>
                        <transition type="conditional" tag="If Lever Down, Go To Hold Lever" condition="doLever &amp;&amp; FIO1 == 1" target="HoldLever"></transition>
                        <transition type="conditional" tag="If fakeMouse elapsed, go to HoldLever" condition="!doLever &amp;&amp; ( (now()/1000.0)-tStartTrialWaitForPressTimeMs) > tFakeMousePressMs" target="HoldLever"></transition>
                        <transition type="conditional" tag="If waiting here too long (120s), go to HoldLever" condition="doLever &amp;&amp; ( (now()/1000.0)-tStartTrialWaitForPressTimeMs) > 120*1000" target="HoldLever"></transition>
                    </task_system_state>
                    <task_system_state tag="HoldLever" interruptible="YES">
                        <action_marker _unmoveable="1" tag="Actions"></action_marker>
                        <action tag="play louderPressSound" type="play_sound" sound="louderPressSound"></action>
                        <action type="assignment" tag="leverResult = 1" variable="leverResult" value="1"></action>
                        <action type="assignment" tag="set pressTimestampMs" variable="pressTimestampMs" value="now()/1000"></action>
                        <action type="assignment" tag="Encode LeverPressStart" variable="strobedDigitalWord" value="3"></action>
                        <action type="if" tag="if tTrialLaserPowerMw > 0" condition="tTrialLaserPowerMw > 0">
                            <action type="assignment" tag="laserTriggerFIO" variable="laserTriggerFIO" value="1"></action>
                            <action type="assignment" tag="Encode LaserStimOn" variable="strobedDigitalWord" value="5"></action>
                        </action>
                        <action type="if" tag="if fakeMouse" condition="!doLever">
                            <action type="assignment" tag="Assign tFakeMouseReactMs" variable="tFakeMouseReactMs" value="rand(0, fakeMouseMaxReactMs)"></action>
                            <action type="start_timer" tag="Start Fake Mouse Timer" timer="fakeMouseTimer" timebase="" duration="tFakeMouseReactMs" duration_units="ms"></action>
                            <action tag="Report FakeMouseTimer" full_name="Report Press" type="report" message="fake mouse to react in $tFakeMouseReactMs ms"></action>
                        </action>
                        <action type="if" tag="if ! fakeMouse" condition="doLever">
                            <action type="start_timer" tag="Start fakeMouseTimer infinite" timer="fakeMouseTimer" timebase="" duration="100000" duration_units="ms"></action>
                        </action>
                        <action type="start_timer" tag="Start LeverHold Timer" timer="leverHoldTimer" timebase="" duration="tTotalReqHoldTimeMs" duration_units="ms"></action>
                        <action tag="Report LeverDown" full_name="ReportDigital" type="report" message="LeverDown (need to hold for $tTotalReqHoldTimeMs + tooFastTime ms)"></action>
                        <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                        <transition type="conditional" tag="If Lever Up, Go To EarlyRelease" condition="FIO1 == 0 &amp;&amp; doLever == 1" target="EarlyRelease"></transition>
                        <transition type="timer_expired" tag="If fakeMouseTimer expired, go to EarlyRelease" target="EarlyRelease" timer="fakeMouseTimer"></transition>
                        <transition type="timer_expired" tag="If leverHoldTimer Expired, Go To StimOn" target="StimOn" timer="leverHoldTimer"></transition>
                    </task_system_state>
                    <task_system_state tag="StimOn" interruptible="YES">
                        <action_marker _unmoveable="1" tag="Actions"></action_marker>
                        <action type="start_timer" tag="Start Too Fast Timer" timer="tooFastTimer" timebase="" duration="tooFastTimeMs" duration_units="ms"></action>
                        <action type="start_timer" tag="Start React Timer" timer="reactTimeTimer" timebase="" duration="reactTimeMs" duration_units="ms"></action>
                        <action type="if" condition="!doLongBonus" tag="if !doLongBonus">
                            <action type="assignment" tag="Set StimulusOn" variable="stimulusOn" value="1"></action>
                            <action tag="Report StimOn" full_name="ReportDigital" type="report" message="StimOn (still holding; signaling release ok)"></action>
                            <action type="if" tag="if doVisualStim" condition="doVisualStim">
                                <action tag="Queue Stimulus" type="live_queue_stimulus" stimulus="target_grating"></action>
                                <action tag="dequeue base_grating" type="dequeue_stimulus" stimulus="base_grating"></action>
                                <action type="play_dynamic_stimulus" stimulus="target_grating" tag="start"></action>
                                <action tag="Update Display" type="update_stimulus_display"></action>
                                <action type="assignment" tag="Encode VisStimOn" variable="strobedDigitalWord" value="4"></action>
                            </action>
                            <action type="if" tag="if doLaserStim" condition="doLaserStim">
                                <action type="assignment" tag="set laserTriggerFIO" variable="laserTriggerFIO" value="1"></action>
                                <action type="assignment" tag="Encode LaserStimOn" variable="strobedDigitalWord" value="5"></action>
                            </action>
                            <action type="assignment" tag="tStimTurnedOn" variable="tStimTurnedOn" value="1"></action>
                        </action>
                        <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                        <transition type="direct" tag="Always Go to CheckTooFastTime" target="CheckTooFastTime"></transition>
                    </task_system_state>
                    <task_system_state tag="CheckTooFastTime" interruptible="YES">
                        <action type="if" tag="if tStimTurnedOn == 1" condition="tStimTurnedOn == 1">
                            <action type="if" tag="if not too fast" condition="(((now()/1000) - pressTimestampMs) - tTotalReqHoldTimeMs) > tGratingDurationMs">
                                <action tag="dequeue target_grating" type="dequeue_stimulus" stimulus="target_grating"></action>
                                <action tag="queue base_grating" type="live_queue_stimulus" stimulus="base_grating"></action>
                                <action type="play_dynamic_stimulus" stimulus="base_grating" tag="start base_grating"></action>
                                <action tag="update dispay" type="update_stimulus_display"></action>
                                <action type="assignment" tag="set tStimTurnedOn" variable="tStimTurnedOn" value="0"></action>
                            </action>
                        </action>
                        <transition type="timer_expired" tag="if tooFastTimer expired, go to React" target="React" timer="tooFastTimer"></transition>
                        <transition type="conditional" tag="If LeverUp, go to EarlyRelease" condition="FIO1 == 0 &amp;&amp; doLever == 1" target="EarlyRelease"></transition>
                        <transition type="timer_expired" tag="If fakeMouseTimer expired, go to EarlyRelease" target="EarlyRelease" timer="fakeMouseTimer"></transition>
                        <transition type="direct" target="CheckTooFastTime"></transition>
                    </task_system_state>
                    <task_system_state tag="React" interruptible="YES">
                        <action_marker _unmoveable="1" tag="Actions"></action_marker>
                        <action type="if" tag="-" condition="tStimTurnedOn == 1">
                            <action type="if" tag="-" condition="(((now()/1000) - pressTimestampMs) - tTotalReqHoldTimeMs) > tGratingDurationMs">
                                <action tag="-" type="dequeue_stimulus" stimulus="target_grating"></action>
                                <action tag="Queue Stimulus" type="live_queue_stimulus" stimulus="base_grating"></action>
                                <action type="play_dynamic_stimulus" stimulus="base_grating" tag="start"></action>
                                <action tag="Update Display" type="update_stimulus_display"></action>
                                <action type="assignment" tag="-" variable="tStimTurnedOn" value="0"></action>
                            </action>
                        </action>
                        <action type="if" condition="doLongBonus">
                            <action type="if" condition="tStimTurnedOn == 0 &amp;&amp; ((now()/1000) - pressTimestampMs) >= tTotalReqHoldTimeMs+longBonusExtraHoldTimeMs">
                                <action type="if" condition="((now()/1000) - pressTimestampMs) &lt; tTotalReqHoldTimeMs+tGratingDurationMs">
                                    <action type="assignment" tag="Set StimulusOn" variable="stimulusOn" value="1"></action>
                                    <action tag="Report StimOn" full_name="ReportDigital" type="report" message="StimOn (still holding; signaling release ok)"></action>
                                    <action type="if" tag="-" condition="doVisualStim">
                                        <action tag="Queue Stimulus" type="queue_stimulus" stimulus="target_grating"></action>
                                        <action type="play_dynamic_stimulus" stimulus="target_grating" tag="start"></action>
                                        <action type="assignment" tag="Encode VisStimOn" variable="strobedDigitalWord" value="4"></action>
                                    </action>
                                    <action type="if" tag="-" condition="doLaserStim">
                                        <action type="assignment" tag="-" variable="laserTriggerFIO" value="1"></action>
                                        <action type="assignment" tag="Encode LaserStimOn" variable="strobedDigitalWord" value="5"></action>
                                    </action>
                                    <action tag="Update Display" type="update_stimulus_display"></action>
                                    <action type="assignment" tag="-" variable="tStimTurnedOn" value="1"></action>
                                </action>
                            </action>
                        </action>
                        <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                        <transition type="conditional" tag="If Lever Up, Go To Reward" condition="FIO1 == 0 &amp;&amp; doLever == 1" target="Reward"></transition>
                        <transition type="timer_expired" tag="If fakeMouse expired, Transition to Reward" target="Reward" timer="fakeMouseTimer"></transition>
                        <transition type="timer_expired" tag="If React Time Expired, Go To Missed" target="Missed" timer="reactTimeTimer"></transition>
                        <transition type="direct" tag="-" target="React"></transition>
                    </task_system_state>
                    <task_system_state tag="EarlyRelease" interruptible="YES">
                        <action_marker _unmoveable="1" tag="Actions"></action_marker>
                        <action type="assignment" tag="leverResult = 0" variable="leverResult" value="0"></action>
                        <action type="assignment" tag="Encode LeverReleaseEarly" variable="strobedDigitalWord" value="8"></action>
                        <action type="assignment" tag="-" variable="actualHoldTimeMs" value=" (now()/1000) - pressTimestampMs"></action>
                        <action type="report" tag="Report" message="actualHoldTimeMs = $actualHoldTimeMs"></action>
                        <action tag="ReportEarlyRelease" full_name="ReportDigital" type="report" message="** Early Release (FIO1 = $FIO1 )"></action>
                        <action type="assignment" tag="failure++" variable="failure" value="failure+1"></action>
                        <action type="assignment" tag="consecCorrects = 0" variable="consecCorrects" value="0"></action>
                        <action type="assignment" tag="-" variable="tConsecErrors" value="tConsecErrors+1"></action>
                        <action tag="Play incorrectSound" type="play_sound" sound="incorrectSound"></action>
                        <action tag="-" type="reject_selections" selection="svStimNumber"></action>
                        <action type="if" tag="if doLeverSolenoid/Early" condition="doLeverSolenoidAllTrials || doLeverSolenoidOnEarly">
                            <action type="assignment" tag="lever Solenoid on" variable="FIO2" value="1"></action>
                            <action type="assignment" tag="Encode LeverSolenoidOn" variable="strobedDigitalWord" value="12"></action>
                        </action>
                        <action tag="Dequeue Stimulus 0" type="dequeue_stimulus" stimulus="target_grating"></action>
                        <action tag="Queue Stimulus" type="live_queue_stimulus" stimulus="base_grating"></action>
                        <action type="play_dynamic_stimulus" stimulus="base_grating" tag="start"></action>
                        <action tag="Update Display" type="update_stimulus_display"></action>
                        <action type="start_timer" tag="Start earlyTimeoutTimer" timer="earlyTimeoutTimer" timebase="" duration="earlyTimeoutMs" duration_units="ms"></action>
                        <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                        <transition type="timer_expired" tag="-" target="PossibleEndTimeout" timer="earlyTimeoutTimer"></transition>
                    </task_system_state>
                    <task_system_state tag="Reward" interruptible="YES">
                        <action_marker _unmoveable="1" tag="Actions"></action_marker>
                        <action type="assignment" tag="leverResult = 0" variable="leverResult" value="0"></action>
                        <action type="assignment" tag="Encode LeverReleaseCorrect" variable="strobedDigitalWord" value="9"></action>
                        <action tag="-" type="accept_selections" selection="svStimNumber"></action>
                        <action type="assignment" tag="-" variable="tNStimAccepted" value="tNStimAccepted + 1"></action>
                        <action type="if" tag="-" condition="tNStimAccepted >= 80">
                            <action tag="-" type="reset_selection" selection="svStimNumber"></action>
                            <action type="assignment" tag="-" variable="tNStimAccepted" value="0"></action>
                        </action>
                        <action type="if" tag="-" condition="tNStimAccepted &lt; 80">
                            <action tag="-" type="next_selection" selection="svStimNumber"></action>
                        </action>
                        <action type="assignment" tag="-" variable="actualHoldTimeMs" value=" (now()/1000) - pressTimestampMs"></action>
                        <action type="report" tag="Report" message="actualHoldTimeMs = $actualHoldTimeMs"></action>
                        <action tag="Report Reward" full_name="ReportDigital" type="report" message="** Success"></action>
                        <action type="assignment" tag="success++" variable="success" value="success+1"></action>
                        <action type="assignment" tag="-" variable="tConsecErrors" value="0"></action>
                        <action type="assignment" tag="Compute tRewardAddPerMsHoldUs" variable="tRewardAddPerMsHoldUs" value="(maxRewardUs - minRewardUs) / ( randReqHoldMaxMs )"></action>
                        <action type="assignment" tag="Assign tTotalRewardTimeUs" variable="tTotalRewardTimeUs" value="minRewardUs + ( tRewardAddPerMsHoldUs * tRandReqHoldTimeMs )"></action>
                        <action type="if" tag="-" condition="doLongBonus &amp;&amp; actualHoldTimeMs >= tTotalReqHoldTimeMs+longBonusExtraHoldTimeMs">
                            <action type="assignment" tag="-" variable="tTotalRewardTimeUs" value="tTotalRewardTimeUs+longBonusExtraRewardUs"></action>
                            <action type="assignment" tag="-" variable="tGotLongBonusThisTrial" value="1"></action>
                        </action>
                        <action type="if" tag="if consecCorrects &lt; max" condition="consecCorrects &lt; maxConsecCorrects">
                            <action type="assignment" tag="consecCorrects++" variable="consecCorrects" value="consecCorrects+1"></action>
                        </action>
                        <action type="assignment" tag="set tNRewards" variable="tNRewards" value="consecCorrects"></action>
                        <action tag="Dequeue Stimulus 2" type="dequeue_stimulus" stimulus="target_grating"></action>
                        <action tag="Queue Stimulus" type="live_queue_stimulus" stimulus="base_grating"></action>
                        <action type="play_dynamic_stimulus" stimulus="base_grating" tag="start"></action>
                        <action tag="Update Display" type="update_stimulus_display"></action>
                        <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                        <transition type="direct" tag="Always Go to GiveReward" target="GiveReward"></transition>
                    </task_system_state>
                    <task_system_state tag="GiveReward" interruptible="YES">
                        <action_marker _unmoveable="1" tag="Actions"></action_marker>
                        <action type="assignment" tag="tNRewards--" variable="tNRewards" value="tNRewards-1"></action>
                        <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                        <transition type="conditional" tag="if rewards remain, go to SingleReward (note must be -1)" condition="tNRewards > -1" target="SingleReward"></transition>
                        <transition type="direct" tag="Always Go to PRP" target="PostRewardPause"></transition>
                    </task_system_state>
                    <task_system_state tag="PostRewardPause" interruptible="YES">
                        <action type="start_timer" tag="StartTimer" timer="postRewardTimer" timebase="" duration="postRewardMs" duration_units="ms"></action>
                        <action_marker _unmoveable="1" tag="Actions"></action_marker>
                        <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                        <transition type="timer_expired" tag="-" target="PossibleEndTimeout" timer="postRewardTimer"></transition>
                    </task_system_state>
                    <task_system_state tag="SingleReward" interruptible="YES">
                        <action_marker _unmoveable="1" tag="Actions"></action_marker>
                        <action type="assignment" tag="interRewardInterval minimum to juiceTime" variable="tInterRewardIntervalMs" value="interRewardIntervalMs + ( tTotalRewardTimeUs / 1000 )"></action>
                        <action type="start_timer" tag="Start interRewardIntervalTimer" timer="interRewardIntervalTimer" timebase="" duration="tInterRewardIntervalMs" duration_units="ms"></action>
                        <action type="assignment" tag="Start reward" variable="juice" value="tTotalRewardTimeUs"></action>
                        <action type="assignment" tag="Encode Reward" variable="strobedDigitalWord" value="10"></action>
                        <action type="report" tag="Report" message="juice = $juice"></action>
                        <action tag="Play reward sound" type="play_sound" sound="rewardSound"></action>
                        <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                        <transition type="timer_expired" tag="If interRewardIntervalTimer expired, go to GiveReward" target="GiveReward" timer="interRewardIntervalTimer"></transition>
                    </task_system_state>
                    <task_system_state tag="Missed" interruptible="YES">
                        <action_marker _unmoveable="1" tag="Actions"></action_marker>
                        <action type="assignment" tag="leverResult = 0" variable="leverResult" value="0"></action>
                        <action type="assignment" tag="Encode LeverNoReleaseMiss" variable="strobedDigitalWord" value="11"></action>
                        <action type="assignment" tag="-" variable="actualHoldTimeMs" value=" (now()/1000) - pressTimestampMs"></action>
                        <action type="report" tag="Report" message="actualHoldTimeMs = $actualHoldTimeMs"></action>
                        <action type="assignment" tag="ignore++" variable="ignore" value="ignore + 1"></action>
                        <action type="assignment" tag="consecCorrects = 0" variable="consecCorrects" value="0"></action>
                        <action type="assignment" tag="-" variable="tConsecErrors" value="tConsecErrors+1"></action>
                        <action tag="Report 4" full_name="ReportDigital" type="report" message="** Ignored react stimulus"></action>
                        <action tag="Play incorrectSound 2" type="play_sound" sound="incorrectSound"></action>
                        <action tag="-" type="accept_selections" selection="svStimNumber"></action>
                        <action type="assignment" tag="-" variable="tNStimAccepted" value="tNStimAccepted + 1"></action>
                        <action type="if" tag="-" condition="tNStimAccepted >= 80">
                            <action tag="-" type="reset_selection" selection="svStimNumber"></action>
                            <action type="assignment" tag="-" variable="tNStimAccepted" value="0"></action>
                        </action>
                        <action type="if" tag="-" condition="tNStimAccepted &lt; 80">
                            <action tag="-" type="next_selection" selection="svStimNumber"></action>
                        </action>
                        <action type="start_timer" tag="start timer" timer="missedTimeoutTimer" timebase="" duration="missedTimeoutMs" duration_units="ms"></action>
                        <action type="if" tag="if doLeverSolenoid/ErrorsOnly" condition="doLeverSolenoidAllTrials || doLeverSolenoidOnMiss">
                            <action type="assignment" tag="lever Solenoid on" variable="FIO2" value="1"></action>
                            <action type="assignment" tag="Encode LeverSolenoidOn" variable="strobedDigitalWord" value="12"></action>
                        </action>
                        <action tag="Dequeue Stimulus 1" type="dequeue_stimulus" stimulus="target_grating"></action>
                        <action tag="Queue Stimulus" type="live_queue_stimulus" stimulus="base_grating"></action>
                        <action type="play_dynamic_stimulus" stimulus="base_grating" tag="start"></action>
                        <action tag="Update Display" type="update_stimulus_display"></action>
                        <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                        <transition type="timer_expired" tag="-" target="PossibleEndTimeout" timer="missedTimeoutTimer"></transition>
                    </task_system_state>
                    <task_system_state tag="PossibleEndTimeout" interruptible="YES">
                        <!-- do timeout if too many recent errors:
                           use a state rather than a wait action because states are interruptible -->
                        <action type="if" tag="-" condition="tConsecErrors >= nConsecErrorsCauseTimeout">
                            <action type="report" message="***!!*** $consecErrorTimeoutS s timeout after $tConsecErrors consecutive errors"></action>
                            <action type="start_timer" tag="-" timer="consecErrorTimer" timebase="" duration="consecErrorTimeoutS" duration_units="s"></action>
                        </action>
                        <transition type="conditional" tag="- bypass timer checking if no timeout requested" condition="tConsecErrors &lt; nConsecErrorsCauseTimeout" target="EndTrial"></transition>
                        <transition type="timer_expired" tag="-" target="EndTrial" timer="consecErrorTimer"></transition>
                    </task_system_state>
                    <task_system_state tag="EndTrial" interruptible="YES">
                        <action_marker _unmoveable="1" tag="Actions"></action_marker>
                        <action type="assignment" tag="set laserTriggerFIO" variable="laserTriggerFIO" value="0"></action>
                        <action tag="Stop IO Device" type="stop_device_IO" device="LabJackU6"></action>
                        <action tag="Dequeue Stimulus 0" type="dequeue_stimulus" stimulus="target_grating"></action>
                        <action tag="Update Stimulus" type="update_stimulus_display"></action>
                        <action type="assignment" tag="End Matlab Sync" variable="sync" value="0"></action>
                        <action type="if" tag="if too many consec errors" condition="tConsecErrors == nConsecErrorsCauseTimeout">
                            <action type="assignment" tag="set tConsecErrors" variable="tConsecErrors" value="nConsecErrorsCauseTimeout-2"></action>
                        </action>
                        <action type="assignment" tag="encode END" variable="strobedDigitalWord" value="85"></action>
                        <action type="assignment" tag="encode END" variable="strobedDigitalWord" value="85"></action>
                        <action type="assignment" tag="encode END" variable="strobedDigitalWord" value="85"></action>
                        <action type="assignment" tag="send serial params" variable="sendSerialParams" value="1"></action>
                        <action type="assignment" tag="send serial params" variable="sendSerialParams" value="0"></action>
                        <transition_marker _unmoveable="1" tag="Transitions"></transition_marker>
                        <transition type="yield" tag="return to parent task system"></transition>
                    </task_system_state>
                </task_system>
            </trial>
            <action tag="dequeue base_grating" type="dequeue_stimulus" stimulus="base_grating"></action>
            <action tag="update stimulus" type="update_stimulus_display"></action>
        </protocol>
    </experiment>
</monkeyml>